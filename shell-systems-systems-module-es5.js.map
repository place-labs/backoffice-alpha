{"version":3,"sources":["webpack:///src/app/shell/systems/system-about/system-about.template.html","webpack:///src/app/shell/systems/system-about/system-about.component.ts","webpack:///src/app/shell/systems/system-metadata/system-metadata.component.ts","webpack:///src/app/shell/systems/system-metadata/system-metadata.template.html","webpack:///src/app/shell/systems/system-modules/system-modules.component.ts","webpack:///src/app/shell/systems/system-modules/system-modules.template.html","webpack:///src/app/shell/systems/system-triggers/system-triggers.template.html","webpack:///src/app/shell/systems/system-triggers/system-triggers.component.ts","webpack:///src/app/shell/systems/system-zones/system-zones.component.ts","webpack:///src/app/shell/systems/system-zones/system-zones.template.html","webpack:///src/app/shell/systems/systems.component.ts","webpack:///src/app/shell/systems/systems.template.html","webpack:///src/app/shell/systems/systems.module.ts","webpack:///src/app/shell/systems/systems.routes.ts"],"names":["SystemAboutComponent","_service","_dialog","other_settings","item","modules","subscription","listen","subscribe","loadZones","loadSettings","changes","ref","open","data","title","content","icon","type","componentInstance","event","e","reason","Systems","startSystem","id","then","result","err","notifyError","JSON","stringify","response","message","stopSystem","Zones","query","control_system_id","offset","list","sort","a","b","zones","indexOf","settings","get","selector","templateUrl","styleUrls","$event","stopPropagation","SystemMetadataComponent","metadata","form_map","edited","loading","name_list","control","value","name","ngOnChanges","loadMetadata","push","Math","floor","random","description","details","generateForms","field","form","maxWidth","notifySuccess","filter","prop","close","markAllAsTouched","valid","update","parse","index","findIndex","i","splice","controls","forEach","group","required","validateName","map","undefined","valueChanges","show","Object","keys","key","SystemModulesComponent","_debug_service","device_classes","device_listener","menu_options","offline_options","exclude_fn","role","Logic","loadModules","Modules","complete","devices","generateModuleBindings","device","power","viewState","reloadModule","remove","loadModule","hide_exec","running","stop","refresh_modules","length","viewDetails","start","k","hasOwnProperty","system","module","driver","recompile","Drivers","driver_id","_","unsub","load","previousIndex","currentIndex","storePendingChange","save","removeModule","height","width","maxHeight","control_system","service","readonly","addModule","concat","version","_version","set","timeout","afterClosed","new_module","joinModule","mod_list","isListening","unbind","bind","counter","custom_name","reduce","SystemTriggersComponent","_composer","trigger_list","filtered_triggers","trigger_state","comparisons","loadSystemTriggers","listTriggers","search_str","search","s","toLowerCase","includes","conditions","trigger","location","origin","webhook_secret","Triggers","external_save","url","auth","api_endpoint","http","put","toJSON","service_name","addTrigger","enabled","important","trigger_id","SystemZonesComponent","zone","listZones","emit","new_zone","notifyInfo","SystemsComponent","_route","_router","metadata_count","limit","sys_id","trigger_count","device_count","zone_count","console","log","copy","modal_ref","navigate","sidebarEvent","itemEvent","AppSystemsModule","forChild","declarations","imports","ROUTES","path","component","children","redirectTo"],"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","file":"shell-systems-systems-module-es5.js","sourcesContent":["<div class=\"container\" *ngIf=\"item\">\n    <section class=\"select\">\n        <button mat-button (tapped)=\"start()\"  i18n=\"@@systemStartAction\">Start System</button>\n        <button mat-button (tapped)=\"stop()\" i18n=\"@@systemStopAction\">Stop System</button>\n    </section>\n    <section class=\"details\">\n        <div class=\"field\" *ngIf=\"item.support_url\">\n            <label i18n=\"@@systemUrlLabel\">Support URL:</label>\n            <div class=\"value\">\n                <a [href]=\"item.support_url\" target=\"_blank\">{{item.support_url}}</a>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.bookable\">\n            <label i18n=\"@@systemBookableLabel\">Bookable Room:</label>\n            <div class=\"value\">{{item.bookable ? 'Yes' : 'No'}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.bookable && item.email\">\n            <label i18n=\"@@emailLabel\">Email:&nbsp;</label>\n            <a *ngIf=\"item.email\" [href]=\"'mailto:' + item.email\" target=\"_blank\">{{item.email}}</a>\n        </div>\n        <div class=\"field\" *ngIf=\"item.capacity\">\n            <label i18n=\"@@capacityLabel\">Capacity:</label>\n            <div class=\"value\">{{item.capacity}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.installed_ui_devices\">\n            <label i18n=\"@@systemPanelCountLabel\">Installed Touch Panels:</label>\n            <div class=\"value\">{{item.installed_ui_devices}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.created_at\">\n            <label i18n=\"@@systemCreatedAtLabel\">Created:</label>\n            <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.updated_at\">\n            <label i18n=\"@systemUpdatedAtLabel\">Updated:</label>\n            <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n        </div>\n    </section>\n    <hr />\n    <header class=\"settings\" i18n=\"@@settingsLabel\">Settings</header>\n    <section *ngIf=\"!loading_settings; else load_state\">\n        <a-settings-form [id]=\"item.id\" [merge]=\"true\" [settings]=\"item.settings\" [merge_settings]=\"other_settings || []\"></a-settings-form>\n    </section>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@systemLoadingLabel\">Loading system settings...</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, SimpleChanges, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineSettings, EncryptionLevel } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'system-about',\n    templateUrl: './system-about.template.html',\n    styleUrls: ['./system-about.styles.scss']\n})\nexport class SystemAboutComponent extends BaseDirective implements OnChanges, OnInit {\n    /** System to render */\n    @Input() public item: EngineSystem;\n    /** List of zones for the active system */\n    public zones: EngineZone[];\n    /** List of settings for associated modules, drivers and zones */\n    public other_settings: EngineSettings[] = [];\n\n    /** List of module ids associated with the system */\n    public modules(): string[] {\n        return [...this.item.modules];\n    }\n\n    /** Whether application is loading settings for item */\n    public get loading_settings(): boolean {\n        return this._service.get('loading_settings');\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadZones();\n                this.loadSettings();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.item && this.item) {\n            this.loadZones();\n            this.loadSettings();\n        }\n    }\n\n    /**\n     * Open confirmation modal for starting the active system\n     */\n    public start() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Start system?',\n                    content: `Are you sure you want to start this system?<br>All stopped modules within the system will boot up.`,\n                    icon: { type: 'icon', class: 'backoffice-controller-play' }\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this._service.Systems.startSystem(this.item.id).then(\n                        result => null,\n                        err =>\n                            this._service.notifyError(\n                                `Failed to start system: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                    );\n                }\n            })\n        );\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public stop() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Stop system?',\n                    content: `Are you sure you want to stop this system?<br>All modules will be immediately stopped regardless of any other systems they may be in.`,\n                    icon: { type: 'icon', class: 'backoffice-controller-stop' }\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this._service.Systems.stopSystem(this.item.id).then(\n                        result => null,\n                        err =>\n                            this._service.notifyError(\n                                `Failed to stop system: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                    );\n                }\n            })\n        );\n    }\n\n    /**\n     * Load zones associated with the system to allow for merging\n     */\n    public loadZones() {\n        if (!this.item) {\n            return;\n        }\n        this._service.Zones.query({ control_system_id: this.item.id, offset: 0 }).then(\n            list => {\n                list.sort((a, b) => this.item.zones.indexOf(b.id) - this.item.zones.indexOf(a.id));\n                this.zones = list;\n            },\n            () => null\n        );\n    }\n\n    public async loadSettings() {\n        if (!this.item) {\n            return;\n        }\n        this.other_settings = await this._service.Systems.settings(this.item.id);\n    }\n}\n","import { Component, Input, OnChanges, SimpleChange, OnInit } from '@angular/core';\nimport { PlaceOS, EngineSystem, PlaceMetadata } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { validateJSONString } from 'src/app/shared/utilities/validation.utilities';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MetadataDetailsModalComponent } from 'src/app/overlays/metadata-details-modal/metadata-details-modal.component';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'system-metadata',\n    templateUrl: './system-metadata.template.html',\n    styleUrls: ['./system-metadata.styles.scss']\n})\nexport class SystemMetadataComponent extends BaseDirective implements OnChanges, OnInit {\n    @Input() public item: EngineSystem;\n    /** List of metadata associated with the zone */\n    public metadata: PlaceMetadata[] = [];\n    /** Map of form field groups to metadata fields */\n    public form_map: HashMap<FormGroup> = {};\n    /** Map of metadata fields to whether they have been edited */\n    public edited: HashMap<boolean> = {};\n    /** Map of metadata properties to whether they are saving */\n    public loading: HashMap<boolean> = {};\n\n    private validateName(name_list: string[]) {\n        return (control: AbstractControl) => {\n            return name_list.indexOf(control.value) >= 0 ? { name: true } : null;\n        };\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.ngOnChanges({ item: new SimpleChange(null, this.item, false) });\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item && this.item) {\n            this.loadMetadata();\n        }\n    }\n\n    public newMetadata() {\n        this.metadata.push({\n            name: `new_field_${Math.floor(Math.random() * 999_999_999)}`,\n            description: '',\n            new: true,\n            details: {}\n        } as any);\n        this.generateForms();\n    }\n\n    public editMetadataDetails(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        this._dialog.open(MetadataDetailsModalComponent, {\n            maxWidth: '95vw',\n            data: {\n                form\n            }\n        });\n    }\n\n    /**\n     * Delete the given metadata field\n     * @param field Name of the field to remove\n     */\n    public deleteMetadata(field: string) {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: `Kill process`,\n                content: `\n                    <p>Are you sure you want delete the metadata property \"${field}\"?</p>\n                `,\n                icon: { type: 'icon', class: 'backoffice-trash' }\n            }\n        });\n        this.subscription(\n            'confirm',\n            ref.componentInstance.event.subscribe(event => {\n                if (event.reason === 'done') {\n                    PlaceOS.metadata.delete(this.item.id, { name: field }).then(\n                        () => {\n                            this._service.notifySuccess(\n                                `Successfully removed \"${field}\" metadata.`\n                            );\n                            this.metadata = this.metadata.filter(prop => prop.name !== field);\n                            this.generateForms();\n                        },\n                        err =>\n                            this._service.notifyError(\n                                `Error removing old \"${field}\" metadata. Error: ${err.response || err.message ||\n                                    err}`\n                            )\n                    );\n                }\n                ref.close();\n            })\n        );\n    }\n\n    public saveMetadata(field: PlaceMetadata) {\n        const form = this.form_map[field.name];\n        form.markAllAsTouched();\n        if (form.valid) {\n            const value = form.value;\n            this.loading[field.name] = true;\n            PlaceOS.metadata.update(this.item.id, {\n                ...value,\n                details: JSON.parse(value.details)\n            }).then(\n                (item: PlaceMetadata) => {\n                    this.loading[field.name] = false;\n                    const index = this.metadata.findIndex(i => i.name === field.name);\n                    this.edited[field.name] = false;\n                    if (field.name !== item.name) {\n                        PlaceOS.metadata.delete(this.item.id, field).catch(err =>\n                            this._service.notifyError(\n                                `Error removing old \"${\n                                    field.name\n                                }\" metadata. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                        );\n                    }\n                    if (index >= 0) {\n                        this.metadata.splice(index, 1, { ...item, new: false } as any);\n                    }\n                    this._service.notifySuccess(`Saved \"${value.name}\" metadata.`);\n                    this.generateForms();\n                },\n                err => {\n                    this.loading[field.name] = false;\n                    this._service.notifyError(\n                        `Error saving \"${value.name}\" metadata. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        } else {\n            this._service.notifyError(`JSON for property \"${form.controls.name.value}\" is invalid`);\n        }\n    }\n\n    private generateForms() {\n        delete this.form_map;\n        this.form_map = {};\n        this.metadata.forEach(group => {\n            this.form_map[group.name] = new FormGroup({\n                name: new FormControl(group.name, [\n                    Validators.required,\n                    this.validateName(\n                        this.metadata.filter(i => i.name !== group.name).map(i => i.name)\n                    )\n                ]),\n                description: new FormControl(group.name),\n                details: new FormControl(JSON.stringify(group.details || {}, undefined, 4), [\n                    Validators.required,\n                    validateJSONString\n                ])\n            });\n            this.subscription(\n                `${group.name}_name`,\n                this.form_map[group.name].controls.name.valueChanges.subscribe(\n                    () => (this.edited[group.name] = true)\n                )\n            );\n            this.subscription(\n                `${group.name}_description`,\n                this.form_map[group.name].controls.description.valueChanges.subscribe(\n                    () => (this.edited[group.name] = true)\n                )\n            );\n            this.subscription(\n                `${group.name}_details`,\n                this.form_map[group.name].controls.details.valueChanges.subscribe(\n                    () => (this.edited[group.name] = true)\n                )\n            );\n        });\n    }\n\n    private loadMetadata() {\n        PlaceOS.metadata.show(this.item.id).then(map => {\n            this.metadata = Object.keys(map).map(key => map[key]);\n            this.generateForms();\n        });\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <button mat-button (tapped)=\"newMetadata()\" i18n=\"@@addMetadataAction\">Add new Metadata Field</button>\n    <div class=\"list\" *ngIf=\"metadata && metadata.length > 0; else empty_state\">\n        <mat-accordion>\n            <ng-container *ngFor=\"let item of metadata\">\n                <mat-expansion-panel [class.no-padding]=\"true\" *ngIf=\"form_map[item.name]\" [formGroup]=\"form_map[item.name]\">\n                    <mat-expansion-panel-header>\n                        <mat-panel-title>\n                            <div\n                                class=\"text\"\n                                [matTooltip]=\"form_map[item.name].controls.description.value\"\n                                (click)=\"editMetadataDetails(item); $event.stopPropagation()\"\n                            >\n                                {{ form_map[item.name].controls.name.value }}\n                                <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n                            </div>\n                            <ng-container *ngIf=\"edited[item.name]\">\n                                <button\n                                    mat-button\n                                    *ngIf=\"!loading[item.name]; else load_state\"\n                                    (click)=\"$event.stopPropagation()\"\n                                    (tapped)=\"saveMetadata(item)\"\n                                    i18n=\"@@saveAction\"\n                                >\n                                    Save\n                                </button>\n                            </ng-container>\n                            <div class=\"contents\" *ngIf=\"!item.new\">\n                                <button mat-icon-button (tapped)=\"deleteMetadata(item.name)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n                                </button>\n                            </div>\n                        </mat-panel-title>\n                    </mat-expansion-panel-header>\n                    <div class=\"settings\">\n                        <settings-form-field\n                            formControlName=\"details\"\n                            lang=\"json\"\n                            [readonly]=\"false\"\n                        ></settings-form-field>\n                    </div>\n                </mat-expansion-panel>\n            </ng-container>\n        </mat-accordion>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@zoneMetadataEmpty\">No zone metadata found</div>\n    </div>\n</ng-template>\n<ng-template #load_state>\n    <mat-spinner diameter=\"32\"></mat-spinner>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineModule, EngineDriverRole, HashMap } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationActionLink } from 'src/app/shared/utilities/settings.interfaces';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ViewModuleStateModalComponent,\n    ModuleStateModalData,\n} from 'src/app/overlays/view-module-state/view-module-state.component';\nimport { EngineDebugService } from 'src/app/services/debug.service';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport { ViewResponseModalComponent } from 'src/app/overlays/view-response-modal/view-response-modal.component';\n\n@Component({\n    selector: 'system-modules',\n    templateUrl: './system-modules.template.html',\n    styleUrls: ['./system-modules.styles.scss'],\n})\nexport class SystemModulesComponent extends BaseDirective implements OnInit, OnChanges {\n    /** System to grab the devices for */\n    @Input() public item: EngineSystem;\n    /** List of modules associated with the system */\n    public devices: EngineModule[];\n    /** Mapping of devices to the module bindings */\n    public device_classes: HashMap<string> = {};\n    /** Whether a device should be listened to */\n    public device_listener: HashMap<boolean> = {};\n    /** Store for ID of new module to add to system */\n    public new_module: string;\n    /** Whether to show exec block */\n    public hide_exec: boolean;\n    /** Whether to refresh the list of active modules in the exec options */\n    public refresh_modules: boolean;\n    /** Actions available for the context menu */\n    public menu_options: ApplicationActionLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        { id: 'state', name: 'View State', icon: { type: 'icon', class: 'backoffice-eye' } },\n        { id: 'reload', name: 'Recompile Driver', icon: { type: 'icon', class: 'backoffice-cw' } },\n        { id: 'remove', name: 'Remove Module', icon: { type: 'icon', class: 'backoffice-trash' } },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n\n    public offline_options: ApplicationActionLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        { id: 'remove', name: 'Remove Module', icon: { type: 'icon', class: 'backoffice-trash' } },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n    /** Function for excluding modules already within this system */\n    public readonly exclude_fn = (item: EngineModule) =>\n        item.control_system_id === this.item.id || item.role === EngineDriverRole.Logic;\n\n    /** Service for interacting with modules */\n    public get module_service() {\n        return this._service.Modules;\n    }\n\n    /** Map of modules to whether they are listening for debug messages */\n    public get debugged_modules(): HashMap<boolean> {\n        return this.devices.reduce((map, device) => {\n            map[device.id] = this._debug_service.isListening(device);\n            return map;\n        }, {});\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _debug_service: EngineDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe((item) => {\n                this.item = item;\n                this.loadModules();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadModules();\n        }\n    }\n\n    /**\n     * Load the modules for the active system\n     * @param offset Offset to load\n     */\n    public loadModules(offset: number = 0) {\n        if (!this.item) {\n            return;\n        }\n        this._service.Modules.query({\n            control_system_id: this.item.id,\n            complete: true,\n            offset,\n        } as any).then(\n            (list) => {\n                list.sort(\n                    (a, b) => this.item.modules.indexOf(a.id) - this.item.modules.indexOf(b.id)\n                );\n                this.devices = list;\n                this.generateModuleBindings();\n            },\n            () => null\n        );\n    }\n\n    /**\n     * Handle context menu event\n     * @param event Event posted by the context menu\n     * @param device Module associated with the context menu event\n     */\n    public handleContextEvent(event: ApplicationActionLink, device: EngineModule) {\n        if (event) {\n            switch (event.id) {\n                case 'power':\n                    this.power(device);\n                    break;\n                case 'state':\n                    this.viewState(device);\n                    break;\n                case 'reload':\n                    this.reloadModule(device);\n                    break;\n                case 'remove':\n                    this.remove(device);\n                    break;\n                case 'load':\n                    this.loadModule(device);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Toggle the power state\n     * @param device Module to toggle the power state\n     */\n    public power(device: EngineModule) {\n        this.hide_exec = true;\n        if (device.running) {\n            device.stop().then(\n                () => {\n                    this.hide_exec = false;\n                    this._service.notifySuccess('Module successfully stopped');\n                    (device as any).running = false;\n                    this.refresh_modules = !this.refresh_modules;\n                },\n                (err) => {\n                    this.hide_exec = false;\n                    if (typeof err === 'string' && err.length < 64) {\n                        this._service.notifyError(err);\n                    } else {\n                        this._service.notifyError(\n                            `Failed to stop module '${device.id}'.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err)\n                        );\n                    }\n                }\n            );\n        } else {\n            device.start().then(\n                () => {\n                    this.hide_exec = false;\n                    this._service.notifySuccess('Module successfully started');\n                    (device as any).running = true;\n                    this.refresh_modules = !this.refresh_modules;\n                },\n                (err) => {\n                    this.hide_exec = false;\n                    if (typeof err === 'string' && err.length < 64) {\n                        this._service.notifyError(err);\n                    } else {\n                        this._service.notifyError(\n                            `Failed to start module '${device.id}'.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err)\n                        );\n                    }\n                }\n            );\n        }\n    }\n\n    /**\n     * Update the state of the module\n     * @param device Module to reload\n     */\n    public reload(device: EngineModule) {\n        this._service.Modules.show(device.id).then(\n            (item) => {\n                for (const k in item) {\n                    if (item.hasOwnProperty(k)) {\n                        device[k] = item[k];\n                    }\n                }\n            },\n            () => null\n        );\n    }\n\n    public viewState(device: EngineModule) {\n        this._dialog.open<ViewModuleStateModalComponent, ModuleStateModalData>(\n            ViewModuleStateModalComponent,\n            { data: { system: this.item, module: device, devices: this.devices } }\n        );\n    }\n\n    public reloadModule(device: EngineModule) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Recompile module?',\n                    content: `New driver code will be loaded and the device settings will be reloaded.`,\n                    icon: { type: 'icon', class: 'backoffice-install' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    (device.driver\n                        ? device.driver.recompile()\n                        : this._service.Drivers.recompile(device.driver_id)\n                    ).then(\n                        (_) => this._service.notifySuccess('Driver successfully recompiled.'),\n                        (err) => this._service.notifyError(JSON.stringify(err.response || err.message || err))\n                    );\n                    ref.close();\n                    this.unsub('confirm_ref');\n                }\n            })\n        );\n    }\n\n    public loadModule(device: EngineModule) {\n        this._service.Modules.load(device.id).then(\n            () =>\n                this._service.notifySuccess(\n                    `Successfully loaded module \"${device.name || device.id}\"`\n                ),\n            (err) => this._service.notifyError(`Error loading module. Error: ${JSON.stringify(err.response || err.message || err)}`)\n        );\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { content },\n        });\n    }\n\n    /**\n     * Handle drop event for reordering the devices\n     * @param event Drag drop details\n     */\n    public drop(event: CdkDragDrop<any[]>) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Change order?',\n                        content: `Are you sure you want to change the module priority?<br>Settings will be updated immediately for the system.`,\n                        icon: { type: 'icon', class: 'backoffice-layers' },\n                    },\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        this.hide_exec = true;\n                        ref.componentInstance.loading = 'Updating module order...';\n                        const list: string[] = [...this.item.modules];\n                        moveItemInArray(list, event.previousIndex, event.currentIndex);\n                        this.item.storePendingChange('modules', list);\n                        this.item.save().then(\n                            () => {\n                                this.hide_exec = false;\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            (err) => {\n                                this.hide_exec = false;\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error reording modules. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public remove(device: EngineModule) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Remove module?',\n                    content: `Remove ${device.driver_id} from this system?<br>If this is not used elsewhere the associated data will be removed immediately.`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.hide_exec = true;\n                    this.item.removeModule(device.id).then(\n                        () => {\n                            this.hide_exec = false;\n                            this._service.notifySuccess('Succefully removed module.');\n                            this.devices.splice(this.devices.indexOf(device), 1);\n                            ref.close();\n                            this.unsub('confirm_ref');\n                        },\n                        (err) => {\n                            this.hide_exec = false;\n                            this._service.notifyError(\n                                `Error removing module. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            ref.close();\n                            this.unsub('confirm_ref');\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public newModule() {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new EngineModule({\n                    control_system_id: this.item.id,\n                    control_system: this.item,\n                }),\n                service: this._service.Modules,\n                readonly: true,\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.hide_exec = true;\n                    this._service.Systems.addModule(this.item.id, event.metadata.item.id).then(\n                        () => {\n                            this.hide_exec = false;\n                            this.item = new EngineSystem({\n                                ...this.item,\n                                modules: this.item.modules.concat(event.metadata.item.id),\n                                version: (this.item as any)._version++,\n                            });\n                            this._service.set('BACKOFFICE.active_item', this.item);\n                            this.timeout('reload_module_list', () => this.loadModules(), 1000);\n                        },\n                        (err) => {\n                            this.hide_exec = false;\n                        }\n                    );\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n        });\n    }\n\n    public addModule() {\n        if (this.new_module) {\n            this.joinModule(this.new_module);\n            this.new_module = '';\n        }\n    }\n\n    public joinModule(id: string) {\n        const mod_list = [...this.item.modules];\n        if (mod_list.indexOf(id) < 0) {\n            mod_list.push(id);\n        }\n        this.hide_exec = true;\n        this.item.storePendingChange('modules', mod_list);\n        this._service.Systems.addModule(this.item.id, id).then(\n            () => {\n                this.hide_exec = false;\n                this.item = new EngineSystem({\n                    ...this.item,\n                    modules: this.item.modules.concat(id),\n                    version: (this.item as any)._version++,\n                });\n                this._service.notifySuccess('Successfully added device to system');\n                this.loadModules();\n            },\n            () => {\n                this.hide_exec = false;\n                this._service.notifyError('Failed to add module to system');\n            }\n        );\n    }\n\n    /**\n     * Toggle debug events for a device\n     * @param device Module to listen to debug events for\n     */\n    public toggleDebugEvents(device: EngineModule) {\n        if (!device) {\n            return;\n        }\n        if (this._debug_service.isListening(device)) {\n            this._debug_service.unbind(device);\n        } else {\n            this._debug_service.bind(device, this.device_classes[device.id]);\n        }\n    }\n\n    /**\n     * Generate the binding modules for each device\n     */\n    private generateModuleBindings() {\n        const counter: HashMap<number> = {};\n        for (const device of this.devices) {\n            const name = device.custom_name || device.name || 'Blank';\n            if (!counter[name]) {\n                counter[name] = 0;\n            }\n            this.device_classes[device.id] = `${name}_${++counter[name]}`;\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section class=\"select\">\n        <div class=\"dropdown\">\n            <item-search-field\n                [service]=\"module_service\"\n                [exclude]=\"exclude_fn\"\n                [ngModel]=\"null\"\n                (ngModelChange)=\"new_module = $event.id\"\n            ></item-search-field>\n        </div>\n        <button mat-button [disabled]=\"!new_module\" (tapped)=\"addModule()\"  i18n=\"@@addExistingAction\">\n            Add existing\n        </button>\n        <button mat-button (tapped)=\"newModule()\" i18n=\"@@newAction\">Add new</button>\n    </section>\n    <ng-container *ngIf=\"item.id && item.modules && !hide_exec\">\n        <section class=\"exec\">\n            <h3 i18n=\"@@execHeader\">Execute command</h3>\n            <system-exec-field [system]=\"item\" [refresh]=\"refresh_modules\"></system-exec-field>\n        </section>\n    </ng-container>\n    <section class=\"device-list\">\n        <h3 i18n=\"@@moduleListHeader\">Module List</h3>\n        <table *ngIf=\"devices && devices.length > 0\">\n            <thead>\n                <td class=\"small\"></td>\n                <td class=\"small\" i18n=\"@@moduleStateLabel\">State</td>\n                <td class=\"name\" i18n=\"@@moduleNameLabel\">Name</td>\n                <td class=\"module\" i18n=\"@@moduleClassLabel\">Class</td>\n                <td class=\"ip\" i18n=\"@@moduleIpLabel\">IP</td>\n                <td class=\"small\"></td>\n            </thead>\n            <tbody cdkDropList (cdkDropListDropped)=\"drop($event)\">\n                <tr\n                    *ngFor=\"let device of (devices || [])\"\n                    [context-menu]=\"menu\"\n                    [offset_y]=\"-64\"\n                    (contextAction)=\"handleContextEvent($event, device)\"\n                    cdkDrag\n                >\n                    <td class=\"small\">\n                        <div class=\"action grab\" cdkDragHandle>\n                            <i class=\"backoffice-select-arrows\"></i>\n                        </div>\n                    </td>\n                    <td class=\"small\">\n                        <i\n                            *ngIf=\"device && item.id\"\n                            binding\n                            [(model)]=\"device.connected\"\n                            (modelChange)=\"refresh_modules = !refresh_modules\"\n                            [sys]=\"item.id\"\n                            [mod]=\"device_classes[device.id]\"\n                            bind=\"connected\"\n                        ></i>\n                        <div\n                            class=\"state\"\n                            [class.active]=\"device.running && !!device.connected\"\n                            [class.inactive]=\"device.running && !device.connected\"\n                            [class.black]=\"!device.running\"\n                            (tapped)=\"power(device)\"\n                        ></div>\n                    </td>\n                    <td class=\"name\">\n                        <a (contextmenu)=\"$event.stopPropagation()\"\n                            [routerLink]=\"['/modules', device.id]\"\n                            routerLinkActive=\"router-link-active\" [matTooltip]=\"device.id\"\n                            >{{device.driver?.name || \"&lt;Unnamed&gt;\" }}</a\n                        >\n                    </td>\n                    <td class=\"module\">\n                        <mat-checkbox\n                            [checked]=\"debugged_modules[device.id]\"\n                            (change)=\"toggleDebugEvents(device)\"\n                        >\n                            {{ device_classes[device.id] }}\n                        </mat-checkbox>\n                    </td>\n                    <td class=\"ip\">\n                        <div class=\"lock\">\n                            <i class=\"backoffice-lock\" *ngIf=\"device.tls\"></i>\n                        </div>\n                        <a [href]=\"(device.tls ? 'https://' : 'http://') + device.ip\"\n                            >{{device.ip}}</a\n                        >\n                    </td>\n                    <td class=\"small\" touchrelease>\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-dots-three-vertical' }\"\n                            ></app-icon>\n                        </button>\n                        <mat-menu #menu=\"matMenu\">\n                            <button\n                                mat-menu-item\n                                *ngFor=\"let item of (device.running ? menu_options : offline_options)\"\n                                (tapped)=\"handleContextEvent(item, device)\"\n                            >\n                                <app-icon [icon]=\"item.icon\"></app-icon>\n                                <div class=\"text\">{{ item.name }}</div>\n                            </button>\n                        </mat-menu>\n                    </td>\n                    <td class=\"placeholder\" colspan=\"6\" *cdkDragPlaceholder></td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"info-block\" *ngIf=\"!devices || devices.length <= 0\">\n            <div class=\"text\" i18n=\"@@moduleListEmpty\">No devices for system</div>\n        </div>\n    </section>\n</div>\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <div class=\"dropdown\">\n                <button mat-button (tapped)=\"selectTriggerToAdd()\" i18n=\"@@addTriggerAction\">\n                    Add trigger\n                </button>\n            </div>\n            <mat-form-field appearance=\"outline\">\n                <div class=\"prefix\" matPrefix>\n                    <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n                </div>\n                <input\n                    matInput\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"filter($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Triggers\"\n                />\n            </mat-form-field>\n        </section>\n        <section class=\"list\">\n            <table *ngIf=\"filtered_triggers.length > 0; else empty_state\">\n                <thead>\n                    <td class=\"small\"></td>\n                    <td class=\"flex\" i18n=\"@@triggerTableName\">Name</td>\n                    <td class=\"count\" i18n=\"@@triggerTableCount\">Count</td>\n                    <td class=\"count\" i18n=\"@@triggerTableErrors\">Errors</td>\n                    <td class=\"added\" i18n=\"@@triggerTableAddedTime\">Added</td>\n                    <td class=\"duo\"></td>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let trigger of filtered_triggers\">\n                        <i\n                            hidden\n                            binding\n                            [sys]=\"item.id\"\n                            mod=\"_TRIGGER__1\"\n                            [bind]=\"trigger.id\"\n                            [(model)]=\"trigger_state[trigger.id]\"\n                            (modelChange)=\"updateComparisons(trigger.id)\"\n                        ></i>\n                        <td class=\"small\" [matTooltip]=\"comparisons[trigger.id]\">\n                            <div\n                                class=\"state\"\n                                [class.active]=\"trigger_state[trigger.id]?.triggered\"\n                            ></div>\n                        </td>\n                        <td class=\"flex\">\n                            <a [routerLink]=\"['/triggers', trigger.id]\" [matTooltip]=\"trigger.id\"\n                                >{{trigger.name}}</a\n                            >\n                        </td>\n                        <td class=\"count\">{{ trigger_state[trigger.id]?.trigger_count || '0' }}</td>\n                        <td class=\"count\" [matTooltip]=\"'Action Errors: ' + trigger_state[trigger.id]?.action_errors + '\\nComparision Errors: ' + trigger_state[trigger.id]?.comparison_errors\"\n                            >\n                                {{ (trigger_state[trigger.id]?.action_errors +\n                                trigger_state[trigger.id]?.comparison_errors) || '0' }}\n                        </td>\n                        <td class=\"added\">{{ (+trigger.created_at * 1000) | dateFrom }}</td>\n                        <td class=\"duo\">\n                            <div class=\"actions\">\n                                <button mat-icon-button *ngIf=\"trigger.enable_webhook\" (tapped)=\"copyWebhookURL(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-link' }\"></app-icon>\n                                </button>\n                                <button mat-icon-button (tapped)=\"editTrigger(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n                                </button>\n                                <button mat-icon-button (tapped)=\"deleteTrigger(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n                                </button>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerTableEmpty\">\n            {{ search_str ? 'No matching triggers' : 'No triggers for system' }}\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineSystem, EngineTrigger } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData,\n} from 'src/app/overlays/select-item-modal/select-item-modal.component';\nimport { DialogEvent, HashMap } from 'src/app/shared/utilities/types.utilities';\nimport {\n    CONFIRM_METADATA,\n    ConfirmModalComponent,\n    ConfirmModalData,\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport { copyToClipboard } from 'src/app/shared/utilities/general.utilities';\n\nexport interface TriggerInstanceState {\n    triggered: boolean;\n    trigger_count: number;\n    action_errors: number;\n    comparison_errors: number;\n    conditions: HashMap<boolean>;\n}\n\n@Component({\n    selector: 'system-triggers',\n    templateUrl: './system-triggers.template.html',\n    styleUrls: ['./system-triggers.styles.scss'],\n})\nexport class SystemTriggersComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active System */\n    @Input() public item: EngineSystem;\n    /** List of triggers associated with the active system */\n    public trigger_list: EngineTrigger[] = [];\n    /** List of triggers associated with the active system */\n    public filtered_triggers: EngineTrigger[] = [];\n    /** Filter string for listing of triggers */\n    public search_str: string;\n    /** Mapping of trigger instances to their current state */\n    public trigger_state: HashMap<TriggerInstanceState> = {};\n    /** Mapping of trigger instances to their condition state list */\n    public comparisons: HashMap<string> = {};\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _composer: ComposerService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe((item) => {\n                this.item = item;\n                this.loadSystemTriggers();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any): void {\n        if (changes.item) {\n            this.loadSystemTriggers();\n        }\n    }\n\n    public loadSystemTriggers(offset: number = 0): void {\n        if (!this.item) {\n            return;\n        }\n        this._service.Systems.listTriggers(this.item.id).then(\n            (list) => {\n                this.trigger_list = list;\n                this.filter(this.search_str);\n            },\n            () => null\n        );\n    }\n\n    public filter(search: string = ''): void {\n        const s = search.toLowerCase();\n        this.filtered_triggers = this.trigger_list.filter((item) =>\n            item.name.toLowerCase().includes(s)\n        );\n    }\n\n    public updateComparisons(id: string): void {\n        this.comparisons[id] = '';\n        if (this.trigger_state[id]) {\n            for (const key in this.trigger_state[id].conditions) {\n                if (this.trigger_state[id].conditions.hasOwnProperty(key)) {\n                    if (this.comparisons[id]) {\n                        this.comparisons[id] += '\\n';\n                    }\n                    this.comparisons[id] += `${key}: ${this.trigger_state[id].conditions[key]}`;\n                }\n            }\n        }\n    }\n\n    /** Copy the generated webhook URL for the given trigger */\n    public copyWebhookURL(trigger: EngineTrigger) {\n        copyToClipboard(\n            `${location.origin}/api/engine/v2/webhook/${trigger.id}/notify?secret=${trigger.webhook_secret}`\n        );\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public editTrigger(trigger: EngineTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: trigger,\n                    service: this._service.Triggers,\n                    external_save: true,\n                },\n            });\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'action') {\n                        ref.componentInstance.loading = 'Saving trigger settings...';\n                        const url = `${this._composer.auth.api_endpoint}/systems/${this.item.id}/triggers/${trigger.id}`;\n                        this._composer.http.put(url, trigger.toJSON(true)).subscribe(\n                            () => null,\n                            (err) => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error updating trigger settings. Error: ${JSON.stringify(\n                                        err.response || err.message || err\n                                    )}`\n                                );\n                            },\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully updated trigger settings.`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Remove a trigger from the active system\n     * @param trigger Trigger to remove\n     */\n    public deleteTrigger(trigger: EngineTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Remove trigger`,\n                        content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' },\n                    },\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Removing trigger...';\n                        const url = `${this._composer.auth.api_endpoint}/systems/${this.item.id}/triggers/${trigger.id}`;\n                        this._composer.http.delete(url).subscribe(\n                            () => null,\n                            (err) => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error removing trigger. Error: ${JSON.stringify(\n                                        err.response || err.message || err\n                                    )}`\n                                );\n                                this.trigger_list.splice(\n                                    this.trigger_list.findIndex((item) => this.item.id === item.id),\n                                    1\n                                );\n                                this.filter(this.search_str);\n                            },\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted trigger \"${this.item.name}\".`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Open modal to select a trigger to add\n     */\n    public selectTriggerToAdd(): void {\n        const ref = this._dialog.open<SelectItemModalComponent, SelectItemModalData>(\n            SelectItemModalComponent,\n            {\n                height: 'auto',\n                width: 'auto',\n                data: {\n                    service_name: 'Triggers',\n                },\n            }\n        );\n        this.subscription(\n            'dialog_events',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                const item = ref.componentInstance.item;\n                if (event.reason === 'action' && item) {\n                    this.addTrigger(item);\n                    ref.close();\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('dialog_events'));\n    }\n\n    /**\n     * Add the selected trigger to the active system\n     * @param trigger Trigger to add to system\n     */\n    private async addTrigger(trigger: EngineTrigger): Promise<void> {\n        const item = await this._service.Systems.addTrigger(this.item.id, {\n            control_system_id: this.item.id,\n            enabled: true,\n            important: false,\n            trigger_id: trigger.id,\n        });\n        this.trigger_list.push(item);\n        this.filter(this.search_str);\n    }\n}\n","import { Component, Input, OnChanges, OnInit, Output, EventEmitter } from '@angular/core';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineZonesService } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'system-zones',\n    templateUrl: './system-zones.template.html',\n    styleUrls: ['./system-zones.styles.scss']\n})\nexport class SystemZonesComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active item */\n    @Input() public item: EngineSystem;\n    /** Emitter for changes to the loading state of the item */\n    @Output() public loading = new EventEmitter<boolean | string>();\n    /** List of zones assoicated with the active item */\n    public zones: EngineZone[];\n    /** ID of a zone that the user wishes to add to the system */\n    public new_zone: EngineZone;\n\n    public readonly exclude_fn = (zone: EngineZone) => this.item.zones.indexOf(zone.id) >= 0\n\n    /** Service for managing zone data */\n    public get zone_service(): EngineZonesService {\n        return this._service.Zones;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadZones();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadZones();\n        }\n    }\n\n    /**\n     * Load zone data for the active item\n     * @param offset Page offset for the service request\n     */\n    public loadZones(offset: number = 0) {\n        if (!this.item) { return; }\n        this._service.Systems.listZones(this.item.id).then(\n            list => {\n                list.sort((a, b) => this.item.zones.indexOf(a.id) - this.item.zones.indexOf(b.id));\n                this.zones = list;\n            },\n            () => null\n        );\n    }\n\n    public drop(event) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Change order?',\n                        content: `Are you sure you want to change the zone priority?<br>Settings will be updated immediately for the system.`,\n                        icon: { type: 'icon', class: 'backoffice-cycle' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        const list: string[] = [...this.item.zones];\n                        moveItemInArray(list, event.previousIndex, event.currentIndex);\n                        ref.componentInstance.loading = 'Updating zone ordering...';\n                        this.item.storePendingChange('zones', list);\n                        this.item.save().then(\n                            () => {\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error reording zones. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public removeZone(zone: EngineZone) {\n        if (zone && zone.id) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Remove zone?',\n                        content: `<p>Are you sure you want remove zone \"${zone.name}\" from the system?</p>Configuration will be updated immediately.`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        this.loading.emit(true);\n                        this.item.storePendingChange('zones', this.item.zones.filter(id => id !== zone.id));\n                        this.item.save().then(\n                            (item: any) => {\n                                this.loading.emit(false);\n                                this.item = item;\n                                this._service.notifySuccess(\n                                    `Remove zone \"${zone.name}\" from system`\n                                );\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            err => {\n                                this.loading.emit(false);\n                                this._service.notifySuccess(\n                                    `Error removing \"${zone.name}\" from system. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public joinZone() {\n        if (this.new_zone) {\n            if (this.item.zones.indexOf(this.new_zone.id) < 0) {\n                this.loading.emit(true);\n                const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                    ConfirmModalComponent,\n                    {\n                        ...CONFIRM_METADATA,\n                        data: {\n                            title: 'Add zone',\n                            content: `Add zone \"${this.new_zone.name}\" to system \"${this.item.name}\"`,\n                            icon: { type: 'icon', class: 'backoffice-upload-to-cloud' }\n                        }\n                    }\n                );\n                this.subscription(\n                    'confirm_ref',\n                    ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                        if (e.reason === 'done') {\n                            ref.componentInstance.loading = 'Adding zone to system...';\n                            this.item.storePendingChange('zones', unique([...this.item.zones, this.new_zone.id]));\n                            this.item.save().then(\n                                (item: any) => {\n                                    this.loading.emit(false);\n                                    this._service.notifySuccess(\n                                        `Added zone \"${this.new_zone.name}\" to system`\n                                    );\n                                    this.item = item;\n                                    this.loadZones();\n                                    ref.close();\n                                    this.unsub('confirm_ref');\n                                    this.new_zone = null;\n                                },\n                                (err) => {\n                                    ref.componentInstance.loading = null;\n                                    this.loading.emit(false);\n                                    this._service.notifyError(\n                                        `Error adding zone \"${this.new_zone.name}\". Error: ${JSON.stringify(err.response || err.message || err)}`\n                                    );\n                                }\n                            );\n                        } else {\n                            this.loading.emit(false);\n                        }\n                    })\n                );\n            } else {\n                this._service.notifyInfo('The selected zone is already linked to this system');\n            }\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <div class=\"dropdown\">\n                <item-search-field\n                    [service]=\"zone_service\"\n                    [exclude]=\"exclude_fn\"\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"new_zone = $event\"\n                ></item-search-field>\n            </div>\n            <button mat-button [disabled]=\"!new_zone\" (tapped)=\"joinZone()\">Join zone</button>\n        </section>\n        <section>\n            <table *ngIf=\"zones && zones.length > 0\">\n                <thead>\n                    <td class=\"small\"></td>\n                    <td class=\"name\" i18n=\"@@zoneTableEmpty\">Name</td>\n                    <td class=\"description\" i18n=\"@@descriptionLabel\">Description</td>\n                    <td *ngIf=\"zones.length > 1\" class=\"small\"></td>\n                </thead>\n                <tbody cdkDropList (cdkDropListDropped)=\"drop($event)\">\n                    <tr *ngFor=\"let zone of zones\" cdkDrag>\n                        <td class=\"small\">\n                            <div class=\"action grab\" cdkDragHandle>\n                                <i class=\"backoffice-select-arrows\"></i>\n                            </div>\n                        </td>\n                        <td class=\"name\">\n                            <a\n                                [routerLink]=\"['/zones', zone.id]\"\n                                routerLinkActive=\"router-link-active\"\n                                [matTooltip]=\"zone.id\"\n                                >{{zone.name}}</a\n                            >\n                        </td>\n                        <td class=\"description\">{{zone.description}}</td>\n                        <td *ngIf=\"zones.length > 1\" class=\"small\">\n                            <button mat-icon-button (tapped)=\"removeZone(zone)\">\n                                <i class=\"backoffice-trash\"></i>\n                            </button>\n                        </td>\n                        <td class=\"placeholder\" colspan=\"6\" *cdkDragPlaceholder></td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"info-block\" *ngIf=\"!zones || zones.length <= 0\">\n                <div class=\"text\" i18n=\"@@zoneTableEmpty\">No zones for system</div>\n            </div>\n        </section>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PlaceOS, EngineSystem } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'app-systems',\n    templateUrl: './systems.template.html',\n    styleUrls: ['./systems.styles.scss']\n})\nexport class SystemsComponent extends BaseRootComponent<EngineSystem> {\n    /** Number of triggers for the active system */\n    public trigger_count: number;\n    /** Number of devices for the active system */\n    public device_count: number;\n    /** Number of zones for the active system */\n    public zone_count: number;\n    /** Number of metadata fields for the active system */\n    public metadata_count: number = 0;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Systems;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Systems';\n    }\n\n    protected async loadValues() {\n        const query: any = { offset: 0, limit: 1, sys_id: this.item.id };\n        // Get trigger count\n        const list = await this._service.Systems.listTriggers(this.item.id);\n        this.trigger_count = list.length || 0;\n        // Get device count\n        this.device_count = (this.item.modules || []).length;\n        // Get zone count\n        this.zone_count = (this.item.zones || []).length;\n        // Get metadata\n        const map = await PlaceOS.metadata.show(this.item.id);\n        this.metadata_count = Object.keys(map).length;\n        console.log('Metadata:', map);\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected newItem(copy: boolean = false) {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: copy ? new EngineSystem({ ...this.item, id: '', name: `${this.item.name} (1)` }) : new EngineSystem(),\n                service: this._service.Systems\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/systems', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected editItem() {\n        console.log('Edit');\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Systems\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete system`,\n                        content: `<p>Are you sure you want delete this system?</p><p>Deleting this will <strong>immediately</strong> delete modules that are not in another system</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting system...';\n                        this.item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted system \"${this.item.name}\".`\n                                );\n                                this._service.set('BACKOFFICE.removed', this.item.id);\n                                this._router.navigate(['/systems']);\n                                this.modal_ref.close();\n                            },\n                            err => {\n                                this.modal_ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting system. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            }\n                        );\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Systems\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"system\"\n            route=\"systems\"\n            [item]=\"item\"\n            [loading]=\"loading_item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                {\n                    id: 'modules',\n                    name: 'Modules',\n                    count: device_count,\n                    icon: { class: 'backoffice-tablet' }\n                },\n                { id: 'zones', name: 'Zones', count: zone_count, icon: { class: 'backoffice-layers' } },\n                {\n                    id: 'triggers',\n                    name: 'Triggers',\n                    count: trigger_count,\n                    icon: { class: 'backoffice-stopwatch' }\n                },\n                {\n                    id: 'metadata',\n                    name: 'Metadata',\n                    count: metadata_count,\n                    icon: { class: 'backoffice-gist' }\n                }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './systems.routes';\n\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about/system-about.component';\nimport { SystemModulesComponent } from './system-modules/system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers/system-triggers.component';\nimport { SystemZonesComponent } from './system-zones/system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata/system-metadata.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n    declarations: [\n        SystemsComponent,\n        SystemAboutComponent,\n        SystemModulesComponent,\n        SystemTriggersComponent,\n        SystemZonesComponent,\n        SystemMetadataComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule\n    ]\n})\nexport class AppSystemsModule { }\n","import { Routes } from '@angular/router';\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about/system-about.component';\nimport { SystemModulesComponent } from './system-modules/system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers/system-triggers.component';\nimport { SystemZonesComponent } from './system-zones/system-zones.component';\nimport { SystemMetadataComponent } from './system-metadata/system-metadata.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: SystemsComponent,\n        children: [\n            { path: 'about', component: SystemAboutComponent },\n            { path: 'modules', component: SystemModulesComponent },\n            { path: 'triggers', component: SystemTriggersComponent },\n            { path: 'zones', component: SystemZonesComponent },\n            { path: 'metadata', component: SystemMetadataComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n"]}