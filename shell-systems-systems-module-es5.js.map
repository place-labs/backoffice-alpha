{"version":3,"sources":["webpack:///src/app/shell/systems/system-about/system-about.template.html","webpack:///src/app/shell/systems/system-about/system-about.component.ts","webpack:///src/app/shell/systems/system-modules/system-modules.component.ts","webpack:///src/app/shell/systems/system-modules/system-modules.template.html","webpack:///src/app/shell/systems/system-triggers/system-triggers.template.html","webpack:///src/app/shell/systems/system-triggers/system-triggers.component.ts","webpack:///src/app/shell/systems/system-zones/system-zones.component.ts","webpack:///src/app/shell/systems/system-zones/system-zones.template.html","webpack:///src/app/shell/systems/systems.component.ts","webpack:///src/app/shell/systems/systems.template.html","webpack:///src/app/shell/systems/systems.module.ts","webpack:///src/app/shell/systems/systems.routes.ts"],"names":["SystemAboutComponent","_service","_dialog","other_settings","item","modules","subscription","listen","subscribe","loadZones","loadSettings","changes","ref","open","data","title","content","icon","type","componentInstance","event","e","reason","Systems","startSystem","id","then","result","err","notifyError","JSON","stringify","response","message","stopSystem","Zones","query","control_system_id","offset","list","sort","a","b","zones","indexOf","settings","get","selector","templateUrl","styleUrls","$event","stopPropagation","SystemModulesComponent","_debug_service","device_classes","device_listener","menu_options","name","offline_options","exclude_fn","role","Logic","loadModules","Modules","complete","devices","generateModuleBindings","device","power","viewState","reloadModule","remove","loadModule","hide_exec","running","stop","notifySuccess","length","viewDetails","start","show","k","hasOwnProperty","system","module","driver","recompile","Drivers","driver_id","_","close","unsub","load","previousIndex","currentIndex","loading","storePendingChange","save","removeModule","splice","height","width","maxHeight","maxWidth","control_system","service","readonly","addModule","metadata","concat","version","_version","set","timeout","afterClosed","new_module","joinModule","mod_list","push","isListening","unbind","bind","counter","custom_name","reduce","map","SystemTriggersComponent","_composer","trigger_list","filtered_triggers","trigger_state","comparisons","loadSystemTriggers","listTriggers","filter","search_str","search","s","toLowerCase","includes","key","conditions","trigger","Triggers","external_save","url","auth","api_endpoint","http","put","toJSON","findIndex","service_name","addTrigger","enabled","important","trigger_id","SystemZonesComponent","zone","listZones","emit","new_zone","notifyInfo","SystemsComponent","_route","_router","limit","sys_id","trigger_count","device_count","zone_count","copy","modal_ref","navigate","console","log","sidebarEvent","itemEvent","AppSystemsModule","forChild","declarations","imports","ROUTES","path","component","children","redirectTo"],"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","file":"shell-systems-systems-module-es5.js","sourcesContent":["<div class=\"container\" *ngIf=\"item\">\n    <section class=\"select\">\n        <button mat-button (tapped)=\"start()\"  i18n=\"@@systemStartAction\">Start System</button>\n        <button mat-button (tapped)=\"stop()\" i18n=\"@@systemStopAction\">Stop System</button>\n    </section>\n    <section class=\"details\">\n        <div class=\"field\" *ngIf=\"item.support_url\">\n            <label i18n=\"@@systemUrlLabel\">Support URL:</label>\n            <div class=\"value\">\n                <a [href]=\"item.support_url\" target=\"_blank\">{{item.support_url}}</a>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.bookable\">\n            <label i18n=\"@@systemBookableLabel\">Bookable Room:</label>\n            <div class=\"value\">{{item.bookable ? 'Yes' : 'No'}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.bookable && item.email\">\n            <label i18n=\"@@emailLabel\">Email:&nbsp;</label>\n            <a *ngIf=\"item.email\" [href]=\"'mailto:' + item.email\" target=\"_blank\">{{item.email}}</a>\n        </div>\n        <div class=\"field\" *ngIf=\"item.capacity\">\n            <label i18n=\"@@capacityLabel\">Capacity:</label>\n            <div class=\"value\">{{item.capacity}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.installed_ui_devices\">\n            <label i18n=\"@@systemPanelCountLabel\">Installed Touch Panels:</label>\n            <div class=\"value\">{{item.installed_ui_devices}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.created_at\">\n            <label i18n=\"@@systemCreatedAtLabel\">Created:</label>\n            <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.updated_at\">\n            <label i18n=\"@systemUpdatedAtLabel\">Updated:</label>\n            <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n        </div>\n    </section>\n    <hr />\n    <header class=\"settings\" i18n=\"@@settingsLabel\">Settings</header>\n    <section *ngIf=\"!loading_settings; else load_state\">\n        <a-settings-form [id]=\"item.id\" [merge]=\"true\" [settings]=\"item.settings\" [merge_settings]=\"other_settings || []\"></a-settings-form>\n    </section>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@systemLoadingLabel\">Loading system settings...</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, SimpleChanges, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineSettings, EncryptionLevel } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'system-about',\n    templateUrl: './system-about.template.html',\n    styleUrls: ['./system-about.styles.scss']\n})\nexport class SystemAboutComponent extends BaseDirective implements OnChanges, OnInit {\n    /** System to render */\n    @Input() public item: EngineSystem;\n    /** List of zones for the active system */\n    public zones: EngineZone[];\n    /** List of settings for associated modules, drivers and zones */\n    public other_settings: EngineSettings[] = [];\n\n    /** List of module ids associated with the system */\n    public modules(): string[] {\n        return [...this.item.modules];\n    }\n\n    /** Whether application is loading settings for item */\n    public get loading_settings(): boolean {\n        return this._service.get('loading_settings');\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadZones();\n                this.loadSettings();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.item && this.item) {\n            this.loadZones();\n            this.loadSettings();\n        }\n    }\n\n    /**\n     * Open confirmation modal for starting the active system\n     */\n    public start() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Start system?',\n                    content: `Are you sure you want to start this system?<br>All stopped modules within the system will boot up.`,\n                    icon: { type: 'icon', class: 'backoffice-controller-play' }\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this._service.Systems.startSystem(this.item.id).then(\n                        result => null,\n                        err =>\n                            this._service.notifyError(\n                                `Failed to start system: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                    );\n                }\n            })\n        );\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public stop() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Stop system?',\n                    content: `Are you sure you want to stop this system?<br>All modules will be immediately stopped regardless of any other systems they may be in.`,\n                    icon: { type: 'icon', class: 'backoffice-controller-stop' }\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this._service.Systems.stopSystem(this.item.id).then(\n                        result => null,\n                        err =>\n                            this._service.notifyError(\n                                `Failed to stop system: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                    );\n                }\n            })\n        );\n    }\n\n    /**\n     * Load zones associated with the system to allow for merging\n     */\n    public loadZones() {\n        if (!this.item) {\n            return;\n        }\n        this._service.Zones.query({ control_system_id: this.item.id, offset: 0 }).then(\n            list => {\n                list.sort((a, b) => this.item.zones.indexOf(b.id) - this.item.zones.indexOf(a.id));\n                this.zones = list;\n            },\n            () => null\n        );\n    }\n\n    public async loadSettings() {\n        if (!this.item) {\n            return;\n        }\n        this.other_settings = await this._service.Systems.settings(this.item.id);\n    }\n}\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineModule, EngineDriverRole, HashMap } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationActionLink } from 'src/app/shared/utilities/settings.interfaces';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ViewModuleStateModalComponent,\n    ModuleStateModalData,\n} from 'src/app/overlays/view-module-state/view-module-state.component';\nimport { EngineDebugService } from 'src/app/services/debug.service';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport { ViewResponseModalComponent } from 'src/app/overlays/view-response-modal/view-response-modal.component';\n\n@Component({\n    selector: 'system-modules',\n    templateUrl: './system-modules.template.html',\n    styleUrls: ['./system-modules.styles.scss'],\n})\nexport class SystemModulesComponent extends BaseDirective implements OnInit, OnChanges {\n    /** System to grab the devices for */\n    @Input() public item: EngineSystem;\n    /** List of modules associated with the system */\n    public devices: EngineModule[];\n    /** Mapping of devices to the module bindings */\n    public device_classes: HashMap<string> = {};\n    /** Whether a device should be listened to */\n    public device_listener: HashMap<boolean> = {};\n    /** Store for ID of new module to add to system */\n    public new_module: string;\n    /** Whether to show exec block */\n    public hide_exec: boolean;\n    /** Actions available for the context menu */\n    public menu_options: ApplicationActionLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        { id: 'state', name: 'View State', icon: { type: 'icon', class: 'backoffice-eye' } },\n        { id: 'reload', name: 'Recompile Driver', icon: { type: 'icon', class: 'backoffice-cw' } },\n        { id: 'remove', name: 'Remove Module', icon: { type: 'icon', class: 'backoffice-trash' } },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n\n    public offline_options: ApplicationActionLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        { id: 'remove', name: 'Remove Module', icon: { type: 'icon', class: 'backoffice-trash' } },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n    /** Function for excluding modules already within this system */\n    public readonly exclude_fn = (item: EngineModule) =>\n        item.control_system_id === this.item.id || item.role === EngineDriverRole.Logic;\n\n    /** Service for interacting with modules */\n    public get module_service() {\n        return this._service.Modules;\n    }\n\n    /** Map of modules to whether they are listening for debug messages */\n    public get debugged_modules(): HashMap<boolean> {\n        return this.devices.reduce((map, device) => {\n            map[device.id] = this._debug_service.isListening(device);\n            return map;\n        }, {});\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _debug_service: EngineDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe((item) => {\n                this.item = item;\n                this.loadModules();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadModules();\n        }\n    }\n\n    /**\n     * Load the modules for the active system\n     * @param offset Offset to load\n     */\n    public loadModules(offset: number = 0) {\n        if (!this.item) {\n            return;\n        }\n        this._service.Modules.query({\n            control_system_id: this.item.id,\n            complete: true,\n            offset,\n        } as any).then(\n            (list) => {\n                list.sort(\n                    (a, b) => this.item.modules.indexOf(a.id) - this.item.modules.indexOf(b.id)\n                );\n                this.devices = list;\n                this.generateModuleBindings();\n            },\n            () => null\n        );\n    }\n\n    /**\n     * Handle context menu event\n     * @param event Event posted by the context menu\n     * @param device Module associated with the context menu event\n     */\n    public handleContextEvent(event: ApplicationActionLink, device: EngineModule) {\n        if (event) {\n            switch (event.id) {\n                case 'power':\n                    this.power(device);\n                    break;\n                case 'state':\n                    this.viewState(device);\n                    break;\n                case 'reload':\n                    this.reloadModule(device);\n                    break;\n                case 'remove':\n                    this.remove(device);\n                    break;\n                case 'load':\n                    this.loadModule(device);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Toggle the power state\n     * @param device Module to toggle the power state\n     */\n    public power(device: EngineModule) {\n        this.hide_exec = true;\n        if (device.running) {\n            device.stop().then(\n                () => {\n                    this.hide_exec = false;\n                    this._service.notifySuccess('Module successfully stopped');\n                    (device as any).running = false;\n                },\n                (err) => {\n                    this.hide_exec = false;\n                    if (typeof err === 'string' && err.length < 64) {\n                        this._service.notifyError(err);\n                    } else {\n                        this._service.notifyError(\n                            `Failed to stop module '${device.id}'.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err)\n                        );\n                    }\n                }\n            );\n        } else {\n            device.start().then(\n                () => {\n                    this.hide_exec = false;\n                    this._service.notifySuccess('Module successfully started');\n                    (device as any).running = true;\n                },\n                (err) => {\n                    this.hide_exec = false;\n                    if (typeof err === 'string' && err.length < 64) {\n                        this._service.notifyError(err);\n                    } else {\n                        this._service.notifyError(\n                            `Failed to start module '${device.id}'.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err)\n                        );\n                    }\n                }\n            );\n        }\n    }\n\n    /**\n     * Update the state of the module\n     * @param device Module to reload\n     */\n    public reload(device: EngineModule) {\n        this._service.Modules.show(device.id).then(\n            (item) => {\n                for (const k in item) {\n                    if (item.hasOwnProperty(k)) {\n                        device[k] = item[k];\n                    }\n                }\n            },\n            () => null\n        );\n    }\n\n    public viewState(device: EngineModule) {\n        this._dialog.open<ViewModuleStateModalComponent, ModuleStateModalData>(\n            ViewModuleStateModalComponent,\n            { data: { system: this.item, module: device, devices: this.devices } }\n        );\n    }\n\n    public reloadModule(device: EngineModule) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Recompile module?',\n                    content: `New driver code will be loaded and the device settings will be reloaded.`,\n                    icon: { type: 'icon', class: 'backoffice-install' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    (device.driver\n                        ? device.driver.recompile()\n                        : this._service.Drivers.recompile(device.driver_id)\n                    ).then(\n                        (_) => this._service.notifySuccess('Driver successfully recompiled.'),\n                        (err) => this._service.notifyError(JSON.stringify(err.response || err.message || err))\n                    );\n                    ref.close();\n                    this.unsub('confirm_ref');\n                }\n            })\n        );\n    }\n\n    public loadModule(device: EngineModule) {\n        this._service.Modules.load(device.id).then(\n            () =>\n                this._service.notifySuccess(\n                    `Successfully loaded module \"${device.name || device.id}\"`\n                ),\n            (err) => this._service.notifyError(`Error loading module. Error: ${JSON.stringify(err.response || err.message || err)}`)\n        );\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { content },\n        });\n    }\n\n    /**\n     * Handle drop event for reordering the devices\n     * @param event Drag drop details\n     */\n    public drop(event: CdkDragDrop<any[]>) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Change order?',\n                        content: `Are you sure you want to change the module priority?<br>Settings will be updated immediately for the system.`,\n                        icon: { type: 'icon', class: 'backoffice-layers' },\n                    },\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        this.hide_exec = true;\n                        ref.componentInstance.loading = 'Updating module order...';\n                        const list: string[] = [...this.item.modules];\n                        moveItemInArray(list, event.previousIndex, event.currentIndex);\n                        this.item.storePendingChange('modules', list);\n                        this.item.save().then(\n                            () => {\n                                this.hide_exec = false;\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            (err) => {\n                                this.hide_exec = false;\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error reording modules. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public remove(device: EngineModule) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Remove module?',\n                    content: `Remove ${device.driver_id} from this system?<br>If this is not used elsewhere the associated data will be removed immediately.`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.hide_exec = true;\n                    this.item.removeModule(device.id).then(\n                        () => {\n                            this.hide_exec = false;\n                            this._service.notifySuccess('Succefully removed module.');\n                            this.devices.splice(this.devices.indexOf(device), 1);\n                            ref.close();\n                            this.unsub('confirm_ref');\n                        },\n                        (err) => {\n                            this.hide_exec = false;\n                            this._service.notifyError(\n                                `Error removing module. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            ref.close();\n                            this.unsub('confirm_ref');\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public newModule() {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new EngineModule({\n                    control_system_id: this.item.id,\n                    control_system: this.item,\n                }),\n                service: this._service.Modules,\n                readonly: true,\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.hide_exec = true;\n                    this._service.Systems.addModule(this.item.id, event.metadata.item.id).then(\n                        () => {\n                            this.hide_exec = false;\n                            this.item = new EngineSystem({\n                                ...this.item,\n                                modules: this.item.modules.concat(event.metadata.item.id),\n                                version: (this.item as any)._version++,\n                            });\n                            this._service.set('BACKOFFICE.active_item', this.item);\n                            this.timeout('reload_module_list', () => this.loadModules(), 1000);\n                        },\n                        (err) => {\n                            this.hide_exec = false;\n                        }\n                    );\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n        });\n    }\n\n    public addModule() {\n        if (this.new_module) {\n            this.joinModule(this.new_module);\n            this.new_module = '';\n        }\n    }\n\n    public joinModule(id: string) {\n        const mod_list = [...this.item.modules];\n        if (mod_list.indexOf(id) < 0) {\n            mod_list.push(id);\n        }\n        this.hide_exec = true;\n        this.item.storePendingChange('modules', mod_list);\n        this._service.Systems.addModule(this.item.id, id).then(\n            () => {\n                this.hide_exec = false;\n                this.item = new EngineSystem({\n                    ...this.item,\n                    modules: this.item.modules.concat(id),\n                    version: (this.item as any)._version++,\n                });\n                this._service.notifySuccess('Successfully added device to system');\n                this.loadModules();\n            },\n            () => {\n                this.hide_exec = false;\n                this._service.notifyError('Failed to add module to system');\n            }\n        );\n    }\n\n    /**\n     * Toggle debug events for a device\n     * @param device Module to listen to debug events for\n     */\n    public toggleDebugEvents(device: EngineModule) {\n        if (!device) {\n            return;\n        }\n        if (this._debug_service.isListening(device)) {\n            this._debug_service.unbind(device);\n        } else {\n            this._debug_service.bind(device, this.device_classes[device.id]);\n        }\n    }\n\n    /**\n     * Generate the binding modules for each device\n     */\n    private generateModuleBindings() {\n        const counter: HashMap<number> = {};\n        for (const device of this.devices) {\n            const name = device.custom_name || device.name || 'Blank';\n            if (!counter[name]) {\n                counter[name] = 0;\n            }\n            this.device_classes[device.id] = `${name}_${++counter[name]}`;\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section class=\"select\">\n        <div class=\"dropdown\">\n            <item-search-field\n                [service]=\"module_service\"\n                [exclude]=\"exclude_fn\"\n                [ngModel]=\"null\"\n                (ngModelChange)=\"new_module = $event.id\"\n            ></item-search-field>\n        </div>\n        <button mat-button [disabled]=\"!new_module\" (tapped)=\"addModule()\"  i18n=\"@@addExistingAction\">\n            Add existing\n        </button>\n        <button mat-button (tapped)=\"newModule()\" i18n=\"@@newAction\">Add new</button>\n    </section>\n    <ng-container *ngIf=\"item.id && item.modules && !hide_exec\">\n        <section class=\"exec\">\n            <h3 i18n=\"@@execHeader\">Execute command</h3>\n            <system-exec-field [system]=\"item\"></system-exec-field>\n        </section>\n    </ng-container>\n    <section class=\"device-list\">\n        <h3 i18n=\"@@moduleListHeader\">Module List</h3>\n        <table *ngIf=\"devices && devices.length > 0\">\n            <thead>\n                <td class=\"small\"></td>\n                <td class=\"small\" i18n=\"@@moduleStateLabel\">State</td>\n                <td class=\"name\" i18n=\"@@moduleNameLabel\">Name</td>\n                <td class=\"module\" i18n=\"@@moduleClassLabel\">Class</td>\n                <td class=\"ip\" i18n=\"@@moduleIpLabel\">IP</td>\n                <td class=\"small\"></td>\n            </thead>\n            <tbody cdkDropList (cdkDropListDropped)=\"drop($event)\">\n                <tr\n                    *ngFor=\"let device of (devices || [])\"\n                    [context-menu]=\"menu\"\n                    [offset_y]=\"-64\"\n                    (contextAction)=\"handleContextEvent($event, device)\"\n                    cdkDrag\n                >\n                    <td class=\"small\">\n                        <div class=\"action grab\" cdkDragHandle>\n                            <i class=\"backoffice-select-arrows\"></i>\n                        </div>\n                    </td>\n                    <td class=\"small\">\n                        <i\n                            *ngIf=\"device && item.id\"\n                            binding\n                            [(model)]=\"device.connected\"\n                            [sys]=\"item.id\"\n                            [mod]=\"device_classes[device.id]\"\n                            bind=\"connected\"\n                        ></i>\n                        <div\n                            class=\"state\"\n                            [class.active]=\"device.running && device.connected === 'true'\"\n                            [class.inactive]=\"device.running && device.connected === 'false'\"\n                            [class.black]=\"!device.running\"\n                            (tapped)=\"power(device)\"\n                        ></div>\n                    </td>\n                    <td class=\"name\">\n                        <a (contextmenu)=\"$event.stopPropagation()\"\n                            [routerLink]=\"['/modules', device.id]\"\n                            routerLinkActive=\"router-link-active\" [matTooltip]=\"device.id\"\n                            >{{device.driver?.name || \"&lt;Unnamed&gt;\" }}</a\n                        >\n                    </td>\n                    <td class=\"module\">\n                        <mat-checkbox\n                            [checked]=\"debugged_modules[device.id]\"\n                            (change)=\"toggleDebugEvents(device)\"\n                        >\n                            {{ device_classes[device.id] }}\n                        </mat-checkbox>\n                    </td>\n                    <td class=\"ip\">\n                        <div class=\"lock\">\n                            <i class=\"backoffice-lock\" *ngIf=\"device.tls\"></i>\n                        </div>\n                        <a [href]=\"(device.tls ? 'https://' : 'http://') + device.ip\"\n                            >{{device.ip}}</a\n                        >\n                    </td>\n                    <td class=\"small\" touchrelease>\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-dots-three-vertical' }\"\n                            ></app-icon>\n                        </button>\n                        <mat-menu #menu=\"matMenu\">\n                            <button\n                                mat-menu-item\n                                *ngFor=\"let item of (device.running ? menu_options : offline_options)\"\n                                (tapped)=\"handleContextEvent(item, device)\"\n                            >\n                                <app-icon [icon]=\"item.icon\"></app-icon>\n                                <div class=\"text\">{{ item.name }}</div>\n                            </button>\n                        </mat-menu>\n                    </td>\n                    <td class=\"placeholder\" colspan=\"6\" *cdkDragPlaceholder></td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"info-block\" *ngIf=\"!devices || devices.length <= 0\">\n            <div class=\"text\" i18n=\"@@moduleListEmpty\">No devices for system</div>\n        </div>\n    </section>\n</div>\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <div class=\"dropdown\">\n                <button mat-button (tapped)=\"selectTriggerToAdd()\" i18n=\"@@addTriggerAction\">\n                    Add trigger\n                </button>\n            </div>\n            <mat-form-field appearance=\"outline\">\n                <div class=\"prefix\" matPrefix>\n                    <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n                </div>\n                <input\n                    matInput\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"filter($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Triggers\"\n                />\n            </mat-form-field>\n        </section>\n        <section class=\"list\">\n            <table *ngIf=\"filtered_triggers.length > 0; else empty_state\">\n                <thead>\n                    <td class=\"small\"></td>\n                    <td class=\"flex\" i18n=\"@@triggerTableName\">Name</td>\n                    <td class=\"count\" i18n=\"@@triggerTableCount\">Count</td>\n                    <td class=\"count\" i18n=\"@@triggerTableErrors\">Errors</td>\n                    <td class=\"added\" i18n=\"@@triggerTableAddedTime\">Added</td>\n                    <td class=\"duo\"></td>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let trigger of filtered_triggers\">\n                        <i\n                            hidden\n                            binding\n                            [sys]=\"item.id\"\n                            mod=\"_TRIGGER__1\"\n                            [bind]=\"trigger.id\"\n                            [(model)]=\"trigger_state[trigger.id]\"\n                            (modelChange)=\"updateComparisons(trigger.id)\"\n                        ></i>\n                        <td class=\"small\" [matTooltip]=\"comparisons[trigger.id]\">\n                            <div\n                                class=\"state\"\n                                [class.active]=\"trigger_state[trigger.id]?.triggered\"\n                            ></div>\n                        </td>\n                        <td class=\"flex\">\n                            <a [routerLink]=\"['/triggers', trigger.id]\" [matTooltip]=\"trigger.id\"\n                                >{{trigger.name}}</a\n                            >\n                        </td>\n                        <td class=\"count\">{{ trigger_state[trigger.id]?.trigger_count || '0' }}</td>\n                        <td class=\"count\" [matTooltip]=\"'Action Errors: ' + trigger_state[trigger.id]?.action_errors + '\\nComparision Errors: ' + trigger_state[trigger.id]?.comparison_errors\"\n                            >\n                                {{ (trigger_state[trigger.id]?.action_errors +\n                                trigger_state[trigger.id]?.comparison_errors) || '0' }}\n                        </td>\n                        <td class=\"added\">{{ (+trigger.created_at * 1000) | dateFrom }}</td>\n                        <td class=\"duo\">\n                            <div class=\"actions\">\n                                <button mat-icon-button (tapped)=\"editTrigger(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n                                </button>\n                                <button mat-icon-button (tapped)=\"deleteTrigger(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n                                </button>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerTableEmpty\">\n            {{ search_str ? 'No matching triggers' : 'No triggers for system' }}\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineSystem, EngineTrigger } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData\n} from 'src/app/overlays/select-item-modal/select-item-modal.component';\nimport { DialogEvent, HashMap } from 'src/app/shared/utilities/types.utilities';\nimport {\n    CONFIRM_METADATA,\n    ConfirmModalComponent,\n    ConfirmModalData\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\nexport interface TriggerInstanceState {\n    triggered: boolean;\n    trigger_count: number;\n    action_errors: number;\n    comparison_errors: number;\n    conditions: HashMap<boolean>;\n}\n\n@Component({\n    selector: 'system-triggers',\n    templateUrl: './system-triggers.template.html',\n    styleUrls: ['./system-triggers.styles.scss']\n})\nexport class SystemTriggersComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active System */\n    @Input() public item: EngineSystem;\n    /** List of triggers associated with the active system */\n    public trigger_list: EngineTrigger[] = [];\n    /** List of triggers associated with the active system */\n    public filtered_triggers: EngineTrigger[] = [];\n    /** Filter string for listing of triggers */\n    public search_str: string;\n    /** Mapping of trigger instances to their current state */\n    public trigger_state: HashMap<TriggerInstanceState> = {};\n    /** Mapping of trigger instances to their condition state list */\n    public comparisons: HashMap<string> = {};\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _composer: ComposerService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadSystemTriggers();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any): void {\n        if (changes.item) {\n            this.loadSystemTriggers();\n        }\n    }\n\n    public loadSystemTriggers(offset: number = 0): void {\n        if (!this.item) { return; }\n        this._service.Systems.listTriggers(this.item.id).then(\n            list => {\n                this.trigger_list = list;\n                this.filter(this.search_str);\n            },\n            () => null\n        );\n    }\n\n    public filter(search: string = ''): void {\n        const s = search.toLowerCase();\n        this.filtered_triggers = this.trigger_list.filter(item => item.name.toLowerCase().includes(s));\n    }\n\n    public updateComparisons(id: string): void {\n        this.comparisons[id] = '';\n        if (this.trigger_state[id]) {\n            for (const key in this.trigger_state[id].conditions) {\n                if (this.trigger_state[id].conditions.hasOwnProperty(key)) {\n                    if (this.comparisons[id]) {\n                        this.comparisons[id] += '\\n';\n                    }\n                    this.comparisons[id] += `${key}: ${this.trigger_state[id].conditions[key]}`;\n                }\n            }\n        }\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public editTrigger(trigger: EngineTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: trigger,\n                    service: this._service.Triggers,\n                    external_save: true\n                }\n            });\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'action') {\n                        ref.componentInstance.loading = 'Saving trigger settings...';\n                        const url = `${this._composer.auth.api_endpoint}/systems/${this.item.id}/triggers/${trigger.id}`;\n                        this._composer.http.put(url, trigger.toJSON(true)).subscribe(\n                            () => null,\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error updating trigger settings. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            },\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully updated trigger settings.`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Remove a trigger from the active system\n     * @param trigger Trigger to remove\n     */\n    public deleteTrigger(trigger: EngineTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Remove trigger`,\n                        content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Removing trigger...';\n                        const url = `${this._composer.auth.api_endpoint}/systems/${this.item.id}/triggers/${trigger.id}`;\n                        this._composer.http.delete(url).subscribe(\n                            () => null,\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error removing trigger. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                                this.trigger_list.splice(this.trigger_list.findIndex(item => this.item.id === item.id), 1);\n                                this.filter(this.search_str);\n                            },\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted trigger \"${this.item.name}\".`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Open modal to select a trigger to add\n     */\n    public selectTriggerToAdd(): void {\n        const ref = this._dialog.open<SelectItemModalComponent, SelectItemModalData>(\n            SelectItemModalComponent,\n            {\n                height: 'auto',\n                width: 'auto',\n                data: {\n                    service_name: 'Triggers'\n                }\n            }\n        );\n        this.subscription(\n            'dialog_events',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                const item = ref.componentInstance.item;\n                if (event.reason === 'action' && item) {\n                    this.addTrigger(item);\n                    ref.close();\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('dialog_events'));\n    }\n\n    /**\n     * Add the selected trigger to the active system\n     * @param trigger Trigger to add to system\n     */\n    private async addTrigger(trigger: EngineTrigger): Promise<void> {\n        const item = await this._service.Systems.addTrigger(this.item.id, {\n            control_system_id: this.item.id,\n            enabled: true,\n            important: false,\n            trigger_id: trigger.id\n        });\n        this.trigger_list.push(item);\n        this.filter(this.search_str);\n    }\n}\n","import { Component, Input, OnChanges, OnInit, Output, EventEmitter } from '@angular/core';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineZonesService } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'system-zones',\n    templateUrl: './system-zones.template.html',\n    styleUrls: ['./system-zones.styles.scss']\n})\nexport class SystemZonesComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active item */\n    @Input() public item: EngineSystem;\n    /** Emitter for changes to the loading state of the item */\n    @Output() public loading = new EventEmitter<boolean | string>();\n    /** List of zones assoicated with the active item */\n    public zones: EngineZone[];\n    /** ID of a zone that the user wishes to add to the system */\n    public new_zone: EngineZone;\n\n    public readonly exclude_fn = (zone: EngineZone) => this.item.zones.indexOf(zone.id) >= 0\n\n    /** Service for managing zone data */\n    public get zone_service(): EngineZonesService {\n        return this._service.Zones;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadZones();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadZones();\n        }\n    }\n\n    /**\n     * Load zone data for the active item\n     * @param offset Page offset for the service request\n     */\n    public loadZones(offset: number = 0) {\n        if (!this.item) { return; }\n        this._service.Systems.listZones(this.item.id).then(\n            list => {\n                list.sort((a, b) => this.item.zones.indexOf(a.id) - this.item.zones.indexOf(b.id));\n                this.zones = list;\n            },\n            () => null\n        );\n    }\n\n    public drop(event) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Change order?',\n                        content: `Are you sure you want to change the zone priority?<br>Settings will be updated immediately for the system.`,\n                        icon: { type: 'icon', class: 'backoffice-cycle' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        const list: string[] = [...this.item.zones];\n                        moveItemInArray(list, event.previousIndex, event.currentIndex);\n                        ref.componentInstance.loading = 'Updating zone ordering...';\n                        this.item.storePendingChange('zones', list);\n                        this.item.save().then(\n                            () => {\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error reording zones. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public removeZone(zone: EngineZone) {\n        if (zone && zone.id) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Remove zone?',\n                        content: `<p>Are you sure you want remove zone \"${zone.name}\" from the system?</p>Configuration will be updated immediately.`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        this.loading.emit(true);\n                        this.item.storePendingChange('zones', this.item.zones.filter(id => id !== zone.id));\n                        this.item.save().then(\n                            (item: any) => {\n                                this.loading.emit(false);\n                                this.item = item;\n                                this._service.notifySuccess(\n                                    `Remove zone \"${zone.name}\" from system`\n                                );\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            err => {\n                                this.loading.emit(false);\n                                this._service.notifySuccess(\n                                    `Error removing \"${zone.name}\" from system. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public joinZone() {\n        if (this.new_zone) {\n            if (this.item.zones.indexOf(this.new_zone.id) < 0) {\n                this.loading.emit(true);\n                const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                    ConfirmModalComponent,\n                    {\n                        ...CONFIRM_METADATA,\n                        data: {\n                            title: 'Add zone',\n                            content: `Add zone \"${this.new_zone.name}\" to system \"${this.item.name}\"`,\n                            icon: { type: 'icon', class: 'backoffice-upload-to-cloud' }\n                        }\n                    }\n                );\n                this.subscription(\n                    'confirm_ref',\n                    ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                        if (e.reason === 'done') {\n                            ref.componentInstance.loading = 'Adding zone to system...';\n                            this.item.storePendingChange('zones', unique([...this.item.zones, this.new_zone.id]));\n                            this.item.save().then(\n                                (item: any) => {\n                                    this.loading.emit(false);\n                                    this._service.notifySuccess(\n                                        `Added zone \"${this.new_zone.name}\" to system`\n                                    );\n                                    this.item = item;\n                                    this.loadZones();\n                                    ref.close();\n                                    this.unsub('confirm_ref');\n                                    this.new_zone = null;\n                                },\n                                (err) => {\n                                    ref.componentInstance.loading = null;\n                                    this.loading.emit(false);\n                                    this._service.notifyError(\n                                        `Error adding zone \"${this.new_zone.name}\". Error: ${JSON.stringify(err.response || err.message || err)}`\n                                    );\n                                }\n                            );\n                        } else {\n                            this.loading.emit(false);\n                        }\n                    })\n                );\n            } else {\n                this._service.notifyInfo('The selected zone is already linked to this system');\n            }\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <div class=\"dropdown\">\n                <item-search-field\n                    [service]=\"zone_service\"\n                    [exclude]=\"exclude_fn\"\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"new_zone = $event\"\n                ></item-search-field>\n            </div>\n            <button mat-button [disabled]=\"!new_zone\" (tapped)=\"joinZone()\">Join zone</button>\n        </section>\n        <section>\n            <table *ngIf=\"zones && zones.length > 0\">\n                <thead>\n                    <td class=\"small\"></td>\n                    <td class=\"name\" i18n=\"@@zoneTableEmpty\">Name</td>\n                    <td class=\"description\" i18n=\"@@descriptionLabel\">Description</td>\n                    <td *ngIf=\"zones.length > 1\" class=\"small\"></td>\n                </thead>\n                <tbody cdkDropList (cdkDropListDropped)=\"drop($event)\">\n                    <tr *ngFor=\"let zone of zones\" cdkDrag>\n                        <td class=\"small\">\n                            <div class=\"action grab\" cdkDragHandle>\n                                <i class=\"backoffice-select-arrows\"></i>\n                            </div>\n                        </td>\n                        <td class=\"name\">\n                            <a\n                                [routerLink]=\"['/zones', zone.id]\"\n                                routerLinkActive=\"router-link-active\"\n                                [matTooltip]=\"zone.id\"\n                                >{{zone.name}}</a\n                            >\n                        </td>\n                        <td class=\"description\">{{zone.description}}</td>\n                        <td *ngIf=\"zones.length > 1\" class=\"small\">\n                            <button mat-icon-button (tapped)=\"removeZone(zone)\">\n                                <i class=\"backoffice-trash\"></i>\n                            </button>\n                        </td>\n                        <td class=\"placeholder\" colspan=\"6\" *cdkDragPlaceholder></td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"info-block\" *ngIf=\"!zones || zones.length <= 0\">\n                <div class=\"text\" i18n=\"@@zoneTableEmpty\">No zones for system</div>\n            </div>\n        </section>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EngineSystem } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'app-systems',\n    templateUrl: './systems.template.html',\n    styleUrls: ['./systems.styles.scss']\n})\nexport class SystemsComponent extends BaseRootComponent<EngineSystem> {\n    /** Number of triggers for the active system */\n    public trigger_count: number;\n    /** Number of devices for the active system */\n    public device_count: number;\n    /** Number of zones for the active system */\n    public zone_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Systems;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Systems';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0, limit: 1, sys_id: this.item.id };\n        // Get trigger count\n        this._service.Systems.listTriggers(this.item.id).then(\n            list =>\n                (this.trigger_count = list.length || 0)\n        );\n        // Get device count\n        this.device_count = (this.item.modules || []).length;\n        // Get zone count\n        this.zone_count = (this.item.zones || []).length;\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected newItem(copy: boolean = false) {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: copy ? new EngineSystem({ ...this.item, id: '', name: `${this.item.name} (1)` }) : new EngineSystem(),\n                service: this._service.Systems\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/systems', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected editItem() {\n        console.log('Edit');\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Systems\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete system`,\n                        content: `<p>Are you sure you want delete this system?</p><p>Deleting this will <strong>immediately</strong> delete modules that are not in another system</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting system...';\n                        this.item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted system \"${this.item.name}\".`\n                                );\n                                this._service.set('BACKOFFICE.removed', this.item.id);\n                                this._router.navigate(['/systems']);\n                                this.modal_ref.close();\n                            },\n                            err => {\n                                this.modal_ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting system. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            }\n                        );\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Systems\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"system\"\n            route=\"systems\"\n            [item]=\"item\"\n            [loading]=\"loading_item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                {\n                    id: 'modules',\n                    name: 'Modules',\n                    count: device_count,\n                    icon: { class: 'backoffice-tablet' }\n                },\n                { id: 'zones', name: 'Zones', count: zone_count, icon: { class: 'backoffice-layers' } },\n                {\n                    id: 'triggers',\n                    name: 'Triggers',\n                    count: trigger_count,\n                    icon: { class: 'backoffice-stopwatch' }\n                }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './systems.routes';\n\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about/system-about.component';\nimport { SystemModulesComponent } from './system-modules/system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers/system-triggers.component';\nimport { SystemZonesComponent } from './system-zones/system-zones.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n    declarations: [\n        SystemsComponent,\n        SystemAboutComponent,\n        SystemModulesComponent,\n        SystemTriggersComponent,\n        SystemZonesComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule\n    ]\n})\nexport class AppSystemsModule { }\n","import { Routes } from '@angular/router';\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about/system-about.component';\nimport { SystemModulesComponent } from './system-modules/system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers/system-triggers.component';\nimport { SystemZonesComponent } from './system-zones/system-zones.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: SystemsComponent,\n        children: [\n            { path: 'about', component: SystemAboutComponent },\n            { path: 'modules', component: SystemModulesComponent },\n            { path: 'triggers', component: SystemTriggersComponent },\n            { path: 'zones', component: SystemZonesComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n"]}