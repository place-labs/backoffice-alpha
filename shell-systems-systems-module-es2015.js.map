{"version":3,"sources":["./src/app/shell/systems/system-about/system-about.component.ts","./src/app/shell/systems/system-about/system-about.template.html","./src/app/shell/systems/system-modules/system-modules.component.ts","./src/app/shell/systems/system-modules/system-modules.template.html","./src/app/shell/systems/system-triggers/system-triggers.component.ts","./src/app/shell/systems/system-triggers/system-triggers.template.html","./src/app/shell/systems/system-zones/system-zones.component.ts","./src/app/shell/systems/system-zones/system-zones.template.html","./src/app/shell/systems/systems.component.ts","./src/app/shell/systems/systems.template.html","./src/app/shell/systems/systems.module.ts","./src/app/shell/systems/systems.routes.ts"],"names":[],"mappings":"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","file":"shell-systems-systems-module-es2015.js","sourcesContent":["import { Component, Input, OnChanges, SimpleChanges, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineSettings, EncryptionLevel } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'system-about',\n    templateUrl: './system-about.template.html',\n    styleUrls: ['./system-about.styles.scss']\n})\nexport class SystemAboutComponent extends BaseDirective implements OnChanges, OnInit {\n    /** System to render */\n    @Input() public item: EngineSystem;\n    /** List of zones for the active system */\n    public zones: EngineZone[];\n    /** List of settings for associated modules, drivers and zones */\n    public other_settings: EngineSettings[] = [];\n\n    /** List of module ids associated with the system */\n    public modules(): string[] {\n        return [...this.item.modules];\n    }\n\n    /** Whether application is loading settings for item */\n    public get loading_settings(): boolean {\n        return this._service.get('loading_settings');\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadZones();\n                this.loadSettings();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.item && this.item) {\n            this.loadZones();\n            this.loadSettings();\n        }\n    }\n\n    /**\n     * Open confirmation modal for starting the active system\n     */\n    public start() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Start system?',\n                    content: `Are you sure you want to start this system?<br>All stopped modules within the system will boot up.`,\n                    icon: { type: 'icon', class: 'backoffice-controller-play' }\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this._service.Systems.startSystem(this.item.id).then(\n                        result => null,\n                        err =>\n                            this._service.notifyError(\n                                `Failed to start system: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                    );\n                }\n            })\n        );\n    }\n\n    /**\n     * Open confirmation modal for stopping the active system\n     */\n    public stop() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Stop system?',\n                    content: `Are you sure you want to stop this system?<br>All modules will be immediately stopped regardless of any other systems they may be in.`,\n                    icon: { type: 'icon', class: 'backoffice-controller-stop' }\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this._service.Systems.stopSystem(this.item.id).then(\n                        result => null,\n                        err =>\n                            this._service.notifyError(\n                                `Failed to stop system: ${JSON.stringify(err.response || err.message || err)}`\n                            )\n                    );\n                }\n            })\n        );\n    }\n\n    /**\n     * Load zones associated with the system to allow for merging\n     */\n    public loadZones() {\n        if (!this.item) {\n            return;\n        }\n        this._service.Zones.query({ control_system_id: this.item.id, offset: 0 }).then(\n            list => {\n                list.sort((a, b) => this.item.zones.indexOf(b.id) - this.item.zones.indexOf(a.id));\n                this.zones = list;\n            },\n            () => null\n        );\n    }\n\n    public async loadSettings() {\n        if (!this.item) {\n            return;\n        }\n        this.other_settings = await this._service.Systems.settings(this.item.id);\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section class=\"select\">\n        <button mat-button (tapped)=\"start()\"  i18n=\"@@systemStartAction\">Start System</button>\n        <button mat-button (tapped)=\"stop()\" i18n=\"@@systemStopAction\">Stop System</button>\n    </section>\n    <section class=\"details\">\n        <div class=\"field\" *ngIf=\"item.support_url\">\n            <label i18n=\"@@systemUrlLabel\">Support URL:</label>\n            <div class=\"value\">\n                <a [href]=\"item.support_url\" target=\"_blank\">{{item.support_url}}</a>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.bookable\">\n            <label i18n=\"@@systemBookableLabel\">Bookable Room:</label>\n            <div class=\"value\">{{item.bookable ? 'Yes' : 'No'}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.bookable && item.email\">\n            <label i18n=\"@@emailLabel\">Email:&nbsp;</label>\n            <a *ngIf=\"item.email\" [href]=\"'mailto:' + item.email\" target=\"_blank\">{{item.email}}</a>\n        </div>\n        <div class=\"field\" *ngIf=\"item.capacity\">\n            <label i18n=\"@@capacityLabel\">Capacity:</label>\n            <div class=\"value\">{{item.capacity}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.installed_ui_devices\">\n            <label i18n=\"@@systemPanelCountLabel\">Installed Touch Panels:</label>\n            <div class=\"value\">{{item.installed_ui_devices}}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.created_at\">\n            <label i18n=\"@@systemCreatedAtLabel\">Created:</label>\n            <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.updated_at\">\n            <label i18n=\"@systemUpdatedAtLabel\">Updated:</label>\n            <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n        </div>\n    </section>\n    <hr />\n    <header class=\"settings\" i18n=\"@@settingsLabel\">Settings</header>\n    <section *ngIf=\"!loading_settings; else load_state\">\n        <a-settings-form [id]=\"item.id\" [merge]=\"true\" [settings]=\"item.settings\" [merge_settings]=\"other_settings || []\"></a-settings-form>\n    </section>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@systemLoadingLabel\">Loading system settings...</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineModule, EngineDriverRole, HashMap } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationActionLink } from 'src/app/shared/utilities/settings.interfaces';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ViewModuleStateModalComponent,\n    ModuleStateModalData,\n} from 'src/app/overlays/view-module-state/view-module-state.component';\nimport { EngineDebugService } from 'src/app/services/debug.service';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport { ViewResponseModalComponent } from 'src/app/overlays/view-response-modal/view-response-modal.component';\n\n@Component({\n    selector: 'system-modules',\n    templateUrl: './system-modules.template.html',\n    styleUrls: ['./system-modules.styles.scss'],\n})\nexport class SystemModulesComponent extends BaseDirective implements OnInit, OnChanges {\n    /** System to grab the devices for */\n    @Input() public item: EngineSystem;\n    /** List of modules associated with the system */\n    public devices: EngineModule[];\n    /** Mapping of devices to the module bindings */\n    public device_classes: HashMap<string> = {};\n    /** Whether a device should be listened to */\n    public device_listener: HashMap<boolean> = {};\n    /** Store for ID of new module to add to system */\n    public new_module: string;\n    /** Whether to show exec block */\n    public hide_exec: boolean;\n    /** Actions available for the context menu */\n    public menu_options: ApplicationActionLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        { id: 'state', name: 'View State', icon: { type: 'icon', class: 'backoffice-eye' } },\n        { id: 'reload', name: 'Recompile Driver', icon: { type: 'icon', class: 'backoffice-cw' } },\n        { id: 'remove', name: 'Remove Module', icon: { type: 'icon', class: 'backoffice-trash' } },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n\n    public offline_options: ApplicationActionLink[] = [\n        {\n            id: 'power',\n            name: 'Toggle Power',\n            icon: { type: 'icon', class: 'backoffice-power-plug' },\n        },\n        { id: 'remove', name: 'Remove Module', icon: { type: 'icon', class: 'backoffice-trash' } },\n        {\n            id: 'load',\n            name: 'Load Module',\n            icon: { type: 'icon', class: 'backoffice-arrow-with-circle-up' },\n        },\n    ];\n    /** Function for excluding modules already within this system */\n    public readonly exclude_fn = (item: EngineModule) =>\n        item.control_system_id === this.item.id || item.role === EngineDriverRole.Logic;\n\n    /** Service for interacting with modules */\n    public get module_service() {\n        return this._service.Modules;\n    }\n\n    /** Map of modules to whether they are listening for debug messages */\n    public get debugged_modules(): HashMap<boolean> {\n        return this.devices.reduce((map, device) => {\n            map[device.id] = this._debug_service.isListening(device);\n            return map;\n        }, {});\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _debug_service: EngineDebugService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe((item) => {\n                this.item = item;\n                this.loadModules();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadModules();\n        }\n    }\n\n    /**\n     * Load the modules for the active system\n     * @param offset Offset to load\n     */\n    public loadModules(offset: number = 0) {\n        if (!this.item) {\n            return;\n        }\n        this._service.Modules.query({\n            control_system_id: this.item.id,\n            complete: true,\n            offset,\n        } as any).then(\n            (list) => {\n                list.sort(\n                    (a, b) => this.item.modules.indexOf(a.id) - this.item.modules.indexOf(b.id)\n                );\n                this.devices = list;\n                this.generateModuleBindings();\n            },\n            () => null\n        );\n    }\n\n    /**\n     * Handle context menu event\n     * @param event Event posted by the context menu\n     * @param device Module associated with the context menu event\n     */\n    public handleContextEvent(event: ApplicationActionLink, device: EngineModule) {\n        if (event) {\n            switch (event.id) {\n                case 'power':\n                    this.power(device);\n                    break;\n                case 'state':\n                    this.viewState(device);\n                    break;\n                case 'reload':\n                    this.reloadModule(device);\n                    break;\n                case 'remove':\n                    this.remove(device);\n                    break;\n                case 'load':\n                    this.loadModule(device);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Toggle the power state\n     * @param device Module to toggle the power state\n     */\n    public power(device: EngineModule) {\n        this.hide_exec = true;\n        if (device.running) {\n            device.stop().then(\n                () => {\n                    this.hide_exec = false;\n                    this._service.notifySuccess('Module successfully stopped');\n                    (device as any).running = false;\n                },\n                (err) => {\n                    this.hide_exec = false;\n                    if (typeof err === 'string' && err.length < 64) {\n                        this._service.notifyError(err);\n                    } else {\n                        this._service.notifyError(\n                            `Failed to stop module '${device.id}'.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err)\n                        );\n                    }\n                }\n            );\n        } else {\n            device.start().then(\n                () => {\n                    this.hide_exec = false;\n                    this._service.notifySuccess('Module successfully started');\n                    (device as any).running = true;\n                },\n                (err) => {\n                    this.hide_exec = false;\n                    if (typeof err === 'string' && err.length < 64) {\n                        this._service.notifyError(err);\n                    } else {\n                        this._service.notifyError(\n                            `Failed to start module '${device.id}'.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err)\n                        );\n                    }\n                }\n            );\n        }\n    }\n\n    /**\n     * Update the state of the module\n     * @param device Module to reload\n     */\n    public reload(device: EngineModule) {\n        this._service.Modules.show(device.id).then(\n            (item) => {\n                for (const k in item) {\n                    if (item.hasOwnProperty(k)) {\n                        device[k] = item[k];\n                    }\n                }\n            },\n            () => null\n        );\n    }\n\n    public viewState(device: EngineModule) {\n        this._dialog.open<ViewModuleStateModalComponent, ModuleStateModalData>(\n            ViewModuleStateModalComponent,\n            { data: { system: this.item, module: device, devices: this.devices } }\n        );\n    }\n\n    public reloadModule(device: EngineModule) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Recompile module?',\n                    content: `New driver code will be loaded and the device settings will be reloaded.`,\n                    icon: { type: 'icon', class: 'backoffice-install' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    (device.driver\n                        ? device.driver.recompile()\n                        : this._service.Drivers.recompile(device.driver_id)\n                    ).then(\n                        (_) => this._service.notifySuccess('Driver successfully recompiled.'),\n                        (err) => this._service.notifyError(JSON.stringify(err.response || err.message || err))\n                    );\n                    ref.close();\n                    this.unsub('confirm_ref');\n                }\n            })\n        );\n    }\n\n    public loadModule(device: EngineModule) {\n        this._service.Modules.load(device.id).then(\n            () =>\n                this._service.notifySuccess(\n                    `Successfully loaded module \"${device.name || device.id}\"`\n                ),\n            (err) => this._service.notifyError(`Error loading module. Error: ${JSON.stringify(err.response || err.message || err)}`)\n        );\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { content },\n        });\n    }\n\n    /**\n     * Handle drop event for reordering the devices\n     * @param event Drag drop details\n     */\n    public drop(event: CdkDragDrop<any[]>) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Change order?',\n                        content: `Are you sure you want to change the module priority?<br>Settings will be updated immediately for the system.`,\n                        icon: { type: 'icon', class: 'backoffice-layers' },\n                    },\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        this.hide_exec = true;\n                        ref.componentInstance.loading = 'Updating module order...';\n                        const list: string[] = [...this.item.modules];\n                        moveItemInArray(list, event.previousIndex, event.currentIndex);\n                        this.item.storePendingChange('modules', list);\n                        this.item.save().then(\n                            () => {\n                                this.hide_exec = false;\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            (err) => {\n                                this.hide_exec = false;\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error reording modules. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public remove(device: EngineModule) {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Remove module?',\n                    content: `Remove ${device.driver_id} from this system?<br>If this is not used elsewhere the associated data will be removed immediately.`,\n                    icon: { type: 'icon', class: 'backoffice-trash' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.hide_exec = true;\n                    this.item.removeModule(device.id).then(\n                        () => {\n                            this.hide_exec = false;\n                            this._service.notifySuccess('Succefully removed module.');\n                            this.devices.splice(this.devices.indexOf(device), 1);\n                            ref.close();\n                            this.unsub('confirm_ref');\n                        },\n                        (err) => {\n                            this.hide_exec = false;\n                            this._service.notifyError(\n                                `Error removing module. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            ref.close();\n                            this.unsub('confirm_ref');\n                        }\n                    );\n                }\n            })\n        );\n    }\n\n    public newModule() {\n        const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new EngineModule({\n                    control_system_id: this.item.id,\n                    control_system: this.item,\n                }),\n                service: this._service.Modules,\n                readonly: true,\n            },\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event) => {\n                if (event.reason === 'done') {\n                    this.hide_exec = true;\n                    this._service.Systems.addModule(this.item.id, event.metadata.item.id).then(\n                        () => {\n                            this.hide_exec = false;\n                            this.item = new EngineSystem({\n                                ...this.item,\n                                modules: this.item.modules.concat(event.metadata.item.id),\n                                version: (this.item as any)._version++,\n                            });\n                            this._service.set('BACKOFFICE.active_item', this.item);\n                            this.timeout('reload_module_list', () => this.loadModules(), 1000);\n                        },\n                        (err) => {\n                            this.hide_exec = false;\n                        }\n                    );\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n        });\n    }\n\n    public addModule() {\n        if (this.new_module) {\n            this.joinModule(this.new_module);\n            this.new_module = '';\n        }\n    }\n\n    public joinModule(id: string) {\n        const mod_list = [...this.item.modules];\n        if (mod_list.indexOf(id) < 0) {\n            mod_list.push(id);\n        }\n        this.hide_exec = true;\n        this.item.storePendingChange('modules', mod_list);\n        this._service.Systems.addModule(this.item.id, id).then(\n            () => {\n                this.hide_exec = false;\n                this.item = new EngineSystem({\n                    ...this.item,\n                    modules: this.item.modules.concat(id),\n                    version: (this.item as any)._version++,\n                });\n                this._service.notifySuccess('Successfully added device to system');\n                this.loadModules();\n            },\n            () => {\n                this.hide_exec = false;\n                this._service.notifyError('Failed to add module to system');\n            }\n        );\n    }\n\n    /**\n     * Toggle debug events for a device\n     * @param device Module to listen to debug events for\n     */\n    public toggleDebugEvents(device: EngineModule) {\n        if (!device) {\n            return;\n        }\n        if (this._debug_service.isListening(device)) {\n            this._debug_service.unbind(device);\n        } else {\n            this._debug_service.bind(device, this.device_classes[device.id]);\n        }\n    }\n\n    /**\n     * Generate the binding modules for each device\n     */\n    private generateModuleBindings() {\n        const counter: HashMap<number> = {};\n        for (const device of this.devices) {\n            const name = device.custom_name || device.name || 'Blank';\n            if (!counter[name]) {\n                counter[name] = 0;\n            }\n            this.device_classes[device.id] = `${name}_${++counter[name]}`;\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section class=\"select\">\n        <div class=\"dropdown\">\n            <item-search-field\n                [service]=\"module_service\"\n                [exclude]=\"exclude_fn\"\n                [ngModel]=\"null\"\n                (ngModelChange)=\"new_module = $event.id\"\n            ></item-search-field>\n        </div>\n        <button mat-button [disabled]=\"!new_module\" (tapped)=\"addModule()\"  i18n=\"@@addExistingAction\">\n            Add existing\n        </button>\n        <button mat-button (tapped)=\"newModule()\" i18n=\"@@newAction\">Add new</button>\n    </section>\n    <ng-container *ngIf=\"item.id && item.modules && !hide_exec\">\n        <section class=\"exec\">\n            <h3 i18n=\"@@execHeader\">Execute command</h3>\n            <system-exec-field [system]=\"item\"></system-exec-field>\n        </section>\n    </ng-container>\n    <section class=\"device-list\">\n        <h3 i18n=\"@@moduleListHeader\">Module List</h3>\n        <table *ngIf=\"devices && devices.length > 0\">\n            <thead>\n                <td class=\"small\"></td>\n                <td class=\"small\" i18n=\"@@moduleStateLabel\">State</td>\n                <td class=\"name\" i18n=\"@@moduleNameLabel\">Name</td>\n                <td class=\"module\" i18n=\"@@moduleClassLabel\">Class</td>\n                <td class=\"ip\" i18n=\"@@moduleIpLabel\">IP</td>\n                <td class=\"small\"></td>\n            </thead>\n            <tbody cdkDropList (cdkDropListDropped)=\"drop($event)\">\n                <tr\n                    *ngFor=\"let device of (devices || [])\"\n                    [context-menu]=\"menu\"\n                    [offset_y]=\"-64\"\n                    (contextAction)=\"handleContextEvent($event, device)\"\n                    cdkDrag\n                >\n                    <td class=\"small\">\n                        <div class=\"action grab\" cdkDragHandle>\n                            <i class=\"backoffice-select-arrows\"></i>\n                        </div>\n                    </td>\n                    <td class=\"small\">\n                        <i\n                            *ngIf=\"device && item.id\"\n                            binding\n                            [(model)]=\"device.connected\"\n                            [sys]=\"item.id\"\n                            [mod]=\"device_classes[device.id]\"\n                            bind=\"connected\"\n                        ></i>\n                        <div\n                            class=\"state\"\n                            [class.active]=\"device.running && device.connected === 'true'\"\n                            [class.inactive]=\"device.running && device.connected === 'false'\"\n                            [class.black]=\"!device.running\"\n                            (tapped)=\"power(device)\"\n                        ></div>\n                    </td>\n                    <td class=\"name\">\n                        <a (contextmenu)=\"$event.stopPropagation()\"\n                            [routerLink]=\"['/modules', device.id]\"\n                            routerLinkActive=\"router-link-active\" [matTooltip]=\"device.id\"\n                            >{{device.driver?.name || \"&lt;Unnamed&gt;\" }}</a\n                        >\n                    </td>\n                    <td class=\"module\">\n                        <mat-checkbox\n                            [checked]=\"debugged_modules[device.id]\"\n                            (change)=\"toggleDebugEvents(device)\"\n                        >\n                            {{ device_classes[device.id] }}\n                        </mat-checkbox>\n                    </td>\n                    <td class=\"ip\">\n                        <div class=\"lock\">\n                            <i class=\"backoffice-lock\" *ngIf=\"device.tls\"></i>\n                        </div>\n                        <a [href]=\"(device.tls ? 'https://' : 'http://') + device.ip\"\n                            >{{device.ip}}</a\n                        >\n                    </td>\n                    <td class=\"small\" touchrelease>\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                            <app-icon\n                                [icon]=\"{ class: 'backoffice-dots-three-vertical' }\"\n                            ></app-icon>\n                        </button>\n                        <mat-menu #menu=\"matMenu\">\n                            <button\n                                mat-menu-item\n                                *ngFor=\"let item of (device.running ? menu_options : offline_options)\"\n                                (tapped)=\"handleContextEvent(item, device)\"\n                            >\n                                <app-icon [icon]=\"item.icon\"></app-icon>\n                                <div class=\"text\">{{ item.name }}</div>\n                            </button>\n                        </mat-menu>\n                    </td>\n                    <td class=\"placeholder\" colspan=\"6\" *cdkDragPlaceholder></td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"info-block\" *ngIf=\"!devices || devices.length <= 0\">\n            <div class=\"text\" i18n=\"@@moduleListEmpty\">No devices for system</div>\n        </div>\n    </section>\n</div>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { EngineSystem, EngineTrigger } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    SelectItemModalComponent,\n    SelectItemModalData\n} from 'src/app/overlays/select-item-modal/select-item-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    CONFIRM_METADATA,\n    ConfirmModalComponent,\n    ConfirmModalData\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ComposerService } from '@placeos/composer';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'system-triggers',\n    templateUrl: './system-triggers.template.html',\n    styleUrls: ['./system-triggers.styles.scss']\n})\nexport class SystemTriggersComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active System */\n    @Input() public item: EngineSystem;\n    /** List of triggers associated with the active system */\n    public trigger_list: EngineTrigger[] = [];\n    /** List of triggers associated with the active system */\n    public filtered_triggers: EngineTrigger[] = [];\n    /** Filter string for listing of triggers */\n    public search_str: string;\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _composer: ComposerService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadSystemTriggers();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any): void {\n        if (changes.item) {\n            this.loadSystemTriggers();\n        }\n    }\n\n    public loadSystemTriggers(offset: number = 0): void {\n        if (!this.item) { return; }\n        this._service.Systems.listTriggers(this.item.id).then(\n            list => {\n                this.trigger_list = list;\n                this.filter(this.search_str);\n            },\n            () => null\n        );\n    }\n\n    public filter(search: string = ''): void {\n        const s = search.toLowerCase();\n        this.filtered_triggers = this.trigger_list.filter(item => item.name.toLowerCase().includes(s));\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    public editTrigger(trigger: EngineTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: trigger,\n                    service: this._service.Triggers,\n                    external_save: true\n                }\n            });\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'action') {\n                        ref.componentInstance.loading = 'Saving trigger settings...';\n                        const url = `${this._composer.auth.api_endpoint}/systems/${this.item.id}/triggers/${trigger.id}`;\n                        this._composer.http.put(url, trigger.toJSON(true)).subscribe(\n                            () => null,\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error updating trigger settings. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            },\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully updated trigger settings.`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Remove a trigger from the active system\n     * @param trigger Trigger to remove\n     */\n    public deleteTrigger(trigger: EngineTrigger) {\n        if (this.item && trigger) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Remove trigger`,\n                        content: `<p>Are you sure you want remove trigger \"${trigger.name}\"?</p><p>Configuration will be updated <strong>immediately</strong>.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Removing trigger...';\n                        const url = `${this._composer.auth.api_endpoint}/systems/${this.item.id}/triggers/${trigger.id}`;\n                        this._composer.http.delete(url).subscribe(\n                            () => null,\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error removing trigger. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                                this.trigger_list.splice(this.trigger_list.findIndex(item => this.item.id === item.id), 1);\n                                this.filter(this.search_str);\n                            },\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted trigger \"${this.item.name}\".`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Open modal to select a trigger to add\n     */\n    public selectTriggerToAdd(): void {\n        const ref = this._dialog.open<SelectItemModalComponent, SelectItemModalData>(\n            SelectItemModalComponent,\n            {\n                height: 'auto',\n                width: 'auto',\n                data: {\n                    service_name: 'Triggers'\n                }\n            }\n        );\n        this.subscription(\n            'dialog_events',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                const item = ref.componentInstance.item;\n                if (event.reason === 'action' && item) {\n                    this.addTrigger(item);\n                    ref.close();\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('dialog_events'));\n    }\n\n    /**\n     * Add the selected trigger to the active system\n     * @param trigger Trigger to add to system\n     */\n    private async addTrigger(trigger: EngineTrigger): Promise<void> {\n        const item = await this._service.Systems.addTrigger(this.item.id, {\n            control_system_id: this.item.id,\n            enabled: true,\n            important: false,\n            trigger_id: trigger.id\n        });\n        this.trigger_list.push(item);\n        this.filter(this.search_str);\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <div class=\"dropdown\">\n                <button mat-button (tapped)=\"selectTriggerToAdd()\" i18n=\"@@addTriggerAction\">Add trigger</button>\n            </div>\n            <mat-form-field appearance=\"outline\">\n                <div class=\"prefix\" matPrefix>\n                    <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n                </div>\n                <input\n                    matInput\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"filter($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Triggers\"\n                />\n            </mat-form-field>\n        </section>\n        <section class=\"list\">\n            <table *ngIf=\"filtered_triggers.length > 0; else empty_state\">\n                <thead>\n                    <td class=\"small\"></td>\n                    <td class=\"flex\" i18n=\"@@triggerTableName\">Name</td>\n                    <td class=\"count\" i18n=\"@@triggerTableCount\">Count</td>\n                    <td class=\"added\" i18n=\"@@triggerTableAddedTime\">Added</td>\n                    <td class=\"duo\"></td>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let trigger of filtered_triggers\">\n                        <td class=\"small\">\n                            <div class=\"state\" [class.active]=\"trigger.enabled\"></div>\n                        </td>\n                        <td class=\"flex\">\n                            <a [routerLink]=\"['/triggers', trigger.id]\" [matTooltip]=\"trigger.id\">{{trigger.name}}</a>\n                        </td>\n                        <td class=\"count\">{{ trigger.activated_count || '0' }}</td>\n                        <td class=\"added\">{{ (+trigger.created_at * 1000) | dateFrom }}</td>\n                        <td class=\"duo\">\n                            <div class=\"actions\">\n                                <button mat-icon-button (tapped)=\"editTrigger(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n                                </button>\n                                <button mat-icon-button (tapped)=\"deleteTrigger(trigger)\">\n                                    <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n                                </button>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </section>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerTableEmpty\">{{ search_str ? 'No matching triggers' : 'No triggers for system' }}</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit, Output, EventEmitter } from '@angular/core';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineZonesService } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'system-zones',\n    templateUrl: './system-zones.template.html',\n    styleUrls: ['./system-zones.styles.scss']\n})\nexport class SystemZonesComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active item */\n    @Input() public item: EngineSystem;\n    /** Emitter for changes to the loading state of the item */\n    @Output() public loading = new EventEmitter<boolean | string>();\n    /** List of zones assoicated with the active item */\n    public zones: EngineZone[];\n    /** ID of a zone that the user wishes to add to the system */\n    public new_zone: EngineZone;\n\n    public readonly exclude_fn = (zone: EngineZone) => this.item.zones.indexOf(zone.id) >= 0\n\n    /** Service for managing zone data */\n    public get zone_service(): EngineZonesService {\n        return this._service.Zones;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadZones();\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadZones();\n        }\n    }\n\n    /**\n     * Load zone data for the active item\n     * @param offset Page offset for the service request\n     */\n    public loadZones(offset: number = 0) {\n        if (!this.item) { return; }\n        this._service.Systems.listZones(this.item.id).then(\n            list => {\n                list.sort((a, b) => this.item.zones.indexOf(a.id) - this.item.zones.indexOf(b.id));\n                this.zones = list;\n            },\n            () => null\n        );\n    }\n\n    public drop(event) {\n        if (event && event.previousIndex !== event.currentIndex) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Change order?',\n                        content: `Are you sure you want to change the zone priority?<br>Settings will be updated immediately for the system.`,\n                        icon: { type: 'icon', class: 'backoffice-cycle' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        const list: string[] = [...this.item.zones];\n                        moveItemInArray(list, event.previousIndex, event.currentIndex);\n                        ref.componentInstance.loading = 'Updating zone ordering...';\n                        this.item.storePendingChange('zones', list);\n                        this.item.save().then(\n                            () => {\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(\n                                    `Error reording zones. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public removeZone(zone: EngineZone) {\n        if (zone && zone.id) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Remove zone?',\n                        content: `<p>Are you sure you want remove zone \"${zone.name}\" from the system?</p>Configuration will be updated immediately.`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        this.loading.emit(true);\n                        this.item.storePendingChange('zones', this.item.zones.filter(id => id !== zone.id));\n                        this.item.save().then(\n                            (item: any) => {\n                                this.loading.emit(false);\n                                this.item = item;\n                                this._service.notifySuccess(\n                                    `Remove zone \"${zone.name}\" from system`\n                                );\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            },\n                            err => {\n                                this.loading.emit(false);\n                                this._service.notifySuccess(\n                                    `Error removing \"${zone.name}\" from system. Error: ${JSON.stringify(err.response || err.message || err)}`\n                                );\n                                ref.close();\n                                this.unsub('confirm_ref');\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public joinZone() {\n        if (this.new_zone) {\n            if (this.item.zones.indexOf(this.new_zone.id) < 0) {\n                this.loading.emit(true);\n                const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                    ConfirmModalComponent,\n                    {\n                        ...CONFIRM_METADATA,\n                        data: {\n                            title: 'Add zone',\n                            content: `Add zone \"${this.new_zone.name}\" to system \"${this.item.name}\"`,\n                            icon: { type: 'icon', class: 'backoffice-upload-to-cloud' }\n                        }\n                    }\n                );\n                this.subscription(\n                    'confirm_ref',\n                    ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                        if (e.reason === 'done') {\n                            ref.componentInstance.loading = 'Adding zone to system...';\n                            this.item.storePendingChange('zones', unique([...this.item.zones, this.new_zone.id]));\n                            this.item.save().then(\n                                (item: any) => {\n                                    this.loading.emit(false);\n                                    this._service.notifySuccess(\n                                        `Added zone \"${this.new_zone.name}\" to system`\n                                    );\n                                    this.item = item;\n                                    this.loadZones();\n                                    ref.close();\n                                    this.unsub('confirm_ref');\n                                    this.new_zone = null;\n                                },\n                                (err) => {\n                                    ref.componentInstance.loading = null;\n                                    this.loading.emit(false);\n                                    this._service.notifyError(\n                                        `Error adding zone \"${this.new_zone.name}\". Error: ${JSON.stringify(err.response || err.message || err)}`\n                                    );\n                                }\n                            );\n                        } else {\n                            this.loading.emit(false);\n                        }\n                    })\n                );\n            } else {\n                this._service.notifyInfo('The selected zone is already linked to this system');\n            }\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <div class=\"dropdown\">\n                <item-search-field\n                    [service]=\"zone_service\"\n                    [exclude]=\"exclude_fn\"\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"new_zone = $event\"\n                ></item-search-field>\n            </div>\n            <button mat-button [disabled]=\"!new_zone\" (tapped)=\"joinZone()\">Join zone</button>\n        </section>\n        <section>\n            <table *ngIf=\"zones && zones.length > 0\">\n                <thead>\n                    <td class=\"small\"></td>\n                    <td class=\"name\" i18n=\"@@zoneTableEmpty\">Name</td>\n                    <td class=\"description\" i18n=\"@@descriptionLabel\">Description</td>\n                    <td *ngIf=\"zones.length > 1\" class=\"small\"></td>\n                </thead>\n                <tbody cdkDropList (cdkDropListDropped)=\"drop($event)\">\n                    <tr *ngFor=\"let zone of zones\" cdkDrag>\n                        <td class=\"small\">\n                            <div class=\"action grab\" cdkDragHandle>\n                                <i class=\"backoffice-select-arrows\"></i>\n                            </div>\n                        </td>\n                        <td class=\"name\">\n                            <a\n                                [routerLink]=\"['/zones', zone.id]\"\n                                routerLinkActive=\"router-link-active\"\n                                [matTooltip]=\"zone.id\"\n                                >{{zone.name}}</a\n                            >\n                        </td>\n                        <td class=\"description\">{{zone.description}}</td>\n                        <td *ngIf=\"zones.length > 1\" class=\"small\">\n                            <button mat-icon-button (tapped)=\"removeZone(zone)\">\n                                <i class=\"backoffice-trash\"></i>\n                            </button>\n                        </td>\n                        <td class=\"placeholder\" colspan=\"6\" *cdkDragPlaceholder></td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"info-block\" *ngIf=\"!zones || zones.length <= 0\">\n                <div class=\"text\" i18n=\"@@zoneTableEmpty\">No zones for system</div>\n            </div>\n        </section>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EngineSystem } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'app-systems',\n    templateUrl: './systems.template.html',\n    styleUrls: ['./systems.styles.scss']\n})\nexport class SystemsComponent extends BaseRootComponent<EngineSystem> {\n    /** Number of triggers for the active system */\n    public trigger_count: number;\n    /** Number of devices for the active system */\n    public device_count: number;\n    /** Number of zones for the active system */\n    public zone_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Systems;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Systems';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0, limit: 1, sys_id: this.item.id };\n        // Get trigger count\n        this._service.Systems.listTriggers(this.item.id).then(\n            list =>\n                (this.trigger_count = list.length || 0)\n        );\n        // Get device count\n        this.device_count = (this.item.modules || []).length;\n        // Get zone count\n        this.zone_count = (this.item.zones || []).length;\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected newItem(copy: boolean = false) {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: copy ? new EngineSystem({ ...this.item, id: '', name: `${this.item.name} (1)` }) : new EngineSystem(),\n                service: this._service.Systems\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/systems', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected editItem() {\n        console.log('Edit');\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Systems\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete system`,\n                        content: `<p>Are you sure you want delete this system?</p><p>Deleting this will <strong>immediately</strong> delete modules that are not in another system</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting system...';\n                        this.item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted system \"${this.item.name}\".`\n                                );\n                                this._service.set('BACKOFFICE.removed', this.item.id);\n                                this._router.navigate(['/systems']);\n                                this.modal_ref.close();\n                            },\n                            err => {\n                                this.modal_ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting system. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            }\n                        );\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Systems\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"system\"\n            route=\"systems\"\n            [item]=\"item\"\n            [loading]=\"loading_item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                {\n                    id: 'modules',\n                    name: 'Modules',\n                    count: device_count,\n                    icon: { class: 'backoffice-tablet' }\n                },\n                { id: 'zones', name: 'Zones', count: zone_count, icon: { class: 'backoffice-layers' } },\n                {\n                    id: 'triggers',\n                    name: 'Triggers',\n                    count: trigger_count,\n                    icon: { class: 'backoffice-stopwatch' }\n                }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './systems.routes';\n\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about/system-about.component';\nimport { SystemModulesComponent } from './system-modules/system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers/system-triggers.component';\nimport { SystemZonesComponent } from './system-zones/system-zones.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n    declarations: [\n        SystemsComponent,\n        SystemAboutComponent,\n        SystemModulesComponent,\n        SystemTriggersComponent,\n        SystemZonesComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule\n    ]\n})\nexport class AppSystemsModule { }\n","import { Routes } from '@angular/router';\nimport { SystemsComponent } from './systems.component';\nimport { SystemAboutComponent } from './system-about/system-about.component';\nimport { SystemModulesComponent } from './system-modules/system-modules.component';\nimport { SystemTriggersComponent } from './system-triggers/system-triggers.component';\nimport { SystemZonesComponent } from './system-zones/system-zones.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: SystemsComponent,\n        children: [\n            { path: 'about', component: SystemAboutComponent },\n            { path: 'modules', component: SystemModulesComponent },\n            { path: 'triggers', component: SystemTriggersComponent },\n            { path: 'zones', component: SystemZonesComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n"],"sourceRoot":"webpack:///"}