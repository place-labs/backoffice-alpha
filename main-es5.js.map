{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/overlays/auth-source-modal/auth-source-modal.component.ts","webpack:///src/app/overlays/auth-source-modal/auth-source-modal.component.html","webpack:///src/app/overlays/bulk-item-modal/bulk-item-modal.component.ts","webpack:///src/app/overlays/bulk-item-modal/bulk-item-modal.component.html","webpack:///src/app/overlays/bulk-item-modal/csv-upload/csv-upload.component.ts","webpack:///src/app/overlays/bulk-item-modal/csv-upload/csv-upload.component.html","webpack:///src/app/overlays/bulk-item-modal/list/list.component.ts","webpack:///src/app/overlays/bulk-item-modal/match-fields/match-fields.component.ts","webpack:///src/app/overlays/bulk-item-modal/match-fields/match-fields.component.html","webpack:///src/app/overlays/bulk-item-modal/status-list/status-list.component.ts","webpack:///src/app/overlays/bulk-item-modal/status-list/status-list.component.html","webpack:///src/app/overlays/changelog-modal/changelog-modal.component.ts","webpack:///src/app/overlays/changelog-modal/changelog-modal.template.html","webpack:///src/app/overlays/confirm-modal/confirm-modal.component.ts","webpack:///src/app/overlays/confirm-modal/confirm-modal.component.html","webpack:///src/app/overlays/item-modal/item-modal.component.html","webpack:///src/app/overlays/item-modal/item-modal.component.ts","webpack:///src/app/overlays/metadata-details-modal/metadata-details-modal.component.ts","webpack:///src/app/overlays/metadata-details-modal/metadata-details-modal.component.html","webpack:///src/app/overlays/overlays.module.ts","webpack:///src/app/overlays/select-item-modal/select-item-modal.component.ts","webpack:///src/app/overlays/select-item-modal/select-item-modal.component.html","webpack:///src/app/overlays/system-log-modal/system-log-modal.component.ts","webpack:///src/app/overlays/system-log-modal/system-log-modal.component.html","webpack:///src/app/overlays/trigger-action-modal/trigger-action-modal.component.ts","webpack:///src/app/overlays/trigger-action-modal/trigger-action-modal.template.html","webpack:///src/app/overlays/trigger-condition-modal/trigger-condition-modal.component.ts","webpack:///src/app/overlays/trigger-condition-modal/trigger-condition-modal.template.html","webpack:///src/app/overlays/view-module-state/view-module-state.component.ts","webpack:///src/app/overlays/view-module-state/view-module-state.template.html","webpack:///src/app/overlays/view-response-modal/view-response-modal.component.ts","webpack:///src/app/overlays/view-response-modal/view-response-modal.component.html","webpack:///src/app/services/app.service.ts","webpack:///src/app/services/data/base.service.ts","webpack:///src/app/services/data/comments.service.ts","webpack:///src/app/services/data/logs.service.ts","webpack:///src/app/services/data/search.service.ts","webpack:///src/app/services/data/stats.service.ts","webpack:///src/app/services/data/system_logs.service.ts","webpack:///src/app/services/data/users.service.ts","webpack:///src/app/services/debug.service.ts","webpack:///src/app/services/hotkeys.service.ts","webpack:///src/app/services/sentry.service.ts","webpack:///src/app/services/settings.service.ts","webpack:///src/app/shared/components/base-root.component.ts","webpack:///src/app/shared/components/context-menu/context-menu.component.ts","webpack:///src/app/shared/components/context-menu/context-menu.template.html","webpack:///src/app/shared/components/custom-fields/date-field/date-field.component.ts","webpack:///src/app/shared/components/custom-fields/date-field/date-field.component.html","webpack:///src/app/shared/components/custom-fields/item-search-field/item-search-field.component.ts","webpack:///src/app/shared/components/custom-fields/item-search-field/item-search-field.component.html","webpack:///src/app/shared/components/custom-fields/object-list-field/object-list-field.component.ts","webpack:///src/app/shared/components/custom-fields/object-list-field/object-list-field.component.html","webpack:///src/app/shared/components/custom-fields/settings-field/settings-field.component.ts","webpack:///src/app/shared/components/custom-fields/settings-field/settings-field.component.html","webpack:///src/app/shared/components/custom-fields/system-exec-field/system-exec-field.component.ts","webpack:///src/app/shared/components/custom-fields/system-exec-field/system-exec-field.template.html","webpack:///src/app/shared/components/custom-fields/time-field/time-field.component.ts","webpack:///src/app/shared/components/custom-fields/time-field/time-field.component.html","webpack:///src/app/shared/components/debug-output/debug-output.component.ts","webpack:///src/app/shared/components/debug-output/debug-output.component.html","webpack:///src/app/shared/components/forms/application-form/application-form.component.ts","webpack:///src/app/shared/components/forms/application-form/application-form.component.html","webpack:///src/app/shared/components/forms/broker-form/broker-form.component.ts","webpack:///src/app/shared/components/forms/broker-form/broker-form.component.html","webpack:///src/app/shared/components/forms/domain-form/domain-form.component.ts","webpack:///src/app/shared/components/forms/domain-form/domain-form.component.html","webpack:///src/app/shared/components/forms/driver-form/driver-form.component.html","webpack:///src/app/shared/components/forms/driver-form/driver-form.component.ts","webpack:///src/app/shared/components/forms/ldap-source-form/ldap-source-form.component.ts","webpack:///src/app/shared/components/forms/ldap-source-form/ldap-source-form.component.html","webpack:///src/app/shared/components/forms/module-form/module-form.component.ts","webpack:///src/app/shared/components/forms/module-form/module-form.component.html","webpack:///src/app/shared/components/forms/oauth-source-form/oauth-source-form.component.ts","webpack:///src/app/shared/components/forms/oauth-source-form/oauth-source-form.component.html","webpack:///src/app/shared/components/forms/repository-form/repository-form.component.html","webpack:///src/app/shared/components/forms/repository-form/repository-form.component.ts","webpack:///src/app/shared/components/forms/saml-source-form/saml-source-form.component.ts","webpack:///src/app/shared/components/forms/saml-source-form/saml-source-form.component.html","webpack:///src/app/shared/components/forms/settings-form/settings-form.component.ts","webpack:///src/app/shared/components/forms/settings-form/settings-form.component.html","webpack:///src/app/shared/components/forms/system-form/system-form.component.ts","webpack:///src/app/shared/components/forms/system-form/system-form.component.html","webpack:///src/app/shared/components/forms/system-trigger-form/system-trigger-form.component.ts","webpack:///src/app/shared/components/forms/system-trigger-form/system-trigger-form.component.html","webpack:///src/app/shared/components/forms/trigger-action-form/trigger-action-form.component.ts","webpack:///src/app/shared/components/forms/trigger-action-form/trigger-action-form.component.html","webpack:///src/app/shared/components/forms/trigger-condition-form/comparison-form/comparison-form.component.ts","webpack:///src/app/shared/components/forms/trigger-condition-form/comparison-form/comparison-form.component.html","webpack:///src/app/shared/components/forms/trigger-condition-form/time-form/time-form.component.ts","webpack:///src/app/shared/components/forms/trigger-condition-form/time-form/time-form.component.html","webpack:///src/app/shared/components/forms/trigger-condition-form/trigger-condition-form.component.ts","webpack:///src/app/shared/components/forms/trigger-condition-form/trigger-condition-form.component.html","webpack:///src/app/shared/components/forms/trigger-form/trigger-form.component.ts","webpack:///src/app/shared/components/forms/trigger-form/trigger-form.component.html","webpack:///src/app/shared/components/forms/user-form/user-form.component.ts","webpack:///src/app/shared/components/forms/user-form/user-form.component.html","webpack:///src/app/shared/components/forms/zone-form/zone-form.component.html","webpack:///src/app/shared/components/forms/zone-form/zone-form.component.ts","webpack:///src/app/shared/components/icon/icon.component.ts","webpack:///src/app/shared/components/icon/icon.component.html","webpack:///src/app/shared/components/item-display/item-display.component.ts","webpack:///src/app/shared/components/item-display/item-display.template.html","webpack:///src/app/shared/components/login/forgot-pass-form/forgot-pass-form.component.ts","webpack:///src/app/shared/components/login/index.ts","webpack:///src/app/shared/components/login/login-form/login-form.component.ts","webpack:///src/app/shared/components/login/login-form/login-form.template.html","webpack:///src/app/shared/components/login/login.component.ts","webpack:///src/app/shared/components/login/login.template.html","webpack:///src/app/shared/components/login/register-form/register-form.component.ts","webpack:///src/app/shared/components/searchbar/searchbar.component.ts","webpack:///src/app/shared/components/searchbar/searchbar.template.html","webpack:///src/app/shared/components/sidebar/sidebar.component.ts","webpack:///src/app/shared/components/sidebar/sidebar.template.html","webpack:///src/app/shared/components/terminal/terminal.component.ts","webpack:///src/app/shared/components/terminal/terminal.component.html","webpack:///src/app/shared/globals/angular-animations.ts","webpack:///src/app/shared/globals/base.class.ts","webpack:///src/app/shared/globals/base.directive.ts","webpack:///src/app/shared/guards/authorised-admin.guard.ts","webpack:///src/app/shared/mocks/backend/domains.mock.ts","webpack:///src/app/shared/mocks/backend/drivers.mock.ts","webpack:///src/app/shared/mocks/backend/index.ts","webpack:///src/app/shared/mocks/backend/modules.mock.ts","webpack:///src/app/shared/mocks/backend/repositories.mock.ts","webpack:///src/app/shared/mocks/backend/settings.mock.ts","webpack:///src/app/shared/mocks/backend/systems.mock.ts","webpack:///src/app/shared/mocks/backend/triggers.mock.ts","webpack:///src/app/shared/mocks/backend/users.mock.ts","webpack:///src/app/shared/mocks/backend/zones.mock.ts","webpack:///src/app/shared/mocks/common.mock.ts","webpack:///src/app/shared/mocks/index.ts","webpack:///src/app/shared/mocks/system.mockup.ts","webpack:///src/app/shared/pipes/date-from.pipe.ts","webpack:///src/app/shared/pipes/driver-format.pipe.ts","webpack:///src/app/shared/pipes/format-list.pipe.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/utilities/api.utilities.ts","webpack:///src/app/shared/utilities/data/applications.utilities.ts","webpack:///src/app/shared/utilities/data/auth-sources.utilities.ts","webpack:///src/app/shared/utilities/data/brokers.utilities.ts","webpack:///src/app/shared/utilities/data/domains.utilities.ts","webpack:///src/app/shared/utilities/data/drivers.utilities.ts","webpack:///src/app/shared/utilities/data/modules.utilities.ts","webpack:///src/app/shared/utilities/data/repositories.utilities.ts","webpack:///src/app/shared/utilities/data/systems.utilities.ts","webpack:///src/app/shared/utilities/data/triggers.utilities.ts","webpack:///src/app/shared/utilities/data/users.utilities.ts","webpack:///src/app/shared/utilities/data/zones.utilites.ts","webpack:///src/app/shared/utilities/general.utilities.ts","webpack:///src/app/shared/utilities/validation.utilities.ts","webpack:///src/app/shell/components/global-search/global-search.component.ts","webpack:///src/app/shell/components/global-search/global-search.template.html","webpack:///src/app/shell/components/index.ts","webpack:///src/app/shell/components/sidebar-menu/sidebar-menu.component.ts","webpack:///src/app/shell/components/sidebar-menu/sidebar-menu.template.html","webpack:///src/app/shell/components/topbar-header/topbar-header.component.ts","webpack:///src/app/shell/components/topbar-header/topbar-header.template.html","webpack:///src/app/shell/index.ts","webpack:///src/app/shell/shell.component.ts","webpack:///src/app/shell/shell.template.html","webpack:///src/environments/environment.ts","webpack:///src/environments/version.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","loadChildren","m","AppModulesModule","AppDomainsModule","AppDriversModule","AppMetricsModule","AppSystemsModule","AppRepositoriesModule","AppTriggersModule","AppUsersModule","AppZonesModule","AppEngineModule","canLoad","redirectTo","AppRoutingModule","forRoot","useHash","imports","AppComponent","_service","title","selector","templateUrl","styleUrls","encapsulation","None","AppModule","provide","useClass","register","enabled","production","declarations","providers","bootstrap","AuthSourceModalComponent","_dialog","_data","event","source_types","name","auth_source","item","active_type","type","initialiseForm","data","authority_id","domain","form","markAllAsTouched","valid","loading","save","emit","reason","metadata","trigger","notifySuccess","is_new","close","err","notifyError","JSON","stringify","response","message","BulkItemModalComponent","_dialog_ref","flow_step","item_list","data_list","template","available_fields","getAvailableFields","generateTemplate","is_mapped","console","log","length","Resource","constr","map","list","i","split","join","description","email","capacity","features","bookable","installed_ui_devices","support_url","modules","zones","map_id","module_data","toJSON","driver_id","control_system_id","ip","tls","udp","port","makebreak","uri","custom_name","role","Device","notes","ignore_connected","module_name","Logic","default_uri","default_port","settings","settings_string","class_name","repository_id","file_name","commit","phone","country","image","login_name","staff_id","first_name","last_name","triggers","parent_id","display_name","tags","count","location","service","_name","CsvUploadComponent","target","element","file","files","reader","FileReader","readAsText","addEventListener","evt","processCSVData","srcElement","result","value","_","ListComponent","MatchFieldsComponent","field_list","mapping_done","previous","source_fields","field_mapping","changes","Object","toLowerCase","forEach","field","find","mapped_list","mapped_item","back","saveMapping","StatusListComponent","ChangelogModalComponent","changelog","CONFIRM_METADATA","height","width","maxHeight","maxWidth","ConfirmModalComponent","content","action","icon","ItemCreateUpdateModalComponent","details","external_save","subscriptions","sub","index","subscription","edit","generateFormData","Hotkeys","listen","submit","disableClose","controls","newSettings","setting_string","new_settings","encryption_level","storePendingChange","readonly","MetadataDetailsModalComponent","validator","setValue","updateDetails","OVERLAYS","SharedOverlaysModule","SelectItemModalComponent","service_name","SystemLogModalComponent","sys_id","SystemLogs","query","limit","logs","sort","a","b","created","TriggerActionModalComponent","action_type","method_call","updateMailers","updateFunctions","clearPendingChanges","mailers","actions","new_mailer","emails","old_mailer","findIndex","a_mailer","splice","push","functions","old_function","fn","system","TriggerConditionModalComponent","condition","condition_type","updateComparisons","updateTimeDependents","old_values","conditions","comparisons","new_value","left","operator","right","old_value","cmp","updated_conditions","time_dependents","time_type","time","toFixed","cron","ViewModuleStateModalComponent","device_classes","generateModuleBindings","updateState","counter","devices","device","class_parts","Systems","state","pre_state","parse","key","undefined","ViewResponseModalComponent","ApplicationService","_app_ref","_zone","_title","_router","_cache","_settings","_composer","_analytics","_hotkeys","_engine_comments","_engine_logs","_engine_search","_engine_stats","_engine_system_logs","_users","_snackbar","_route_trail","_subjects","_observers","parent","set","isStable","pipe","subscribe","run","_stable","setupCache","waitForSettings","get","on_action","duration","snackbar_ref","open","panelClass","afterDismissed","unsub","dismiss","onAction","msg","debug","notify","error","warn","info","args","stream","force","route","Array","url","navigate","queryParams","pop","getValue","asObservable","next","initialised","setup","init","setupComposer","setting","load","dsn","auth","authority","sentry_dsn","loadActiveUser","_initialised","window","application","protocol","host","hostname","use_domain","origin","mock","login_locally","search","indexOf","config","scope","auth_uri","token_uri","redirect_uri","handle_login","local_login","Users","isEnabled","activateUpdate","available","current","hash","setInterval","checkForUpdate","notifyInfo","reload","applications","oauth_sources","saml_sources","ldap_sources","domains","clusters","drivers","repositories","systems","app_name","title_suffix","setTitle","getTitle","api_endpoint","providedIn","BaseAPIService","http","listing","_subscribers","_promises","_compare","_list_filter","_singular","_api_route","timeout","engine","endpoint","engine_endpoint","filterFn","reduce","query_params","update_list","cache","reject","d","process","results","new_item","updateList","prefill","form_data","post","analyticsEvent","task_name","post_data","_task","delay","stopPoll","_poll","show","interval","complete","put","removeItem","remove_ids","label","Analytics","raw_item","old_list","compareFn","new_list","mixed_list","found","BackofficeCommentsService","unsubscribe","fields","task","output_list","processReplies","cmt","comment","channel_id","user_id","user","master_id","reply_to_id","in_reply_to_id","replies","likes","other","dislikes","created_at","updated_at","q","cmt_list","BackofficeLogsService","suspected","persisted","installed_device","system_id","display","started","format","ended","ended_at","last_checked","BackofficeSearchService","rs","rj","BackofficeStatsService","period","period_name","histogram","start","period_start","BackofficeSystemLogsService","Logs","BackofficeUsersService","http_unauth","singular","can_create","can_edit","_filter_fn","predicate","filter","setUser","dark_mode","token","expiry","add","valueOf","localStorage","client_id","hashStr","setItem","headers","append","res","sessionStorage","clientId","authorise","status","logout","ref","componentInstance","ui_theme","getItem","matchMedia","matches","document","body","classList","remove","TERMINAL_COLOURS","verbose","warning","fatal","EngineDebugService","_events","_event_obs","_bound_modules","_module_names","realtime","debug_events","mod","mod_id","event_list","parts","options","sys","_enabled","ignore","level","toUpperCase","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","activeElement","tagName","mapKey","last_down","setKeyState","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","total","v","replace","key_list","non_meta","SentryService","originalError","SettingsService","api","local","session","_app_name","now","build","built","isSame","core_version","version","loadFromFile","loadStore","app","colors","shift","store","tries","BaseRootComponent","_route","paramMap","params","has","loading_item","decodeURIComponent","loadItem","setActiveItem","show_sidebar","newItem","editItem","deleteItem","toggleSidebar","relativeTo","tab","queryParamsHandling","changeEvents","loadValues","loadSettings","EngineSettings","styles","ContextMenuComponent","_element","offset_x","offset_y","position","top","clientY","clientX","openMenu","updatePosition","setTimeout","container","nativeElement","box","getBoundingClientRect","innerHeight","bottom","innerWidth","DateFieldComponent","_locale","_from","offset","date_pipe","date","_onChange","show_tooltip","_onTouch","disabled","_trigger","closeMenu","startOf","_to","endOf","transform","toDate","menuOpen","useExisting","multi","openDatePicker","$event","stopPropagation","closeDatePicker","ItemSearchFieldComponent","min_length","search$","search_results$","search_str","match","exclude","active_item","resetSearchString","detail","Service","ObjectListFieldComponent","active_list","SettingsFieldComponent","lang","createEditor","editor","updateOptions","readOnly","language","resize","resizeEditor","dispose","monaco","create","fontFamily","lineNumbers","roundedSelection","scrollBeyondLastLine","theme","onDidChangeModelContent","SystemExecFieldComponent","executable","methods","param_list","loadModules","Modules","running","active_module","unshift","functionList","setMethod","active_method","checkFields","fields_valid","arg","arg_list","toArray","active_field","field_pos","selectionEnd","field_value","function_value","right_arrow","last_location","el","focus","selectionStart","backspace","left_arrow","processArguments","method","execute","viewDetails","order","arity","len","Math","abs","argument_list","a_method","TimeFieldComponent","step","no_past_times","show_select","_time_options","generateAvailableTimes","hour","minute","select_field","openedChange","datestamp","show_past","blocks","isAfter","ceil","end","isBefore","option","localeCompare","DebugOutputComponent","_renderer","show_content","events","terminal_string","clearEvents","dir","_resize_start","MouseEvent","resizeMove","_content_el","point","diff","x","y","is_listening","animations","ApplicationFormComponent","BrokerFormComponent","auth_types","Certificate","NoAuth","UserPassword","separators","filter_list","input","filters","trim","existing_filter","DomainFormComponent","DriverFormComponent","role_types","SSH","Websocket","driver_list","commit_list","repo$","driver$","driver_list$","repo_id","loading_drivers","Repositories","listDrivers","driver","commit_list$","loading_commits","listCommits","base_repo","base_commit","subject","extra","subtract","fromNow","initDriver","repo","promise","toPromise","base_driver","driverDetails","descriptive_name","generic_name","tcp_port","udp_port","uri_base","default_settings","discovery_service","updateDriverList","updateCommitList","LdapSourceFormComponent","auth_methods","ModuleFormComponent","Drivers","OauthSourceFormComponent","token_methods","auth_schemes","info_mapping_list","info_mappings","Engine","Remote","mappings","pair","RepositoryFormComponent","repo_types","Driver","Interface","loadCommits","is_edit","can_change_commit","commits","active_commit","commit_hash","repo_type","SamlSourceFormComponent","attribute_statement_mappings","runtime_param_list","attribute_statements","idp_sso_target_url_runtime_params","mapping","SettingsFormComponent","saving","used_settings","available_levels","levels","Support","Admin","saveAll","clearChanges","merge","NeverDisplay","processSettings","initForm","has_errors","promises","all","edited_count","settings0","settings1","settings2","settings3","settings4","valueChanges","processed_settings","processSetting","generateMergedSettings","is_admin","is_support","obj","local_settings","remote_settings","merge_settings","merged_settings","concat","strict","sys_admin","support","errors","active","SystemFormComponent","encryption_levels","feature_list","existing_feature","Zones","SystemTriggerFormComponent","TriggerActionFormComponent","new_email","action_types","email_list","chip_list","errorState","TriggerConditionComparisonFormComponent","module_list","left_status_variables","right_status_variables","rhs_type","left_side","right_side","right_var_type","compare_types","EQ","NEQ","GT","GTE","LT","LTE","AND","OR","XOR","loadSystemModules","side","mod_name","var_map","connected","addExistingStatusVariables","mod_list","module_class","addExistingModules","loadSystemStatusVariables","TriggerConditionTimeFormComponent","repeat_period","cron_period","minutes_in_hour","hours_in_day","days_of_week","fill","day","days_of_month","months_of_year","month","cron_minute","cron_hour","cron_hour_period","cron_day","cron_date","cron_month","is_cron","loadCronTab","current_cron","day_of_week","cron_str","cron_tab","TriggerConditionFormComponent","condition_types","TriggerFormComponent","UserFormComponent","ZoneFormComponent","zone","updateZone","tag_list","existing_tag","parent_zone","IconComponent","ItemDisplayComponent","has_change","tabs","changeTab","direction","execCommand","content_el","scrollTop","newFromItem","duplicateItem","exportAsCSV","ForgotPassFormComponent","LOGIN_COMPONENTS","forgot","submitted","LoginFormComponent","LoginComponent","remembered_name","login_form","username","password","remember","env","logo","form_values","login","setErrors","invalid","RegisterFormComponent","SearchbarComponent","dictation","clearable","placeholder","filterChange","blur","model","win","speech","SpeechRecognition","webkitSpeechRecognition","recognition","stop","dictate","self","continuous","interimResults","onresult","transcript","onerror","checkLimitations","substr","focusInput","SidebarComponent","heading","searchChange","items","replaceActiveItem","changeSelected","atBottom","is_initialised","last_check","previousValue","currentValue","searching","is_stale","viewport","getRenderedRange","getDataLength","last_total","scrollIntoView","constructor","elementRef","TerminalComponent","terminal","ngOnDestroy","background","terminal_element","resizeTerminal","updateTerminalContents","clear","container_el","font_size","getOption","line_height","floor","new_content","lines","line","writeln","scrollToBottom","ANIMATION_SHOW_ENTER_LEAVE","opacity","ANIMATION_SHOW_CONTRACT_EXPAND","ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR","BaseClass","_timers","_intervals","_subscriptions","Function","clearTimeout","clearInterval","BaseDirective","hasOwnProperty","AuthorisedAdminGuard","can_activate","segments","can_load","FILTER_FN","DOMAIN_DATA","control","handlers","callback","includes","REPO_DATA","folder_name","DRIVER_LIST","COMMIT_LIST","random","author","route_params","SETTINGS_DATA","handle_items_fn","s","obs","zone_id","module_id","TRIGGER_DATA","PREDFINED_USERS","USER_DATA","firstName","lastName","CURRENT_USER","DOMAIN","API","ENDPOINT_SUBJECTS","ENDPOINT_OBSERVABLES","AVAILABLE_CHARS","generateID","chars","listenToHandlerChanges","endpointData","generateBasicHandlers","an_item","old_item","systemData","System","Demo","volume","mute","views","$play","$stop","$volume","$mute","$state","initMessages","backend","messages","Slack","threads","text","ts","DateFromPipe","hours","days","months","years","DriverFormatPipe","FormatListPipe","FORM_COMPONENTS","COMPONENTS","PIPES","ENTRY_COMPONENT","MATERIAL_MODULES","SharedContentModule","forChild","toQueryString","str","calculateModuleIndex","modules_with_class","mod_class","max","generateApplicationFormFields","required","scopes","skip_authorization","generateOAuthSourceForm","client_secret","site","authorize_url","token_method","auth_scheme","token_url","raw_info_url","generateSAMLSourceForm","issuer","idp_sso_target_url","name_identifier_format","assertion_consumer_service_url","request_attributes","uid_attribute","idp_cert","idp_cert_fingerprint","attribute_service_name","idp_slo_target_url","slo_default_relay_state","generateLDAPSourceForm","min","auth_method","uid","base","bind_dn","generateBrokerFormFields","broker","auth_type","certificate","secret","setValidators","generateDomainFormFields","dom","login_url","logout_url","internals","generateDriverFormFields","generateModuleFormFields","resetModuleFormValidators","pattern","generateRepositoryFormFields","repository","validateYAML","yaml","URL_PATTERN","generateSystemsFormFields","generateTriggerFormFields","enable_webhook","generateTriggerSettingsFormFields","triggered","activated_count","important","validateCompare","generateTriggerConditionForm","validateEmailList","generateTriggerActionForm","validateMatch","group","generateUserFormFields","confirm_password","updateValueAndValidity","generateZoneFormFields","getItemWithKeys","isMobileModule","r","navigator","userAgent","isMobileSafari","agent","isAndroidChrome","randomInt","padZero","toString","unique","array","humaniseDuration","short","h","filterList","f","word","regex","RegExp","match_count","match_index","matched","changed","tokens","k","matchToHighlight","timeToDate","mergeYAMLSettings","dest","source","dest_obj","source_obj","merged_obj","indent","timeFormatString","is24HourTime","Date","localeString","toLocaleTimeString","numberToPosition","num","mod_ten","copyToClipboard","createElement","setAttribute","style","appendChild","selected","getSelection","rangeCount","getRangeAt","select","removeChild","removeAllRanges","addRange","csvToJson","csv","seperator","part","jsonToCsv","json","ignore_keys","valid_keys","downloadFile","filename","contents","encodeURIComponent","click","eventToPoint","touches","validateIpAddress","ctrl","test","validateURI","validateURL","validateJSONString","GlobalSearchComponent","route_map","query_string","queryEndpoints","apply","itemType","afterNavigate","change","results_list","query_str","list_el","scrollHeight","clientHeight","loadMoreItems","SHELL_COMPONENTS","SidebarMenuComponent","showChange","menu_items","metrics","needs_role","new_index","TopbarHeaderComponent","show_menu_change","bulk","show_menu","toggleMenu","newSystem","newZone","newDriver","newModule","newUser","APP_COMPONENTS","APP_ENTRY_COMPONENTS","AppShellComponent","year","environment","VERSION","bootstrapModule"],"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AAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAA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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AppShellComponent } from './shell/shell.component';\nimport { AuthorisedAdminGuard } from './shared/guards/authorised-admin.guard';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AppShellComponent,\n        children: [\n            {\n                path: 'modules',\n                loadChildren: () =>\n                    import('./shell/modules/modules.module').then(m => m.AppModulesModule)\n            },\n            {\n                path: 'domains',\n                loadChildren: () =>\n                    import('./shell/domains/domains.module').then(m => m.AppDomainsModule)\n            },\n            {\n                path: 'drivers',\n                loadChildren: () =>\n                    import('./shell/drivers/drivers.module').then(m => m.AppDriversModule)\n            },\n            {\n                path: 'metrics',\n                loadChildren: () =>\n                    import('./shell/metrics/metrics.module').then(m => m.AppMetricsModule)\n            },\n            {\n                path: 'systems',\n                loadChildren: () =>\n                    import('./shell/systems/systems.module').then(m => m.AppSystemsModule)\n            },\n            {\n                path: 'repositories',\n                loadChildren: () =>\n                    import('./shell/repositories/repositories.module').then(\n                        m => m.AppRepositoriesModule\n                    )\n            },\n            {\n                path: 'triggers',\n                loadChildren: () =>\n                    import('./shell/triggers/triggers.module').then(m => m.AppTriggersModule)\n            },\n            {\n                path: 'users',\n                loadChildren: () => import('./shell/users/users.module').then(m => m.AppUsersModule)\n            },\n            {\n                path: 'zones',\n                loadChildren: () => import('./shell/zones/zones.module').then(m => m.AppZonesModule)\n            },\n            {\n                path: 'admin',\n                loadChildren: () =>\n                    import('./shell/engine/engine.module').then(m => m.AppEngineModule),\n                canLoad: [AuthorisedAdminGuard]\n            },\n            { path: '**', redirectTo: 'systems' }\n        ]\n    },\n    { path: '**', redirectTo: 'systems' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ApplicationService } from './services/app.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./styles/app.component.scss', './styles/custom-element.styles.scss', './styles/native-element.styles.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent implements OnInit {\n\n    constructor(private _service: ApplicationService) {\n\n    }\n\n    public ngOnInit(): void {\n        this._service.title = 'Loading...';\n    }\n}\n","<div class=\"app\">\n    <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { FormsModule } from '@angular/forms';\n\nimport { AGoogleAnalyticsModule } from '@acaprojects/ngx-google-analytics';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { environment } from '../environments/environment';\n\nimport { SharedOverlaysModule } from './overlays/overlays.module';\nimport { SharedContentModule } from './shared/shared.module';\nimport { SentryService } from './services/sentry.service';\n\nimport { APP_COMPONENTS } from './shell';\n\nimport './shared/mocks';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ...APP_COMPONENTS\n\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n        HttpClientModule,\n        FormsModule,\n        AGoogleAnalyticsModule,\n        SharedOverlaysModule,\n        SharedContentModule\n    ],\n    providers: [{ provide: ErrorHandler, useClass: SentryService }],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\nimport {\n    EngineDomain,\n    EngineOAuthSource,\n    EngineLDAPSource,\n    EngineSAMLSource\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    generateOAuthSourceForm,\n    generateLDAPSourceForm,\n    generateSAMLSourceForm\n} from 'src/app/shared/utilities/data/auth-sources.utilities';\n\nexport interface AuthSourceModalData {\n    /** Domain the auth source is associated with */\n    domain: EngineDomain;\n    /** Item to add/update the trigger on */\n    auth_source?: EngineOAuthSource | EngineLDAPSource | EngineSAMLSource;\n}\n\nexport type AuthSourceTypes = 'oauth' | 'saml' | 'ldap';\n\n@Component({\n    selector: 'app-auth-source-modal',\n    templateUrl: './auth-source-modal.component.html',\n    styleUrls: ['./auth-source-modal.component.scss']\n})\nexport class AuthSourceModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether actions are loading */\n    public loading: boolean;\n    /** Form fields for trigger condition */\n    public form: FormGroup;\n    /** Item */\n    public item: EngineOAuthSource | EngineLDAPSource | EngineSAMLSource;\n    /** List of available authentication sources */\n    public source_types: Identity[] = [\n        { id: 'oauth', name: 'OAuth' },\n        { id: 'ldap', name: 'LDAP' },\n        { id: 'saml', name: 'SAML2' }\n    ];\n\n    public active_type: AuthSourceTypes;\n\n    /** Whether the triggers is new or not */\n    public get is_new(): boolean {\n        return !this._data.auth_source;\n    }\n\n    public get type(): AuthSourceTypes {\n        return this.item instanceof EngineSAMLSource\n            ? 'saml'\n            : this.item instanceof EngineLDAPSource\n            ? 'ldap'\n            : 'oauth';\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<AuthSourceModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: AuthSourceModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        if (this._data.auth_source) {\n            this.item = this._data.auth_source;\n            this.active_type = this.type;\n        }\n        this.initialiseForm();\n    }\n\n    /**\n     * Set the type of auth source to create\n     * @param type Type of auth source\n     */\n    public setType(type: AuthSourceTypes) {\n        const data = { authority_id: this._data.domain.id };\n        switch (type) {\n            case 'saml':\n                this.item = new EngineSAMLSource(data);\n                break;\n            case 'ldap':\n                this.item = new EngineLDAPSource(data);\n                break;\n            default:\n                this.item = new EngineOAuthSource(data);\n                break;\n        }\n        this.initialiseForm();\n    }\n\n    /**\n     * Create item if new or update if exsiting\n     */\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        this.loading = true;\n        (this.item as any).save().then(\n            item => {\n                this.event.emit({ reason: 'done', metadata: { trigger: item } });\n                this._service.notifySuccess(\n                    `Successfully ${this.is_new ? 'added' : 'updated'} auth source`\n                );\n                this._dialog.close();\n            },\n            err => {\n                this.loading = false;\n                this._service.notifyError(\n                    `Error ${\n                        this.is_new ? 'adding' : 'updating'\n                    } auth source. Error: ${JSON.stringify(err.response || err.message || err)}`\n                );\n            }\n        );\n    }\n\n    /**\n     * Generate the form fields for the active item type\n     */\n    private initialiseForm() {\n        if (!this.item) {\n            return;\n        }\n        if (this.item instanceof EngineOAuthSource) {\n            this.form = generateOAuthSourceForm(this.item).form;\n        } else if (this.item instanceof EngineSAMLSource) {\n            this.form = generateSAMLSourceForm(this.item).form;\n        } else if (this.item instanceof EngineLDAPSource) {\n            this.form = generateLDAPSourceForm(this.item).form;\n        }\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{!is_new ? 'Edit' : 'New'}} Auth Source</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"field type\" *ngIf=\"is_new\">\n            <label for=\"type\">Auth Source Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" [(ngModel)]=\"active_type\" (ngModelChange)=\"setType($event)\" placeholder=\"Select auth type\">\n                    <mat-option *ngFor=\"let type of source_types\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container *ngIf=\"item\">\n            <ng-container [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'saml'\">\n                    <saml-source-form [form]=\"form\"></saml-source-form>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'ldap'\">\n                    <ldap-source-form [form]=\"form\"></ldap-source-form>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <oauth-source-form [form]=\"form\"></oauth-source-form>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"button\" [disabled]=\"!active_type\" (tapped)=\"save()\">\n        {{ is_new ? 'Save' : 'Add' }}\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject, Type } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport {\n    EngineResource,\n    SYSTEM_MUTABLE_FIELDS,\n    EngineSystem,\n    MODULE_MUTABLE_FIELDS,\n    EngineModule,\n    DRIVER_MUTABLE_FIELDS,\n    EngineDriver,\n    USER_MUTABLE_FIELDS,\n    EngineUser,\n    ZONE_MUTABLE_FIELDS,\n    EngineZone,\n    EngineDriverRole\n} from '@placeos/ts-client';\nimport { HashMap, EngineServiceLike, Identity } from 'src/app/shared/utilities/types.utilities';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\n\nexport interface BulkItemModalData<T = EngineResource<any>> {\n    constr: Type<T>;\n    service: EngineServiceLike;\n}\n\n@Component({\n    selector: 'app-bulk-item-modal',\n    templateUrl: './bulk-item-modal.component.html',\n    styleUrls: ['./bulk-item-modal.component.scss'],\n})\nexport class BulkItemModalComponent<T = EngineResource<any>> {\n    /** Current step in the bulk add flow */\n    public flow_step: '' | 'match-fields' | 'list' | 'status' = '';\n    /** List of items to bulk add */\n    public item_list: T[] = [];\n    /** List of raw data to use for bulk add */\n    public data_list: HashMap[] = [];\n    /** Whether requests are being processed */\n    public loading: boolean;\n    /** Template data for use */\n    public template: HashMap[] = [];\n\n    public available_fields: Identity[] = [];\n\n    public get type(): string {\n        return this._data.service._name;\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<BulkItemModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: BulkItemModalData<T>\n    ) {\n        this.available_fields = this.getAvailableFields();\n        this.template = this.generateTemplate();\n    }\n\n    /**\n     * Handle list data\n     * @param data List of data to process\n     */\n    public handleList(data: HashMap[], is_mapped: boolean = false): void {\n        console.log('Handle List');\n        if (data.length) {\n            if (is_mapped) {\n                console.log('To list:', data);\n                const Resource = this._data.constr;\n                this.item_list = data.map((item) => new Resource(item));\n                this.flow_step = 'list';\n            } else {\n                this.data_list = data;\n                this.flow_step = 'match-fields';\n            }\n        }\n    }\n\n    public showStatus() {\n        this.flow_step = 'status';\n    }\n\n    public done() {\n        this._dialog_ref.close();\n    }\n\n    private getAvailableFields(): Identity[] {\n        let list: readonly string[] = [];\n        switch (this._data.constr as any) {\n            case EngineSystem:\n                list = SYSTEM_MUTABLE_FIELDS;\n                break;\n            case EngineModule:\n                list = MODULE_MUTABLE_FIELDS;\n                break;\n            case EngineDriver:\n                list = DRIVER_MUTABLE_FIELDS;\n                break;\n            case EngineUser:\n                list = USER_MUTABLE_FIELDS;\n                break;\n            case EngineZone:\n                list = ZONE_MUTABLE_FIELDS;\n                break;\n        }\n        return unique(\n            list.map((i) => ({ id: i, name: i.split('_').join(' ') })),\n            'id'\n        );\n    }\n\n    private generateTemplate(): HashMap[] {\n        switch (this._data.constr as any) {\n            case EngineSystem:\n                return [new EngineSystem({\n                    name: 'A System',\n                    description: 'A description',\n                    email: 'system@place.tech',\n                    capacity: 10,\n                    features: 'vidConf',\n                    bookable: true,\n                    installed_ui_devices: 4,\n                    support_url: '/support/test',\n                    modules: ['mod-123'],\n                    zones: ['zone-123'],\n                    map_id: 'area-123',\n                    module_data: [{ id: 'mod-001', name: 'A Module' }],\n                }).toJSON()];\n            case EngineModule:\n                return [new EngineModule({\n                    name: 'A Module',\n                    driver_id: 'dep-001',\n                    control_system_id: 'sys-001',\n                    ip: '1.1.1.1',\n                    tls: false,\n                    udp: false,\n                    port: 32000,\n                    makebreak: false,\n                    uri: 'test.com',\n                    custom_name: 'mi-name',\n                    role: EngineDriverRole.Device,\n                    notes: 'Clone wars',\n                    ignore_connected: false,\n                }).toJSON()];\n            case EngineDriver:\n                return [new EngineDriver({\n                    name: 'A Driver',\n                    description: 'In a galaxy far far away...',\n                    module_name: 'SteamShip',\n                    role: EngineDriverRole.Logic,\n                    default_uri: 'Sometimes we default',\n                    default_port: 1234,\n                    ignore_connected: false,\n                    settings: { settings_string: '{ today: false, future: \\'Yeah!\\' }' },\n                    class_name: '::ACA::SolveProblem',\n                    repository_id: 'my-repo',\n                    file_name: 'fancy-driver.cr',\n                    commit: 'some-hash'\n                }).toJSON()];\n            case EngineUser:\n                return [new EngineUser({\n                    name: 'A User',\n                    authority_id: 'On who\\'s authority',\n                    email: 'jon@place.tech',\n                    phone: '+612000000000',\n                    country: 'Australia',\n                    image: '',\n                    metadata: 'there be none',\n                    login_name: 'elitedarklord',\n                    staff_id: 'PERSON_12345',\n                    first_name: 'Bob',\n                    last_name: 'Marley'\n                })];\n            case EngineZone:\n                return [new EngineZone({\n                    name: 'A Zone',\n                    description: 'In a galaxy far far away...',\n                    triggers: ['trig-001'],\n                    parent_id: 'zone-123',\n                    display_name: 'The Zone',\n                    tags: 'building,level,org',\n                    code: 'BLD-123',\n                    type: 'Client',\n                    count: 32,\n                    capacity: 2345,\n                    location: 'Somewhere close',\n                    map_id: 'a/url/to/my/map.svg'\n                })];\n        }\n    }\n}\n","<header>\n    <h3 mat-dialog-title>Bulk Add {{ type }}</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <div [ngSwitch]=\"flow_step\">\n            <div *ngSwitchCase=\"'status'\">\n                <bulk-item-status-list [list]=\"item_list\" (done)=\"done()\"></bulk-item-status-list>\n            </div>\n            <div *ngSwitchCase=\"'list'\">\n                <bulk-item-list [(list)]=\"item_list\" (save)=\"showStatus()\"></bulk-item-list>\n            </div>\n            <div *ngSwitchCase=\"'match-fields'\">\n                <bulk-item-match-fields\n                    [list]=\"data_list\"\n                    [field_list]=\"available_fields\"\n                    (mapping_done)=\"handleList($event, true)\"\n                    (previous)=\"flow_step = ''\"\n                ></bulk-item-match-fields>\n            </div>\n            <div *ngSwitchDefault>\n                <bulk-item-csv-upload [template]=\"template\" (list)=\"handleList($event)\"></bulk-item-csv-upload>\n            </div>\n        </div>\n    </main>\n</mat-dialog-content>\n","import { Component, EventEmitter, Output, Input } from '@angular/core';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { csvToJson, jsonToCsv, downloadFile } from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'bulk-item-csv-upload',\n    templateUrl: './csv-upload.component.html',\n    styleUrls: ['./csv-upload.component.scss'],\n})\nexport class CsvUploadComponent {\n    /** Data for the template CSV */\n    @Input() template: HashMap[] = [];\n    /** Emitter for changes to the data displayed */\n    @Output() public list = new EventEmitter<HashMap[]>();\n    /** Whether user has dragged item */\n    public dragging: boolean;\n    /** Whether CSV data is being processed */\n    public loading: boolean;\n\n    constructor(private _service: ApplicationService) {}\n\n    public loadCSVData(event: InputEvent) {\n        this.loading = true;\n        /* istanbul ignore else */\n        if (event.target) {\n            const element = event.target as HTMLInputElement;\n            const file = element.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    this.processCSVData((evt.srcElement as any).result);\n                    element.value = '';\n                });\n                reader.addEventListener('error', (_) => {\n                    this.loading = false;\n                    this._service.notifyError('Error reading file.');\n                });\n            }\n        }\n    }\n\n    public downloadTemplateCSV() {\n        downloadFile(\n            'bulk-upload.tsv',\n            jsonToCsv(this.template, ['module_list', 'settings', '_type', 'version'], '\\t')\n        );\n    }\n\n    private processCSVData(data: string) {\n        const list = csvToJson(data, '\\t') || [];\n        console.log('List:', list);\n        this.loading = false;\n        this.list.emit(list);\n    }\n}\n","<div\n    class=\"upload-box\"\n    *ngIf=\"!loading; else load_state\"\n    [class.hover]=\"dragging\"\n    (dragenter)=\"dragging = true\"\n    (dragleave)=\"dragging = false\"\n    (dragend)=\"dragging = false\"\n>\n    <app-icon [icon]=\"{ class: 'backoffice-upload' }\"></app-icon>\n    <div class=\"text\" i18n=\"uploadCSVAction\">Select or drop CSV file to begin</div>\n    <input type=\"file\" (change)=\"loadCSVData($event)\"/>\n</div>\n<div class=\"template\" *ngIf=\"template\">\n    <button mat-button (click)=\"downloadTemplateCSV()\">Download Template</button>\n</div>\n<ng-template #load_state>\n    <div class=\"load-state\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\" i81n=\"@@loadingCSV\">Process CSV data...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { EngineResource } from '@placeos/ts-client';\n\n@Component({\n    selector: 'bulk-item-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss'],\n})\nexport class ListComponent implements OnInit {\n    /** List of bulk items to add */\n    @Input() public list: EngineResource<any>;\n\n    constructor() {}\n\n    ngOnInit() {}\n}\n","import { Component, Input, SimpleChanges, EventEmitter, Output } from '@angular/core';\n\nimport { HashMap, Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'bulk-item-match-fields',\n    templateUrl: './match-fields.component.html',\n    styleUrls: ['./match-fields.component.scss'],\n})\nexport class MatchFieldsComponent {\n    /** List of bulk items to add */\n    @Input() public list: HashMap<any>[];\n    /** List of fields available for building new item */\n    @Input() public field_list: Identity[] = [];\n    /** Emitter for mapped changes to list */\n    @Output() public mapping_done = new EventEmitter<HashMap<any>[]>();\n    /** Emitter user want to return to previous step in flow */\n    @Output() public previous = new EventEmitter<void>();\n    /** List of fields available to be selected */\n    public source_fields: Identity[] = [];\n    /** Mapping of raw data fields ids to item fields ids */\n    public field_mapping: HashMap<string> = {};\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.list && this.list && this.list.length) {\n            this.source_fields = Object.keys(this.list[0]).map((i) => ({\n                id: i.toLowerCase().split(' ').join('_'),\n                name: i.split('_').join(' '),\n            }));\n            this.source_fields.forEach(field => {\n                if (this.field_list.find(i => i.id === field.id)) {\n                    this.field_mapping[`${field.id}`] = `${field.id}`;\n                }\n            });\n        }\n    }\n\n    /** Return to the previous step in the bulk upload flow */\n    public back(): void {\n        this.previous.emit();\n    }\n\n    /** Generated the mapped list of items and emit them */\n    public saveMapping(): void {\n        console.log('Mapping:', this.field_mapping);\n        const mapped_list = this.list.map(item => {\n            const mapped_item: any = {};\n            for (const field of this.field_list) {\n                const id = `${field.id}`;\n                mapped_item[id] = item[this.field_mapping[id]];\n            }\n            return mapped_item;\n        });\n        this.mapping_done.emit(mapped_list);\n    }\n}\n","<div class=\"field-list\">\n    <div class=\"field\" *ngFor=\"let field of field_list\">\n        <label [for]=\"field.id\">{{ field.id }}</label>\n        <div class=\"value\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select [name]=\"field.id\" [(ngModel)]=\"field_mapping[field.id]\" placeholder=\"Select field\">\n                    <mat-option *ngFor=\"let type of source_fields\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n</div>\n<div class=\"actions\">\n    <button mat-button class=\"inverse\" (tapped)=\"back()\">Back</button>\n    <button mat-button (click)=\"saveMapping()\">Continue</button>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { EngineResource } from '@placeos/ts-client';\n\n@Component({\n    selector: 'bulk-item-status-list',\n    templateUrl: './status-list.component.html',\n    styleUrls: ['./status-list.component.scss'],\n})\nexport class StatusListComponent implements OnInit {\n    /** List of bulk items to add */\n    @Input() public list: EngineResource<any>;\n\n    constructor() {}\n\n    ngOnInit() {}\n}\n","<p>status-list works!</p>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\nexport interface ChangelogModalData {\n    changelog: string;\n}\n\n@Component({\n    selector: 'changelog-modal',\n    templateUrl: './changelog-modal.template.html',\n    styleUrls: ['./changelog-modal.styles.scss']\n})\nexport class ChangelogModalComponent extends BaseDirective {\n    /** Whether the changelog is loading */\n    public loading: boolean;\n    /** Changelog Markdown */\n    public item: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: ChangelogModalData) {\n        super();\n    }\n\n    /** HTML string for rendering the change log */\n    public get changelog(): string {\n        return this._data.changelog || '';\n    }\n}\n","<header>\n    <h3 mat-dialog-title>Changelog</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div\n        class=\"body markdown\"\n        *ngIf=\"changelog; else empty_state\"\n        [innerHTML]=\"changelog | safe:'html'\"\n    ></div>\n    <ng-template #empty_state>\n        <div class=\"body\">\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <i class=\"backoffice-cross\"></i>\n                </div>\n                <div class=\"text\">No changelog</div>\n            </div>\n        </div>\n    </ng-template>\n</mat-dialog-content>\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon } from '../../shared/utilities/settings.interfaces';\nimport { DialogEvent } from '../../shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    action?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)'\n};\n\n@Component({\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./confirm-modal.component.scss']\n})\nexport class ConfirmModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public title: string;\n    /** Body of the confirm modal */\n    public content: string;\n    /** Display text on the confirm button */\n    public action: string;\n    /** Display icon properties */\n    public icon: ApplicationIcon;\n    /** Loading state */\n    public loading: string;\n\n    constructor(\n        private _dialog: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        const data = this._data;\n        if (data) {\n            this.title = data.title || 'Confirm';\n            this.content = data.content || 'Confirm';\n            this.action = data.action || 'Ok';\n            this.icon = data.icon;\n        }\n    }\n\n    /**\n     * User confirmation of the content of the modal\n     */\n    public accept() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ title || 'Confirm' }}</h3>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <app-icon [icon]=\"icon\"></app-icon>\n        <div class=\"content\">\n            <p [innerHTML]=\"content || 'Are you sure?'\"></p>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button name=\"accept\" (tapped)=\"accept()\">{{ action || 'Ok' }}</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring></a-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </div>\n</ng-template>\n","<header>\n    <h3 mat-dialog-title>{{ item && edit ? 'Edit' : 'New' }} {{ name }}</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <ng-container [ngSwitch]=\"item_type\">\n            <ng-container *ngSwitchCase=\"'repository'\">\n                <repository-form [form]=\"form\"></repository-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'trigger'\">\n                <trigger-form [form]=\"form\"></trigger-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'system-trigger'\">\n                <system-trigger-form [form]=\"form\"></system-trigger-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'application'\">\n                <application-form [form]=\"form\"></application-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'domain'\">\n                <domain-form [form]=\"form\"></domain-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'user'\">\n                <user-form [form]=\"form\"></user-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'driver'\">\n                <driver-form [form]=\"form\"></driver-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'zone'\">\n                <zone-form [form]=\"form\"></zone-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'module'\">\n                <module-form [form]=\"form\" [readonly]=\"readonly\"></module-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'broker'\">\n                <broker-form [form]=\"form\"></broker-form>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <system-form [form]=\"form\"></system-form>\n            </ng-container>\n        </ng-container>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"submit()\">{{ item ? 'Save' : 'Add' }} [S]</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject, EventEmitter, Output, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    EngineResource,\n    EngineSystem,\n    EngineModule,\n    EngineZone,\n    EngineDriver,\n    EngineUser,\n    EngineDomain,\n    EngineApplication,\n    EngineSettings,\n    EngineTrigger,\n    EngineRepository,\n    PlaceMQTTBroker,\n    EncryptionLevel\n} from '@placeos/ts-client';\nimport { FormGroup } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { DialogEvent, EngineServiceLike, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    generateSystemsFormFields,\n    FormDetails\n} from 'src/app/shared/utilities/data/systems.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { generateModuleFormFields } from 'src/app/shared/utilities/data/modules.utilities';\nimport { generateZoneFormFields } from 'src/app/shared/utilities/data/zones.utilites';\nimport { generateDriverFormFields } from 'src/app/shared/utilities/data/drivers.utilities';\nimport { generateUserFormFields } from 'src/app/shared/utilities/data/users.utilities';\nimport { generateDomainFormFields } from 'src/app/shared/utilities/data/domains.utilities';\nimport { generateApplicationFormFields } from 'src/app/shared/utilities/data/applications.utilities';\nimport {\n    generateTriggerFormFields,\n    generateTriggerSettingsFormFields\n} from 'src/app/shared/utilities/data/triggers.utilities';\nimport { generateRepositoryFormFields } from 'src/app/shared/utilities/data/repositories.utilities';\nimport { generateBrokerFormFields } from 'src/app/shared/utilities/data/brokers.utilities';\n\nexport interface CreateEditModalData<T extends Identity = any> {\n    /** Service associated with the item being created/edited */\n    service: EngineServiceLike;\n    /** Item being worked on */\n    item: T;\n    /** Form fields for item */\n    form?: any[];\n    /** Name of the type of item being worked on */\n    name?: string;\n    /** Whether parts of the form are readonly */\n    readonly?: string;\n    /** Whether saving the form details will be handled outside the modal */\n    external_save?: boolean;\n}\n\n@Component({\n    selector: 'item-modal',\n    templateUrl: './item-modal.component.html',\n    styleUrls: ['./item-modal.component.scss']\n})\nexport class ItemCreateUpdateModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether the item is being editing */\n    public edit: boolean;\n    /** Item to edit */\n    public item: EngineResource<any>;\n    /** Saved version of the item */\n    public result: any;\n    /** List of the form fields needed for the item */\n    public form: FormGroup;\n    /** Loading status for the item request is being processed */\n    public loading: string;\n\n    public get name(): string {\n        return this._data.service.name || this._data.service._name;\n    }\n\n    public get readonly(): boolean {\n        return !!this._data.readonly;\n    }\n\n    public get item_type(): string {\n        if (this.item instanceof EngineSystem) {\n            return 'system';\n        } else if (this.item instanceof EngineModule) {\n            return 'module';\n        } else if (this.item instanceof EngineZone) {\n            return 'zone';\n        } else if (this.item instanceof EngineDriver) {\n            return 'driver';\n        } else if (this.item instanceof EngineUser) {\n            return 'user';\n        } else if (this.item instanceof EngineDomain) {\n            return 'domain';\n        } else if (this.item instanceof EngineApplication) {\n            return 'application';\n        } else if (this.item instanceof EngineTrigger && this._data.external_save) {\n            return 'system-trigger';\n        } else if (this.item instanceof EngineTrigger) {\n            return 'trigger';\n        } else if (this.item instanceof EngineRepository) {\n            return 'repository';\n        } else if (this.item instanceof PlaceMQTTBroker) {\n            return 'broker';\n        }\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ItemCreateUpdateModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: CreateEditModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    /**\n     * Generate the form fields for the item being handled\n     */\n    public generateFormData(): FormGroup {\n        let details: FormDetails = null;\n        if (this.item instanceof EngineSystem) {\n            details = generateSystemsFormFields(this.item);\n        } else if (this.item instanceof EngineModule) {\n            details = generateModuleFormFields(this.item);\n        } else if (this.item instanceof EngineZone) {\n            details = generateZoneFormFields(this.item);\n        } else if (this.item instanceof EngineDriver) {\n            details = generateDriverFormFields(this.item);\n        } else if (this.item instanceof EngineUser) {\n            details = generateUserFormFields(this.item);\n        } else if (this.item instanceof EngineDomain) {\n            details = generateDomainFormFields(this.item);\n        } else if (this.item instanceof EngineApplication) {\n            details = generateApplicationFormFields(this.item);\n        } else if (this.item instanceof EngineTrigger && this._data.external_save) {\n            details = generateTriggerSettingsFormFields(this.item);\n        } else if (this.item instanceof EngineTrigger) {\n            details = generateTriggerFormFields(this.item);\n        } else if (this.item instanceof EngineRepository) {\n            details = generateRepositoryFormFields(this.item);\n        } else if (this.item instanceof PlaceMQTTBroker) {\n            details = generateBrokerFormFields(this.item);\n        }\n        if (details) {\n            details.subscriptions.forEach((sub, index) =>\n                this.subscription(`form_field_${index}`, sub)\n            );\n            return details.form;\n        }\n        return new FormGroup({});\n    }\n\n    public ngOnInit(): void {\n        this.item = this._data.item;\n        this.edit = !!this._data.item.id;\n        this.form = this.generateFormData();\n        this.subscription(\n            'delete_item',\n            this._service.Hotkeys.listen(['KeyS'], () => this.submit())\n        );\n    }\n\n    /**\n     * Save changes and create item if it does not exist\n     */\n    public submit() {\n        this.form.markAllAsTouched();\n        if (this.item && this.form.valid) {\n            this.loading = `${this.item.id ? 'Updating' : 'Creating'} ${this.name}...`;\n            this._dialog_ref.disableClose = true;\n            if (this._data.external_save) {\n                this.event.emit({ reason: 'action', metadata: this.form.value });\n                return;\n            }\n            this.item.save().then(\n                item => {\n                    this.result = item;\n                    this._dialog_ref.disableClose = false;\n                    this.event.emit({ reason: 'done', metadata: { item } });\n                    this._service.notifySuccess(\n                        `Successfully ${this.item.id ? 'updated' : 'added'} ${this.name}`\n                    );\n                    if (!this.form.value.id && this.form.controls.settings) {\n                        this.newSettings(item, this.form.controls.settings.value).then(() =>\n                            this._dialog_ref.close()\n                        );\n                    } else {\n                        this._dialog_ref.close();\n                    }\n                },\n                err => {\n                    this.loading = null;\n                    this._dialog_ref.disableClose = false;\n                    this._service.notifyError(\n                        `Error ${this.item.id ? 'editing' : 'adding new'} ${\n                            this.name\n                        }. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        }\n    }\n\n    /**\n     * Save initial settings for resources\n     */\n    private async newSettings(item: EngineResource<any>, setting_string: string) {\n        const new_settings = new EngineSettings({\n            parent_id: item.id,\n            setting_string: '',\n            encryption_level: EncryptionLevel.None\n        });\n        new_settings.storePendingChange('settings_string', setting_string);\n        const settings = await new_settings.save().catch(err => {\n            this.loading = null;\n            this._service.notifyError(\n                `Error saving settings for ${item.name || item.id}. Error: ${JSON.stringify(err.response || err.message || err)}`\n            );\n        });\n        (item as any).settings[EncryptionLevel.None] = settings;\n    }\n\n    /**\n     * Close the modal\n     */\n    public close() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nexport interface MetadataDetailsModalData {\n    form: FormGroup;\n}\n\n@Component({\n    selector: 'app-metadata-details-modal',\n    templateUrl: './metadata-details-modal.component.html',\n    styleUrls: ['./metadata-details-modal.component.scss']\n})\nexport class MetadataDetailsModalComponent implements OnInit {\n    public form: FormGroup;\n\n    constructor(\n        private _dialog_ref: MatDialogRef<MetadataDetailsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: MetadataDetailsModalData\n    ) {}\n\n    ngOnInit() {\n        this.form = new FormGroup({\n            name: new FormControl(\n                this._data.form.controls.name.value,\n                this._data.form.controls.name.validator\n            ),\n            description: new FormControl(this._data.form.controls.description.value)\n        });\n    }\n\n    public updateDetails() {\n        this._data.form.controls.name.setValue(this.form.controls.name.value);\n        this._data.form.controls.description.setValue(this.form.controls.description.value);\n        this._dialog_ref.close();\n    }\n}\n","<header>\n    <div class=\"heading\">Update metadata details</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"property-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"property-name\"\n                    placeholder=\"Property Name\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\">{{\n                    form.controls.name.errors.name\n                        ? 'Property name must be unique'\n                        : 'Property name is required'\n                }}</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button [disabled]=\"!form.controls.name.valid\" mat-button (tapped)=\"updateDetails()\">\n            Update\n        </button>\n    </footer>\n</mat-dialog-actions>\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedContentModule } from '../shared/shared.module';\n\nimport { ConfirmModalComponent } from './confirm-modal/confirm-modal.component';\nimport { ChangelogModalComponent } from './changelog-modal/changelog-modal.component';\nimport { ItemCreateUpdateModalComponent } from './item-modal/item-modal.component';\nimport { SelectItemModalComponent } from './select-item-modal/select-item-modal.component';\nimport { SystemLogModalComponent } from './system-log-modal/system-log-modal.component';\nimport { TriggerActionModalComponent } from './trigger-action-modal/trigger-action-modal.component';\nimport { TriggerConditionModalComponent } from './trigger-condition-modal/trigger-condition-modal.component';\nimport { ViewModuleStateModalComponent } from './view-module-state/view-module-state.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthSourceModalComponent } from './auth-source-modal/auth-source-modal.component';\nimport { ViewResponseModalComponent } from './view-response-modal/view-response-modal.component';\nimport { MetadataDetailsModalComponent } from './metadata-details-modal/metadata-details-modal.component';\nimport { BulkItemModalComponent } from './bulk-item-modal/bulk-item-modal.component';\nimport { CsvUploadComponent } from './bulk-item-modal/csv-upload/csv-upload.component';\nimport { MatchFieldsComponent } from './bulk-item-modal/match-fields/match-fields.component';\nimport { ListComponent } from './bulk-item-modal/list/list.component';\nimport { StatusListComponent } from './bulk-item-modal/status-list/status-list.component';\n\n\nconst OVERLAYS: Type<any>[] = [\n    ConfirmModalComponent,\n    ChangelogModalComponent,\n    ItemCreateUpdateModalComponent,\n    SelectItemModalComponent,\n    SystemLogModalComponent,\n    TriggerActionModalComponent,\n    TriggerConditionModalComponent,\n    ViewModuleStateModalComponent,\n    AuthSourceModalComponent,\n    ViewResponseModalComponent,\n    MetadataDetailsModalComponent,\n    BulkItemModalComponent,\n];\n\n@NgModule({\n    declarations: [\n        ...OVERLAYS,\n        CsvUploadComponent,\n        MatchFieldsComponent,\n        ListComponent,\n        StatusListComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SharedContentModule\n    ],\n    exports: [\n        ...OVERLAYS\n    ]\n})\nexport class SharedOverlaysModule {}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nexport interface SelectItemModalData {\n    service_name: string;\n}\n\n@Component({\n    selector: 'select-item-modal',\n    templateUrl: './select-item-modal.component.html',\n    styleUrls: ['./select-item-modal.component.scss']\n})\nexport class SelectItemModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether the item is being editing */\n    public edit: boolean;\n    /** Item to edit */\n    public item: any;\n    /** Whether the item request is being processed */\n    public loading: boolean;\n\n    constructor(\n        private _dialog: MatDialogRef<SelectItemModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: SelectItemModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public get name(): string {\n        return this.service.name || this.service._name;\n    }\n\n    public get service() {\n        return this._service[this._data.service_name];\n    }\n\n    public ngOnInit(): void {\n        if (!this.service) {\n            this._dialog.close();\n        }\n    }\n\n    public submit() {\n        this.loading = true;\n        this.event.emit({ reason: 'action', metadata: this.item });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>Add {{ name }}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"content\">\n            <item-search-field [service]=\"service\" [(ngModel)]=\"item\"></item-search-field>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"submit()\" [disabled]=\"!item\">Add</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"rgba(0,0,0, .54)\"></a-spinner>\n        </div>\n        <div class=\"text\">Processing request...</div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { IEngineLogEntry } from 'src/app/services/data/logs.service';\n\nexport interface SystemLogModalData {\n    /** ID of the system to show the logs for */\n    sys_id: string;\n}\n\n@Component({\n    selector: 'system-log-modal',\n    templateUrl: './system-log-modal.component.html',\n    styleUrls: ['./system-log-modal.component.scss']\n})\nexport class SystemLogModalComponent extends BaseDirective implements OnInit {\n    /** ID of the system to get logs for */\n    public id: string;\n    /** List of the available log entries for the set system */\n    public logs: IEngineLogEntry[];\n    /** Whether the system's logs are loading */\n    public loading: boolean;\n    /**  */\n    public name: string;\n    /** Whether the modal is closing */\n    public closing: boolean;\n\n    constructor(\n        private _dialog: MatDialogRef<SystemLogModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: SystemLogModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.id = this._data.sys_id;\n        if (this.id) {\n            this.loading = true;\n            this._service.SystemLogs.query({ limit: 500, id: this.id }).then(\n                (list: IEngineLogEntry[]) => {\n                    this.logs = list.sort((a, b) => b.created - a.created);\n                },\n                () => {\n                    this._dialog.close();\n                    this._service.notifyError('Error loading logs for system');\n                }\n            );\n        } else {\n            this._dialog.close();\n        }\n    }\n}\n","<header>\n    <h3 mat-dialog-title>System Logs</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <table>\n            <thead>\n                <td>User</td>\n                <td>Date/Time</td>\n                <td></td>\n            </thead>\n            <tbody>\n                <tr class=\"item\" *ngFor=\"let item of logs\">\n                    <td>{{ item?.user?.name }}</td>\n                    <td>{{ item?.created_at | date }}</td>\n                    <td>{{ item?.installed_device }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</mat-dialog-content>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { generateTriggerActionForm } from 'src/app/shared/utilities/data/triggers.utilities';\nimport { EngineTrigger, EngineSystem, TriggerMailer, TriggerFunction } from '@placeos/ts-client';\nimport { FormGroup } from '@angular/forms';\n\nexport interface TriggerActionModalData {\n    /** Item to add/update the trigger on */\n    system: EngineSystem;\n    /** Trigger to add/update */\n    trigger: EngineTrigger;\n    /** Trigger Condition to edit */\n    action?: TriggerMailer | TriggerFunction;\n}\n\n@Component({\n    selector: 'trigger-action-modal',\n    templateUrl: './trigger-action-modal.template.html',\n    styleUrls: ['./trigger-action-modal.styles.scss']\n})\nexport class TriggerActionModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether actions are loading */\n    public loading: boolean;\n    /** Form fields for trigger condition */\n    public form: FormGroup;\n\n    /** Whether the triggers is new or not */\n    public get is_new(): boolean {\n        return !!this._data.action;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get system(): EngineSystem {\n        return this._data.system;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get trigger(): EngineTrigger {\n        return this._data.trigger;\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<TriggerActionModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: TriggerActionModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.form = generateTriggerActionForm(this._data.action).form;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (\n            (this.form.controls.action_type.value === 'emails' && !this.form.valid) ||\n            (this.form.controls.action_type.value === 'function' && !this.form.value.method_call)\n        ) {\n            return;\n        }\n        this.loading = true;\n        if (this.form.controls.action_type.value === 'emails') {\n            this.updateMailers();\n        } else {\n            this.updateFunctions();\n        }\n        this.trigger.save().then(\n            item => {\n                this.event.emit({ reason: 'done', metadata: { trigger: item } });\n                this._service.notifySuccess(`Successfully ${this.is_new ? 'added' : 'updated'} condition to trigger`);\n                this._dialog.close();\n            },\n            err => {\n                this.trigger.clearPendingChanges();\n                this.loading = false;\n                this._service.notifyError(\n                    `Error ${this.is_new ? 'adding' : 'updating'} condition to trigger. Error: ${JSON.stringify(err.response || err.message || err)}`\n                );\n            }\n        );\n    }\n\n    private updateMailers() {\n        const mailers = this.trigger.actions.mailers;\n        const new_mailer = {\n            emails: this.form.value.emails,\n            content: this.form.value.content\n        };\n        if (this._data.action) {\n            const old_mailer = JSON.stringify(this._data.action);\n            const index = mailers.findIndex(\n                a_mailer => JSON.stringify(a_mailer) === old_mailer\n            );\n            mailers.splice(index, 1, new_mailer);\n        } else {\n            mailers.push(new_mailer);\n        }\n        this.trigger.storePendingChange('actions', { ...this.trigger.actions, mailers });\n    }\n\n    private updateFunctions() {\n        const functions = this.trigger.actions.functions;\n        if (this._data.action) {\n            const old_function = JSON.stringify(this._data.action);\n            const index = functions.findIndex(fn => JSON.stringify(fn) === old_function);\n            functions.splice(index, 1, this.form.value.method_call);\n        } else {\n            functions.push(this.form.value.method_call);\n        }\n        this.trigger.storePendingChange('actions', { ...this.trigger.actions, functions });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{is_new ? 'Edit' : 'New'}} Trigger Action</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <trigger-action-form [form]=\"form\" [system]=\"system\"></trigger-action-form>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"save()\">\n        {{ is_new ? 'Save' : 'Add' }}\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nimport {\n    EngineSystem,\n    EngineTrigger,\n    TriggerComparison,\n    TriggerTimeCondition\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nimport { generateTriggerConditionForm } from 'src/app/shared/utilities/data/triggers.utilities';\n\nexport interface TriggerConditionData {\n    /** Item to add/update the trigger on */\n    system: EngineSystem;\n    /** Trigger to add/update */\n    trigger: EngineTrigger;\n    /** Trigger Condition to edit */\n    condition?: TriggerComparison | TriggerTimeCondition;\n}\n\n@Component({\n    selector: 'trigger-condition-modal',\n    templateUrl: './trigger-condition-modal.template.html',\n    styleUrls: ['./trigger-condition-modal.styles.scss']\n})\nexport class TriggerConditionModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether actions are loading */\n    public loading: boolean;\n    /** Form fields for trigger condition */\n    public form: FormGroup;\n\n    /** Whether the triggers is new or not */\n    public get is_new(): boolean {\n        return !!this._data.condition;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get system(): EngineSystem {\n        return this._data.system;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get trigger(): EngineTrigger {\n        return this._data.trigger;\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<TriggerConditionModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: TriggerConditionData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.form = generateTriggerConditionForm(this._data.condition).form;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        this.loading = true;\n        if (this.form.controls.condition_type.value === 'compare') {\n            this.updateComparisons();\n        } else {\n            this.updateTimeDependents();\n        }\n        this.trigger.save().then(\n            item => {\n                this.event.emit({ reason: 'done', metadata: { trigger: item } });\n                this._service.notifySuccess(`Successfully ${this.is_new ? 'added' : 'updated'} condition to trigger`);\n                this._dialog.close();\n            },\n            err => {\n                this.trigger.clearPendingChanges();\n                this.loading = false;\n                this._service.notifyError(`Error ${this.is_new ? 'adding' : 'updating'} condition to trigger. Error: ${JSON.stringify(err.response || err.message || err)}`);\n            }\n        );\n    }\n\n    /**\n     * Update the comparison list by replace an exisiting item or add a new item\n     */\n    private updateComparisons() {\n        const old_values = [...this.trigger.conditions.comparisons];\n        const new_value: TriggerComparison = {\n            left: this.form.controls.left.value,\n            operator: this.form.controls.operator.value,\n            right: this.form.controls.right.value\n        };\n        if (this._data.condition) {\n            const old_value = JSON.stringify(this._data.condition);\n            const index = old_values.findIndex(cmp => JSON.stringify(cmp) === old_value);\n            if (index >= 0) {\n                old_values.splice(index, 1, new_value);\n            }\n        } else {\n            old_values.push(new_value);\n        }\n        const updated_conditions = {\n            ...this.trigger.conditions,\n            comparisons: old_values\n        };\n        this.trigger.storePendingChange('conditions', updated_conditions);\n    }\n\n\n    /**\n     * Update the time dependent list by replace an exisiting item or add a new item\n     */\n    private updateTimeDependents() {\n        const old_values = [...this.trigger.conditions.time_dependents] || [];\n        const new_value = {\n            type: this.form.controls.time_type.value,\n            time: +(this.form.controls.time.value / 1000).toFixed(0),\n            cron: this.form.controls.cron.value\n        };\n        new_value.cron ? delete new_value.time : delete new_value.cron;\n        if (this._data.condition) {\n            const old_value = JSON.stringify(this._data.condition);\n            const index = old_values.findIndex(time => JSON.stringify(time) === old_value);\n            if (index >= 0) {\n                old_values.splice(index, 1, new_value);\n            }\n        } else {\n            old_values.push(new_value);\n        }\n        const updated_conditions = {\n            ...this.trigger.conditions,\n            time_dependents: old_values\n        };\n        this.trigger.storePendingChange('conditions', updated_conditions);\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{is_new ? 'Edit' : 'New'}} Trigger Condition</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <trigger-condition-form [form]=\"form\" [system]=\"system\"></trigger-condition-form>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"save()\">\n        {{ is_new ? 'Save' : 'Add' }}\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { HashMap, EngineModule, EngineSystem } from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nexport interface ModuleStateModalData {\n    /** System Data to show the details for */\n    system: EngineSystem;\n    /** Module to expose the state of */\n    module: EngineModule;\n    /** Modules associated with the system */\n    devices: EngineModule[];\n}\n\n@Component({\n    selector: 'view-module-state-modal',\n    templateUrl: './view-module-state.template.html',\n    styleUrls: ['./view-module-state.styles.scss'],\n})\nexport class ViewModuleStateModalComponent extends BaseDirective implements OnInit {\n    /** Current state of the selected module */\n    public state: string;\n    /** Whether the module state is being loaded */\n    public loading: boolean;\n    /** Whether the modal is closing */\n    public closing: boolean;\n    /** Mapping of devices to the module bindings */\n    public device_classes: HashMap<string> = {};\n\n    /** System of the selected module */\n    public get system(): EngineSystem {\n        return this._data.system;\n    }\n\n    /** Module to view the state of */\n    public get module(): EngineModule {\n        return this._data.module;\n    }\n\n    /** Modules associated with the system */\n    public get devices(): EngineModule[] {\n        return this._data.devices || [];\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<ViewModuleStateModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ModuleStateModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.generateModuleBindings();\n        this.updateState();\n    }\n\n    /**\n     * Generate the binding modules for each device\n     */\n    private generateModuleBindings() {\n        const counter: HashMap<number> = {};\n        for (const device of this.devices) {\n            const name = device.custom_name || device.name || 'Blank';\n            if (!counter[name]) {\n                counter[name] = 0;\n            }\n            this.device_classes[device.id] = `${name}_${++counter[name]}`;\n        }\n    }\n\n    /** Update the state of the module */\n    public updateState() {\n        if (!this.system || !this.module) {\n            return;\n        }\n        const class_name = this.device_classes[this.module.id];\n        if (!class_name) {\n            return;\n        }\n        this.loading = true;\n        const class_parts = class_name.split('_');\n        this._service.Systems.state(this.system.id, class_parts[0], +class_parts[1]).then(\n            (state) => {\n                const pre_state =\n                typeof state === 'string'\n                    ? JSON.parse(state)\n                    : state;\n                Object.keys(pre_state).forEach(key => {\n                    pre_state[key] = JSON.parse(pre_state[key]);\n                });\n                this.state = JSON.stringify(pre_state, undefined, 4);\n                this.loading = false;\n            },\n            (err) => {\n                this._service.notifyError(JSON.stringify(err.response || err.message || err));\n                this.loading = false;\n            }\n        );\n    }\n\n    /**\n     * Close the modal\n     */\n    public close() {\n        this._dialog.close();\n    }\n}\n","<header>\n    <h3 mat-dialog-title>\n        Module State - {{module?.custom_name || module?.name}}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"field\">\n            <label>System:</label>\n            <div class=\"value\">{{system?.name}}</div>\n        </div>\n        <div class=\"field\">\n            <label>Module:</label>\n            <div class=\"value\">\n                {{ device_classes[module?.id] }}\n            </div>\n        </div>\n        <button mat-button (tapped)=\"updateState()\">Update state</button>\n        <div class=\"settings\">\n            <settings-form-field [ngModel]=\"state\" [readonly]=\"true\"></settings-form-field>\n        </div>\n    </div>\n</mat-dialog-content>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Loading state...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface ViewResponseModalData {\n    content: any;\n}\n\n@Component({\n    selector: 'app-view-response-modal',\n    templateUrl: './view-response-modal.component.html',\n    styleUrls: ['./view-response-modal.component.scss']\n})\nexport class ViewResponseModalComponent {\n\n    public get content_string(): string {\n        return typeof this._data.content === 'object'\n            ? JSON.stringify(this._data.content, undefined, 4)\n            : this._data.content;\n    }\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: ViewResponseModalData) {}\n}\n","<header>\n    <div class=\"text\">Exec Request Results</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <settings-form-field [ngModel]=\"content_string\" [readonly]=\"true\"></settings-form-field>\n</mat-dialog-content>\n","import { Injectable, ApplicationRef, NgZone } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { SwUpdate } from '@angular/service-worker';\nimport { first } from 'rxjs/operators';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { ComposerService } from '@placeos/composer';\nimport { PlaceOSOptions } from '@placeos/ts-client';\nimport { GoogleAnalyticsService } from '@acaprojects/ngx-google-analytics';\n\nimport { Observable, BehaviorSubject, Subject, Subscription } from 'rxjs';\n\nimport { BaseClass } from '../shared/globals/base.class';\nimport { SettingsService, ConsoleStream } from './settings.service';\nimport { HashMap } from '../shared/utilities/types.utilities';\n\nimport { HotkeysService } from './hotkeys.service';\nimport { BackofficeCommentsService } from './data/comments.service';\nimport { BackofficeLogsService } from './data/logs.service';\nimport { BackofficeSearchService } from './data/search.service';\nimport { BackofficeStatsService } from './data/stats.service';\nimport { BackofficeSystemLogsService } from './data/system_logs.service';\nimport { BackofficeUsersService } from './data/users.service';\nimport { ApplicationIcon, ComposerOptions } from '../shared/utilities/settings.interfaces';\n\nimport * as Sentry from '@sentry/browser';\n\ndeclare global {\n    interface Window {\n        application: ApplicationService;\n        mock: {\n            enabled: boolean;\n            backend: any;\n        };\n    }\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApplicationService extends BaseClass {\n    /** List of previous routes for return navigation */\n    private _route_trail: string[] = [];\n    /** Map of state variables for Service */\n    protected _subjects: HashMap<BehaviorSubject<any> | Subject<any>> = {};\n    /** Map of observables for state variables */\n    protected _observers: HashMap<Observable<any>> = {};\n    /** Whether the application has stablised */\n    private _stable: boolean;\n\n    /** Whether the application has stablised */\n    public get is_stable(): boolean {\n        return this._stable || false;\n    }\n\n    constructor(\n        private _app_ref: ApplicationRef,\n        private _zone: NgZone,\n        private _title: Title,\n        private _router: Router,\n        private _cache: SwUpdate,\n        private _settings: SettingsService,\n        private _composer: ComposerService,\n        private _analytics: GoogleAnalyticsService,\n        private _hotkeys: HotkeysService,\n        private _engine_comments: BackofficeCommentsService,\n        private _engine_logs: BackofficeLogsService,\n        private _engine_search: BackofficeSearchService,\n        private _engine_stats: BackofficeStatsService,\n        private _engine_system_logs: BackofficeSystemLogsService,\n        private _users: BackofficeUsersService,\n        private _snackbar: MatSnackBar\n    ) {\n        super();\n        this._engine_comments.parent = this._engine_logs.parent = this._engine_search.parent =\n            this._engine_stats.parent = this._engine_system_logs.parent = this._users.parent = this;\n        this.set('system', null);\n        this._app_ref.isStable.pipe(first(_ => _)).subscribe(() => {\n            this._zone.run(() => {\n                this._stable = true;\n                this.log('APP', `Application has stablised.`);\n                this.setupCache();\n                this.waitForSettings();\n            });\n        });\n    }\n\n    /** Analytics service */\n    public get Analytics() {\n        return this._analytics;\n    }\n\n    /** Hotkeys service */\n    public get Hotkeys() {\n        return this._hotkeys;\n    }\n\n    /** Users service */\n    public get Users() {\n        return this._users;\n    }\n\n    /** Engine Applications service */\n    public get Applications() {\n        return this._composer.applications;\n    }\n\n    /** Engine Auth Sources service */\n    public get OAuthSources() {\n        return this._composer.oauth_sources;\n    }\n\n    /** Engine Auth Sources service */\n    public get SAMLAuthSources() {\n        return this._composer.saml_sources;\n    }\n\n    /** Engine Auth Sources service */\n    public get LDAPAuthSources() {\n        return this._composer.ldap_sources;\n    }\n\n    /** Comments service */\n    public get Comments() {\n        return this._engine_comments;\n    }\n\n    /** Engine Domains service */\n    public get Domains() {\n        return this._composer.domains;\n    }\n\n    /** Engine Cluster service */\n    public get Clusters() {\n        return this._composer.clusters;\n    }\n\n    /** Drivers service */\n    public get Drivers() {\n        return this._composer.drivers;\n    }\n\n    /** Engine Logs service */\n    public get Logs() {\n        return this._engine_logs;\n    }\n\n    /** Modules service */\n    public get Modules() {\n        return this._composer.modules;\n    }\n\n    /** Engine Search service */\n    public get Search() {\n        return this._engine_search;\n    }\n\n    public get Repositories() {\n        return this._composer.repositories;\n    }\n\n    /** Stats service */\n    public get Stats() {\n        return this._engine_stats;\n    }\n\n    /** Engien System Logs service */\n    public get SystemLogs() {\n        return this._engine_system_logs;\n    }\n\n    /** Systems service */\n    public get Systems() {\n        return this._composer.systems;\n    }\n\n    /** Triggers service */\n    public get Triggers() {\n        return this._composer.triggers;\n    }\n\n    /** Zones service */\n    public get Zones() {\n        return this._composer.zones;\n    }\n\n    public get EngineSettings() {\n        return this._composer.settings;\n    }\n\n    /**\n     * Get a setting from the settings service\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        return this._settings.get(key);\n    }\n\n    /** Name of the application */\n    public get name() {\n        return this._settings.app_name;\n    }\n\n    /**\n     * Title of the page\n     */\n    public set title(value: string) {\n        const title_suffix = this.setting('app.title');\n        this._title.setTitle(`${value ? value + ' | ' : ''}${title_suffix || 'PlaceOS'}`);\n    }\n\n    /**\n     * Title of the page\n     */\n    public get title(): string {\n        return this._title.getTitle();\n    }\n\n    /** Root API Endpoint */\n    public get endpoint() {\n        return this._composer.auth.api_endpoint;\n    }\n\n    /** Root API Endpoint for engine */\n    public get engine_endpoint() {\n        return this._composer.auth.api_endpoint;\n    }\n\n    /**\n     * Create notification popup\n     * @param type CSS Class to add to the notification\n     * @param message Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     * @param icon Icon to render to the left of the notification message\n     */\n    public notify(\n        type: string,\n        message: string,\n        action: string = 'OK',\n        on_action?: () => void,\n        icon: ApplicationIcon = {\n            type: 'icon',\n            class: 'material-icons',\n            content: 'info'\n        },\n        duration: number = 8000\n    ): void {\n        const snackbar_ref = this._snackbar.open(message, action, {\n            panelClass: [type],\n            duration\n        });\n        this.subscription(\n            'snackbar_close',\n            snackbar_ref.afterDismissed().subscribe(() => {\n                this.unsub('snackbar_close');\n                this.unsub('notify');\n            })\n        );\n        if (action) {\n            on_action = on_action || (() => snackbar_ref.dismiss());\n            this.subscription(\n                'notify',\n                snackbar_ref.onAction().subscribe(() => on_action())\n            );\n        }\n    }\n\n    /**\n     * Create success notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifySuccess(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'done' };\n        console.debug('[APP][USER_ACTION]', msg);\n        this.notify('success', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Create success notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyError(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'error' };\n        console.error('[APP][USER_ACTION]', msg);\n        this.notify('error', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Create info notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyWarn(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'warning' };\n        console.warn('[APP][USER_ACTION]', msg);\n        this.notify('warn', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Create info notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyInfo(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'info' };\n        console.info('[APP][USER_ACTION]', msg);\n        this.notify('info', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Log data to the browser console\n     * @param type Type of message\n     * @param msg Message body\n     * @param args array of argments to log to the console\n     * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n     * @param force Whether to force message to be emitted when debug is disabled\n     */\n    public log(\n        type: string,\n        msg: string,\n        args?: any,\n        stream: ConsoleStream = 'debug',\n        force: boolean = false\n    ): void {\n        this._settings.log(type, msg, args, stream, force);\n    }\n\n    /**\n     * Navigate to the given path\n     * @param path Path or array of path parts\n     * @param query Key value pairs to add to the URL as query parameters\n     */\n    public navigate(path: string | string[], query?: HashMap): void {\n        const route = path instanceof Array ? [...path] : [path];\n        this._route_trail.push(this._router.url);\n        this._router.navigate(route, { queryParams: query });\n    }\n\n    /**\n     * Navigate to the previous location in the route trail\n     */\n    public navigateBack(): void {\n        if (this._route_trail && this._route_trail.length > 0) {\n            const path = this._route_trail.pop();\n            this._router.navigate([path]);\n        } else {\n            this._router.navigate(['']);\n        }\n    }\n\n    /**\n     * Get the current value of the named property\n     * @param name Property name\n     */\n    public get<U = any>(name: string): U {\n        return this._subjects[name] && this._subjects[name] instanceof BehaviorSubject\n            ? (this._subjects[name] as BehaviorSubject<U>).getValue()\n            : null;\n    }\n\n    /**\n     * Listen to value change of the named property\n     * @param name Property name\n     * @param next Callback for value changes\n     */\n    public listen<U = any>(name: string): Observable<U> {\n        return this._observers[name] ? this._observers[name] : null;\n    }\n\n    /**\n     * Update the value of the named property\n     * @param name Property name\n     * @param value New value\n     */\n    public set<U = any>(name: string, value: U): void {\n        if (!this._subjects[name]) {\n            this._subjects[name] = new BehaviorSubject<U>(value);\n            this._observers[name] = this._subjects[name].asObservable();\n        } else {\n            this._subjects[name].next(value);\n        }\n    }\n\n    /** Wait for settings to be initialised before setting up the application */\n    private waitForSettings() {\n        // Wait until the settings have loaded before initialising\n        this._settings.initialised.pipe(first(_ => _)).subscribe((setup) => {\n            if (setup) {\n                this.init();\n            }\n        });\n    }\n\n    /**\n     * Initialise application services\n     */\n    private init(): void {\n        this.setupComposer();\n        // Setup analytics\n        this._analytics.enabled = !!this.setting('app.analytics.enabled');\n        if (this._analytics.enabled) {\n            this._analytics.load(this.setting('app.analytics.tracking_id'));\n        }\n        this._composer.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.set('ready', true);\n            const dsn =\n                this._composer.auth.authority.sentry_dsn || this.setting('app.sentry_dsn');\n            if (dsn) {\n                Sentry.init({ dsn });\n            }\n            this.loadActiveUser();\n            this._initialised.next(true);\n        });\n        // Add service to window if in debug mode\n        if (window.debug) {\n            window.application = this;\n        }\n    }\n\n    /**\n     * Initialise the composer library comms\n     */\n    private setupComposer(): void {\n        this.log('SYSTEM', 'Setup up composer...');\n        // Get application settings\n        const settings: ComposerOptions = this.setting('composer') || {};\n        const protocol = settings.protocol || location.protocol;\n        const host = settings.domain || location.hostname;\n        const port = settings.port || location.port;\n        const url = settings.use_domain ? `${protocol}//${host}:${port}` : location.origin;\n        const route = settings.route || '';\n        const mock = this.setting('mock');\n        const login_locally = location.search.indexOf('login=true') >= 0;\n        // Generate configuration object\n        const config: PlaceOSOptions = {\n            scope: 'public',\n            host: `${host}:${port}`,\n            auth_uri: `${url}/auth/oauth/authorize`,\n            token_uri: `${url}/auth/token`,\n            redirect_uri: `${location.origin}${route}/oauth-resp.html`,\n            handle_login: !settings.local_login && !login_locally,\n            mock\n        };\n        this._composer.setup(config);\n    }\n\n    private loadActiveUser() {\n        this.Users.load();\n    }\n\n    /**\n     * Setup handler for cache change events\n     */\n    private setupCache() {\n        this.unsub('app_stable');\n        this.log('CACHE', `Initialising cache...`);\n        if (this._cache.isEnabled) {\n            this.log('CACHE', `Listening to cache events...`);\n            this._cache.activateUpdate();\n            this.subscription('cache_update', this._cache.available.subscribe((event) => {\n                const current = `current version is ${event.current.hash}`;\n                const available = `available version is ${event.available.hash}`;\n                this.log('CACHE', `Update available: ${current} ${available}`);\n                this.activateUpdate()\n            }));\n            setInterval(() => {\n                this.log('CACHE', `Checking for updates...`);\n                this._cache.checkForUpdate();\n            }, 5 * 60 * 1000);\n        }\n    }\n\n    /**\n     * Update the cache and reload the page\n     */\n    private activateUpdate() {\n        if (this._cache.isEnabled) {\n            this.log('CACHE', `Activating changes to the cache...`);\n            this._cache.activateUpdate().then(() => {\n                this.notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                    location.reload(true)\n                );\n            });\n        }\n    }\n}\n","import { BehaviorSubject, Observable, Subscription, Subscriber, Subject } from 'rxjs';\nimport { EngineHttpClient } from '@placeos/ts-client';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '../../shared/globals/base.class';\nimport { ApplicationService } from '../app.service';\nimport { HashMap } from '../../shared/utilities/types.utilities';\nimport { toQueryString } from '../../shared/utilities/api.utilities';\n\nexport interface IEngineResponse {\n    results: HashMap[];\n    total: number;\n}\n\nexport class BaseAPIService<T extends {}> extends BaseClass {\n    /** Application service */\n    public parent: ApplicationService;\n    /** List of available items */\n    public readonly listing = new BehaviorSubject<T[]>([]);\n    /** Display name of the service */\n    protected _name: string;\n    /** Name of a single item from the service */\n    protected _singular: string;\n    /** API Route of the service */\n    protected _api_route: string;\n    /** Map of state variables for Service */\n    protected _subjects: { [key: string]: BehaviorSubject<any> | Subject<any> } = {};\n    /** Map of observables for state variables */\n    protected _observers: { [key: string]: Observable<any> } = {};\n    /** Map of poll subscribers for API endpoints */\n    protected _subscribers: { [key: string]: Subscriber<any> } = {};\n    /** Map of promises for Service */\n    protected _promises: { [key: string]: Promise<any> } = {};\n    /** Comparison function for service items */\n    protected _compare: (a: T, b: T) => boolean = (a, b) =>\n        a === b || (a as any).id === (b as any).id;\n    /** Default filter function for list method */\n    protected _list_filter: (a: T) => boolean = a => !!a;\n\n    constructor(protected http: EngineHttpClient) {\n        super();\n        this._name = 'base';\n        this._singular = 'base';\n        this._api_route = 'base';\n        this.set('list', []);\n    }\n\n    /**\n     * Initailise service\n     */\n    public init() {\n        if (!this.parent) {\n            return this.timeout('init', () => this.init());\n        }\n        this.parent.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.load().then(_ => this._initialised.next(true));\n        });\n    }\n\n    /**\n     * Get API route for the service\n     * @param engine Whether endpoint is using the application API or engine API\n     */\n    public route(engine: boolean = false) {\n        const endpoint = this.parent\n            ? engine\n                ? this.parent.engine_endpoint\n                : this.parent.endpoint\n            : '/api';\n        return `${endpoint}${this._api_route}`;\n    }\n    /** API Route of the service */\n    public get api_route() {\n        return this._api_route;\n    }\n\n    /**\n     * Get a service related setting from the settings service\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string) {\n        return this.parent ? this.parent.setting(`app.${this._name.toLowerCase()}.${key}`) : null;\n    }\n\n    /**\n     * Get the current value of the named property\n     * @param name Property name\n     */\n    public get<U = any>(name: string): U {\n        return this._subjects[name] && this._subjects[name] instanceof BehaviorSubject\n            ? (this._subjects[name] as BehaviorSubject<U>).getValue()\n            : null;\n    }\n\n    /**\n     * Listen to value change of the named property\n     * @param name Property name\n     * @param next Callback for value changes\n     */\n    public listen<U = any>(name: string, next: (_: U) => void): Subscription {\n        return this._observers[name] ? this._observers[name].subscribe(next) : null;\n    }\n\n    /**\n     * Update the value of the named property\n     * @param name Property name\n     * @param value New value\n     */\n    protected set<U = any>(name: string, value: U): void {\n        if (!this._subjects[name]) {\n            this._subjects[name] = new BehaviorSubject<U>(value);\n            this._observers[name] = this._subjects[name].asObservable();\n        } else {\n            this._subjects[name].next(value);\n        }\n    }\n\n    /**\n     * Get list of loaded items\n     * @param filterFn Function for filtering the list\n     */\n    public list(filterFn: (a: T) => boolean = this._list_filter): T[] {\n        const list = this.get('list') || [];\n        return list.reduce((a, i) => {\n            if (filterFn(i)) {\n                a.push(i);\n            }\n            return a;\n        }, []);\n    }\n\n    /**\n     * Get item with the given id from the loaded items\n     * @param id ID of the item\n     */\n    public item(id: string): T {\n        const list = this.get('list') || [];\n        return list.find(i => i.id === id || i.email === id);\n    }\n\n    /**\n     * Query the index of the API route associated with this service\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public query(query_params: HashMap = { update_list: true }): Promise<T[] | HashMap[]> {\n        let engine = false;\n        let cache = 1000;\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n            cache = query_params.cache || 1000;\n            delete query_params.cache;\n        }\n        const query = toQueryString(query_params);\n        const key = `query|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise((resolve, reject) => {\n                const url = `${this.route(engine)}${query ? '?' + query : ''}`;\n                let result: T[] | HashMap[] = [];\n                this.http.get(url).subscribe(\n                    (d: IEngineResponse | HashMap[]) => {\n                        result =\n                            d && d instanceof Array\n                                ? d.map(i => this.process(i))\n                                : d && !(d instanceof Array) && d.results\n                                ? (d.results as HashMap[])\n                                : [];\n                    },\n                    e => {\n                        reject(e);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        if (\n                            (!query || (query_params && query_params.update_list)) &&\n                            result.length > 0 &&\n                            result[0] instanceof Object\n                        ) {\n                            this.set('list', this.updateList(this.get('list'), result as T[]));\n                            this.listing.next(this.get('list') || []);\n                        }\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), cache);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Query the API route for a sepecific item\n     * @param id ID of the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public show(id: string, query_params: HashMap = {}): Promise<T> {\n        let engine = false;\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n        }\n        const query = toQueryString(query_params);\n        const key = `show|${id}|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<T>((resolve, reject) => {\n                const url = `${this.route(engine)}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.get(url).subscribe(\n                    d => (result = this.process(d)),\n                    e => {\n                        reject(e);\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Open modal for new item\n     */\n    public openNewModal(prefill?: { [name: string]: any }): Promise<T> {\n        return new Promise((resolve, reject) => {\n            // this.parent.Overlay.open('edit-item', { data: { service: this, item: prefill } }, (e) => {\n            //     if (e.type === 'finish') {\n            //         resolve(e.data.item as T);\n            //     } else {\n            //         reject();\n            //     }\n            // });\n        });\n    }\n\n    /**\n     * Make post request for a new item to the service\n     * @param form_data Data to post to the server\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public add(form_data: HashMap, query_params: HashMap = {}): Promise<T> {\n        if (!this._promises.new_item) {\n            this._promises.new_item = new Promise<T>((resolve, reject) => {\n                const query = toQueryString(query_params);\n                const url = `${this.route(query_params.engine)}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.post(url, form_data).subscribe(\n                    d => (result = this.process(d)),\n                    e => {\n                        reject(e);\n                        this.analyticsEvent(`create-${this._name.toLowerCase()}-failed`);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.set('list', this.updateList(this.get('list'), [result]));\n                        this.analyticsEvent(`create-${this._name.toLowerCase()}-success`);\n                        this._promises.new_item = null;\n                    }\n                );\n            });\n        }\n        return this._promises.new_item;\n    }\n\n    /**\n     * Perform API task for the given item ID\n     * @param id ID of the item\n     * @param task_name Name of the task\n     * @param form_data Map of data to pass to the API\n     */\n    public task<U = any>(id: string, task_name: string, form_data: HashMap = {}): Promise<U> {\n        const query = toQueryString(form_data);\n        const key = `task|${id}|${task_name}|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<U>((resolve, reject) => {\n                const post_data = { ...form_data, id, _task: task_name };\n                const url = `${this.route(form_data.engine)}/${id}/${task_name}`;\n                let result = null;\n                this.http.post(url, post_data).subscribe(\n                    d => (result = d),\n                    e => {\n                        reject(e);\n                        this.analyticsEvent(\n                            `${this._name.toLowerCase()}-task-${task_name}-failed`,\n                            id\n                        );\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result as U);\n                        this.analyticsEvent(\n                            `${this._name.toLowerCase()}-task-${task_name}-success`,\n                            id\n                        );\n                        this.timeout(key, () => (this._promises[key] = null), 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Setup a poller for an API endpoint\n     * @param id Show request ID. Leave blank to poll on the query endpoint\n     * @param query_params Map of query paramaters to add to the polled URL\n     * @param delay Delay between each poll event\n     */\n    public poll(\n        id?: string,\n        query_params: HashMap = {},\n        delay: number = 5000\n    ): Observable<T | T[]> {\n        const key = `poll|${id || ''}|${toQueryString(query_params) || ''}`;\n        this.stopPoll(id, query_params);\n        this._subjects[key] = new Subject<T | T[]>();\n        this._observers[key] = this._subjects[key].asObservable();\n        const sub = this._subjects[key];\n        const query = { ...(query_params || {}), _poll: true };\n        if (id) {\n            this.show(id, query).then(\n                d => sub.next(d),\n                e => sub.error(e)\n            );\n            this.interval(\n                key,\n                () => {\n                    this.show(id, query).then(\n                        d => sub.next(d),\n                        e => sub.error(e)\n                    );\n                },\n                delay\n            );\n        } else {\n            this.query(query).then(\n                d => sub.next(d),\n                e => sub.error(e)\n            );\n            this.interval(\n                key,\n                () => {\n                    this.query(query).then(\n                        d => sub.next(d),\n                        e => sub.error(e)\n                    );\n                },\n                delay\n            );\n        }\n        return this._observers[key];\n    }\n\n    /**\n     * Destroy poller\n     * @param id ID of the polling event\n     * @param query_params Associtated query parameters of the poll request\n     */\n    public stopPoll(id?: string, query_params: HashMap = {}) {\n        const key = `poll|${id || ''}|${toQueryString(query_params) || ''}`;\n        if (this._subjects[key]) {\n            this._subjects[key].complete();\n            this._subjects[key] = null;\n            this._observers[key] = null;\n        }\n    }\n\n    /**\n     * Make put request for changes to the item with the given id\n     * @param id ID of the item being updated\n     * @param form_data New values for the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public update(id: string, form_data: HashMap, query_params: HashMap = {}): Promise<T> {\n        const key = `update|${id}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<T>((resolve, reject) => {\n                const query = toQueryString(query_params);\n                const url = `${this.route(query_params.engine)}/${id}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.put(url, form_data).subscribe(\n                    d => (result = this.process(d)),\n                    e => {\n                        reject(e);\n                        this.analyticsEvent(`update-${this._name.toLowerCase()}-failed`, id);\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.set(\n                            'list',\n                            this.updateList(this.removeItem(this.get('list'), { id } as any), [\n                                result\n                            ])\n                        );\n                        this.analyticsEvent(`update-${this._name.toLowerCase()}-success`, id);\n                        this._promises[key] = null;\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Make delete request for the given item\n     * @param id ID of item\n     */\n    public delete(id: string): Promise<void> {\n        const key = `delete|${id}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<void>((resolve, reject) => {\n                const url = `${this.route()}/${id}`;\n                this.http.delete(url).subscribe(\n                    _ => null,\n                    e => reject(e),\n                    () => {\n                        this.set('list', this.removeItem(this.get('list'), { id } as any));\n                        resolve();\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Add new API item from another service or API class\n     * @param id ID of the item/or service adding the new item\n     * @param data Raw API data for the new item\n     * @param type Adder type\n     */\n    public addFrom(\n        id: string,\n        data: HashMap,\n        type: 'class' | 'service' | 'other' = 'other'\n    ): string {\n        const new_item = this.process(data);\n        this.set('list', this.updateList(this.get('list'), [new_item]));\n        return (new_item as any).id;\n    }\n\n    /**\n     * Remove items with the given IDs from the list\n     * @param id ID of the item/or service remove the list of items\n     * @param remove_ids List of item IDs to remove\n     * @param type Remover type\n     */\n    public removeFrom(\n        id: string,\n        remove_ids: string[],\n        type: 'class' | 'service' | 'other' = 'other'\n    ) {}\n\n    /**\n     * Load initial data for the service\n     */\n    protected load(): Promise<void> {\n        return new Promise<void>(resolve => {\n            resolve();\n        });\n    }\n\n    /**\n     * Post analytics event for this service\n     * @param action Name of the action to post\n     */\n    protected analyticsEvent(action: string, label?: string) {\n        if (this.parent && this.parent.Analytics) {\n            this.parent.Analytics.event(\n                this._name,\n                `${this.parent.name.toLowerCase()}-${action}`,\n                label\n            );\n        }\n    }\n\n    /**\n     * Convert raw API data into a valid API Object\n     * @param raw_item Raw API data\n     */\n    protected process(raw_item: HashMap): T {\n        return raw_item as T;\n    }\n\n    /**\n     * Update recorded list of items\n     * @param old_list Old list of items\n     * @param list List of updated items\n     * @param compareFn Function to compare items to remove duplicates\n     */\n    protected updateList(\n        old_list: T[],\n        list: T[],\n        compareFn: (a: T, b: T) => boolean = this._compare\n    ): T[] {\n        if (!list || list.length === 0) {\n            return old_list;\n        }\n        const new_list: T[] = [];\n        const mixed_list = [...list, ...old_list];\n        if (!compareFn) {\n            compareFn = this._compare;\n        }\n        for (const item of mixed_list) {\n            const found = new_list.find(i => compareFn(i, item));\n            if (!found) {\n                new_list.push(item);\n            }\n        }\n        return new_list;\n    }\n\n    /**\n     * Remove the given item from the given list\n     * @param list List of items\n     * @param item Item to remove\n     * @param compareFn Function to compare items\n     */\n    protected removeItem(list: T[], item: T, compareFn?: (a: T, b: T) => boolean) {\n        const new_list = [];\n        if (!compareFn) {\n            compareFn = this._compare;\n        }\n        list.forEach(i => (compareFn(item, i) ? null : new_list.push(i)));\n        return new_list;\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { EngineUser } from '@placeos/ts-client';\n\nimport { BaseAPIService } from './base.service';\nimport { ComposerService } from '@placeos/composer';\n\nexport interface IComment {\n    id: string;\n    channel_id: string;\n    user_id: string;    // ACA User ID\n    user: EngineUser;\n    master_id: string;  // ID of master object\n    reply_to_id: string;\n    replies: IComment[];\n    name: string;       // User Staff Code\n    description: string;\n    other: any;\n    likes: string[];\n    dislikes: string[];\n    created_at: number;\n    updated_at: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeCommentsService extends BaseAPIService<IComment> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n    }\n\n    /**\n     * Task for adding the like state to comment\n     * @param id ID of the comment to like\n     * @param fields Query parameters\n     */\n    public like(id: string, fields?: { name: string, [fields: string]: any }) {\n        return this.task(id, 'like', fields);\n    }\n\n    /**\n     * Task for removing like state on the comment\n     * @param id ID of the comment to dislike\n     * @param fields Query parameters\n     */\n    public dislike(id: string, fields?: { name: string, [fields: string]: any }) {\n        return this.task(id, 'dislike', fields);\n    }\n\n    /**\n     * Task for removing like state on the comment\n     * @param id ID of the comment to dislike\n     * @param fields Query parameters\n     */\n    public removeVote(id: string, fields?: { name: string, [fields: string]: any }) {\n        return this.task(id, 'clear', fields);\n    }\n\n    /**\n     * Process list data for returned items\n     * @param list Raw item data from server\n     */\n    protected processList(list: any[]) {\n        const output_list = list.map(i => this.process(i));\n        this.processReplies(output_list);\n        return output_list;\n    }\n\n    /**\n     * Convert raw comment dat into local format\n     * @param cmt Raw comment data\n     */\n    protected process(cmt: any): IComment {\n        const comment: IComment = {\n            id: cmt.id,\n            channel_id: cmt.channel_id,\n            user_id: cmt.user_id,\n            user: null,\n            master_id: cmt.master_id,\n            reply_to_id: cmt.in_reply_to_id,\n            replies: [],\n            name: cmt.name,\n            description: cmt.description,\n            likes: cmt.likes,\n            other: {},\n            dislikes: cmt.dislikes,\n            created_at: cmt.created_at,\n            updated_at: cmt.updated_at,\n        };\n        if (comment.description[0] === '{') {\n            comment.other = JSON.parse(comment.description);\n            if (comment.other) {\n                comment.description = comment.other.comment;\n            }\n        }\n        this.parent.Users.query({ q: cmt.name }).then((list) => {\n            comment.user = list[0] || new EngineUser(cmt);\n        }, (err) => comment.user = new EngineUser(cmt));\n        return comment;\n    }\n\n    /**\n     * Link associated comments together\n     * @param cmt_list Array of comments\n     */\n    private processReplies(cmt_list: IComment[]) {\n        for (const i of cmt_list) {\n            if (i.reply_to_id) {\n                const id = i.reply_to_id;\n                for (const cmt of cmt_list) {\n                    if (cmt.id === id) {\n                        cmt.replies.push(i);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineSystem, EngineUser } from '@placeos/ts-client';\n\nimport { BaseAPIService } from './base.service';\n\nimport * as dayjs from 'dayjs';\n\nexport interface IEngineLogEntry {\n    id: string;\n    name: string;\n    notes?: string;\n    suspected?: boolean;\n    persisted?: boolean;\n    installed_device?: boolean;\n    ip?: string;\n    user_id?: string;\n    user?: EngineUser;\n    system_id?: string;\n    systems?: EngineSystem[];\n    display?: any;\n    created: number;\n    last_checked: number;\n    ended: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeLogsService extends BaseAPIService<IEngineLogEntry> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'log';\n        this._api_route = '/logs';\n    }\n\n    public process(raw_item: any) {\n        const item: IEngineLogEntry = {\n            id: raw_item.id,\n            name: raw_item.name,\n            notes: raw_item.notes,\n            suspected: raw_item.suspected,\n            persisted: raw_item.persisted,\n            installed_device: raw_item.installed_device,\n            ip: raw_item.ip,\n            user_id: raw_item.user_id,\n            system_id: raw_item.system_id,\n            systems: raw_item.systems,\n            user: raw_item.user,\n            display: {\n                started: dayjs(raw_item.created_at * 1000).format(),\n                ended: dayjs(raw_item.ended_at * 1000).format('MMM d, YYYY - hh:mm A')\n            },\n            created: raw_item.created_at * 1000,\n            last_checked: raw_item.last_checked * 1000,\n            ended: raw_item.ended_at * 1000\n        };\n        return item;\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from './base.service';\n\nimport * as dayjs from 'dayjs';\n\nexport interface IEngineSearchResult {\n    id: string;\n    name: string;\n    type: string;\n    created: number;\n    display?: any;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeSearchService extends BaseAPIService<IEngineSearchResult> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'search';\n        this._api_route = '/search';\n    }\n\n    public deleteItem() { return new Promise((rs, rj) => rj('No show for this service')); }\n    public updateItem() { return new Promise<any>((rs, rj) => rj('No show for this service')); }\n    public add() { return new Promise<any>((rs, rj) => rj('No show for this service')); }\n    public show() { return new Promise<any>((rs, rj) => rj('No show for this service')); }\n\n    protected process(raw_item: any) {\n        const item: IEngineSearchResult = {\n            id: raw_item.id,\n            name: raw_item.name,\n            type: raw_item.type,\n            created: raw_item.created_at * 1000\n        };\n        item.display = {\n            created: dayjs(item.created).format()\n        };\n        return item;\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from './base.service';\n\nexport interface IEngineStats {\n    id?: string;\n    name?: string;\n    period: string;\n    histogram?: { avg: number, count: number, max: number, min: number, sum: number }[];\n    interval?: number;\n    start?: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeStatsService extends BaseAPIService<IEngineStats> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'stats';\n        this._api_route = '/stats';\n    }\n\n    public connections(fields?: any) {\n        return this.show('connections', fields);\n    }\n\n    public panels(fields?: any) {\n        return this.show('panels', fields);\n    }\n\n    public offline(fields?: any) {\n        return this.show('offline', fields);\n    }\n\n    public triggers(fields?: any) {\n        return this.show('triggers', fields);\n    }\n\n    public ignore_list(fields?: any) {\n        return this.show('triggers', fields);\n    }\n\n    protected process(raw_item: any) {\n        const item: IEngineStats = {\n            period: raw_item.period_name,\n            interval: raw_item.interval,\n            histogram: raw_item.histogram || [],\n            start: raw_item.period_start * 1000\n        };\n        return item;\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from './base.service';\nimport { IEngineLogEntry } from './logs.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeSystemLogsService extends BaseAPIService<IEngineLogEntry> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'log';\n        this._api_route = '/system_logs';\n    }\n\n    protected process(raw_item: any) {\n        const item = this.parent.Logs.process(raw_item);\n        return item;\n    }\n\n}\n","import { ComposerService } from '@placeos/composer';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineUsersService, EngineUser, EngineUserQueryOptions } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { Md5 } from 'ts-md5/dist/md5';\n\nimport { FilterFn, DialogEvent } from '../../shared/utilities/types.utilities';\nimport { toQueryString } from 'src/app/shared/utilities/api.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from '../../overlays/confirm-modal/confirm-modal.component';\n\nimport * as dayjs from 'dayjs';\nimport * as Sentry from '@sentry/browser';\n\ntype ServiceItem = EngineUser;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeUsersService extends EngineUsersService {\n    /** Name for a single user */\n    public readonly singular: string = 'user';\n    /** Behavior subject with the currently available list of users */\n    public readonly listing = new BehaviorSubject<ServiceItem[]>([]);\n    /** Active User */\n    public readonly user = new BehaviorSubject<ServiceItem>(null);\n    /** State of loading the user */\n    public readonly state = new BehaviorSubject<string>('');\n    /** Application Service */\n    public parent: any;\n    public readonly can_create: boolean = false;\n    public readonly can_edit: boolean = true;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        if (\n            !((this.user.getValue() || {}) as any).ui_theme &&\n            !localStorage.getItem('BACKOFFICE.theme') &&\n            window.matchMedia &&\n            window.matchMedia('(prefers-color-scheme: dark)').matches\n        ) {\n            return true;\n        }\n        return (\n            ((this.user.getValue() || {}) as any).ui_theme === 'dark' ||\n            localStorage.getItem('BACKOFFICE.theme') === 'dark'\n        );\n    }\n    public set dark_mode(state: boolean) {\n        if (state) {\n            localStorage.setItem('BACKOFFICE.theme', 'dark');\n            this.parent.set('dark_mode', state);\n            document.body.classList.add('dark-mode');\n        } else {\n            localStorage.setItem('BACKOFFICE.theme', 'light');\n            document.body.classList.remove('dark-mode');\n        }\n    }\n    /** Default method for filtering the available list */\n    private _filter_fn: FilterFn<ServiceItem> = _ => true;\n\n    constructor(\n        private _composer: ComposerService,\n        private http_unauth: HttpClient,\n        private _dialog: MatDialog\n    ) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe(state => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n                this.current().then(user => {\n                    this.user.next(user);\n                });\n            }\n        });\n    }\n\n    /**\n     * Get the available list of zones\n     * @param predicate Function to filter the zone list on\n     */\n    public list(predicate: FilterFn<ServiceItem> = this._filter_fn): ServiceItem[] {\n        return (this.listing.getValue() || []).filter(predicate);\n    }\n\n    public query(query_params?: EngineUserQueryOptions): Promise<ServiceItem[]> {\n        return new Promise((resolve, reject) => {\n            super.query(query_params).then(\n                list => {\n                    const old_list = this.list();\n                    const new_list = [...old_list, ...list];\n                    for (const item of new_list) {\n                        const found = new_list.findIndex(i => i.id === item.id && i !== item);\n                        if (found >= 0) {\n                            new_list.splice(new_list.indexOf(item), 1);\n                        }\n                    }\n                    this.listing.next(new_list);\n                    resolve(list);\n                },\n                e => reject(e)\n            );\n        });\n    }\n\n    public load(): Promise<void> {\n        console.log('Load user');\n        return new Promise(resolve => {\n            this.state.next('loading');\n            this.show('current').then(\n                user => {\n                    if (user) {\n                        this.user.next(user);\n                        this.parent.set('user', user);\n                        Sentry.configureScope(scope => scope.setUser({ email: user.email }));\n                        this.state.next('success');\n                        resolve();\n                        console.log('Dark mode:', this.dark_mode);\n                        this.dark_mode = this.dark_mode;\n                    } else {\n                        this.timeout('load', () => this.load().then(_ => resolve()), 600);\n                    }\n                },\n                () => this.timeout('load', () => this.load().then(_ => resolve()), 600)\n            );\n        });\n    }\n\n    /**\n     * Manually set the user access token\n     * @param token Token to set\n     * @param expiry Expiry time of the token\n     */\n    public setToken(token: string, expiry: number) {\n        if (!expiry) {\n            expiry = dayjs()\n                .add(7, 'd')\n                .valueOf();\n        }\n        const path = `${location.origin}${this.parent.setting('composer.route') ||\n            ''}/oauth-resp.html`;\n        if (localStorage) {\n            const client_id = Md5.hashStr(path);\n            localStorage.setItem(`${client_id}_access_token`, token);\n            localStorage.setItem(`${client_id}_expires_at`, `${expiry}`);\n            location.reload();\n        }\n        return path;\n    }\n\n    /**\n     * Login with given credentials\n     * @param fields Key value pairs of post parameters\n     */\n    public login(fields: any = {}) {\n        return new Promise((resolve, reject) => {\n            this.state.next('loading');\n            const query = toQueryString(fields);\n            let headers = new HttpHeaders();\n            headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n            this.http_unauth.post('/auth/signin', query, { headers }).subscribe(\n                (res: any) => {\n                    if (sessionStorage) {\n                        const clientId = Md5.hashStr(`${location.origin}/oauth-resp.html`);\n                        sessionStorage.setItem(`${clientId}_login`, 'true');\n                    }\n                    this._composer.auth.authorise().then(token => {\n                        resolve();\n                    });\n                },\n                err => {\n                    if (err.status >= 400) {\n                        this.state.next('error');\n                    } else {\n                        if (sessionStorage) {\n                            const clientId = Md5.hashStr(`${location.origin}/oauth-resp.html`);\n                            sessionStorage.setItem(`${clientId}_login`, 'true');\n                        }\n                        this._composer.auth.authorise();\n                    }\n                    reject();\n                },\n                () => this.load()\n            );\n        });\n    }\n\n    /**\n     * Logout from the application\n     */\n    public logout() {\n        this._composer.auth.logout();\n    }\n\n    /**\n     * Open modal for editing an item\n     * @param item Item to edit\n     */\n    public async openEditModal(item: EngineUser): Promise<string> {\n        return '';\n    }\n\n    /**\n     * Open confirmation modal for deleting an item\n     * @param item Item to delete\n     */\n    public askDelete(item: EngineUser): Promise<string> {\n        return new Promise((resolve, reject) => {\n            let complete = false;\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Delete User?',\n                        content: `Are you sure you want to delete this user?`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        complete = true;\n                        item.delete().then(\n                            () => resolve(),\n                            () => reject('Request failed')\n                        );\n                    }\n                })\n            );\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineDebugEvent, EngineModule } from '@placeos/ts-client';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { BaseClass } from '../shared/globals/base.class';\nimport { HashMap } from '../shared/utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\n\nconst TERMINAL_COLOURS = {\n    debug: '\\u001b[34m',\n    verbose: '\\u001b[34m',\n    info: '\\u001b[32m',\n    warning: '\\u001b[33m',\n    error: '\\u001b[31m',\n    fatal: '\\u001b[31m',\n};\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EngineDebugService extends BaseClass {\n    /** List of the current state of events */\n    private _events = new BehaviorSubject<EngineDebugEvent[]>([]);\n    /** Observable for changes to the event listing */\n    private _event_obs = this._events.asObservable();\n    /** List of modules listening to debug events */\n    private _bound_modules: EngineModule[] = [];\n    /** Mapping of module IDs to display names */\n    private _module_names: HashMap<string> = {};\n    /** Whether debug console is enabled */\n    private _enabled: boolean;\n\n    /** Current list of debug events */\n    public get event_list(): EngineDebugEvent[] {\n        return this._events.getValue();\n    }\n\n    /** Observable for changes to the event listing */\n    public get events(): Observable<EngineDebugEvent[]> {\n        return this._event_obs;\n    }\n\n    /** Get terminal display string for all the events */\n    public get terminal_string(): string {\n        return this.event_list\n            .map(\n                (event) =>\n                    `${TERMINAL_COLOURS[event.level] || TERMINAL_COLOURS.debug}${dayjs().format(\n                        'h:mm A'\n                    )}, ${\n                        this._module_names[event.mod_id] || event.mod_id || '<UNKNOWN>'\n                    }, [${event.level.toUpperCase()}]\\u001b[0m ${event.message}`\n            )\n            .join('\\n');\n    }\n\n    /** Whether there are modules listening for debug messages */\n    public get is_listening(): boolean {\n        return this._enabled;\n    }\n\n    constructor(private _composer: ComposerService) {\n        super();\n        this._composer.realtime.debug_events.subscribe((event) => {\n            if (this._bound_modules.find((mod) => mod.id === event.mod_id)) {\n                const event_list = this.event_list;\n                event_list.push(event);\n                this._events.next(event_list);\n            }\n        });\n    }\n\n    /** Clear existing events */\n    public clearEvents() {\n        this._events.next([]);\n    }\n\n    /**\n     * Whether module is listening for debug events\n     */\n    public isListening(module: EngineModule): boolean {\n        return !!this._bound_modules.find((mod) => mod.id === module.id);\n    }\n\n    /**\n     * Start listening to debug events for the given module\n     * @param module Module to start listening to\n     * @param module_name Display name for the module\n     */\n    public bind(module: EngineModule, module_name: string) {\n        if (module) {\n            const parts = module_name.split('_');\n            const index = +parts.splice(parts.length - 1, 1);\n            const options = {\n                sys: module.system_id,\n                mod: module.id,\n                index,\n                name: 'debug',\n            };\n            this._enabled = true;\n            this._composer.realtime.debug(options).then(() => {\n                this.subscription(`debug_${module.id}`, () =>\n                    this._composer.realtime.ignore(options)\n                );\n                this._bound_modules.push(module);\n                this._module_names[module.id] = module_name;\n            });\n        }\n    }\n\n    /**\n     * Stop listening to debug events for module\n     * @param module Module to stop listening to\n     */\n    public unbind(module: EngineModule) {\n        if (module) {\n            this.unsub(`debug_${module.id}`);\n            this._bound_modules = this._bound_modules.filter((mod) => mod.id !== module.id);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from '../shared/utilities/types.utilities';\nimport { unique } from '../shared/utilities/general.utilities';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            if (\n                document.activeElement &&\n                (document.activeElement.tagName.toLowerCase() === 'input' ||\n                    document.activeElement.tagName.toLowerCase() === 'textarea')\n            ) {\n                return;\n            }\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                this.setKeyState(code, ++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.keydown_states[code]) {\n                this.keydown_states[code].next(null);\n            }\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = combo instanceof Array ? combo : combo.split('+');\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            this.setKeyState(last_key, null);\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe(count => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) {\n                                return;\n                            }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (\n            code.indexOf('alt') >= 0 ||\n            code.indexOf('shift') >= 0 ||\n            code.indexOf('control') >= 0\n        ) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            key_list.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n\n    /**\n     * Update the state of a keycode\n     * @param code Code of the key\n     * @param value New state value for key\n     */\n    private setKeyState(code: string, value: number = null) {\n        if (!this.keydown_states[code]) {\n            this.keydown_states[code] = new BehaviorSubject(null);\n            this.keydown_observers[code] = this.keydown_states[code].asObservable();\n        }\n        this.keydown_states[code].next(value);\n    }\n}\n","import { Injectable, ErrorHandler } from '@angular/core';\n\nimport * as Sentry from '@sentry/browser';\n\n@Injectable()\nexport class SentryService implements ErrorHandler {\n    /**\n     * Handle error thrown by Angular\n     * @param error Angular error\n     */\n    public handleError(error) {\n        Sentry.captureException(error.originalError || error);\n        throw error;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BaseClass } from '../shared/globals/base.class';\nimport { HashMap } from '../shared/utilities/types.utilities';\nimport { VERSION } from 'src/environments/version';\nimport { getItemWithKeys } from '../shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\n\ninterface SettingsMap {\n    api: HashMap;\n    local: HashMap;\n    session: HashMap;\n    [block: string]: HashMap;\n}\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SettingsService extends BaseClass {\n\n    /** Map of settings */\n    private _settings: SettingsMap = { api: {}, local: {}, session: {} };\n    /** Store for promises */\n    private _promises: { [name: string]: Promise<any> } = {};\n    /** Name of the application */\n    private _app_name = 'ACA';\n\n    constructor(private http: HttpClient) {\n        super();\n        const now = dayjs();\n        const build = dayjs(VERSION.time);\n        const built = now.isSame(build, 'd') ? `Today at ${build.format('h:mmA')}` : build.format('D MMM YYYY, h:mmA');\n        this.log('CORE', `${VERSION.core_version}`, null, 'debug', true);\n        this.log('APP', `${VERSION.version} - ${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        await this.loadFromFile('api');\n        this.loadStore('local', localStorage);\n        this.loadStore('session', sessionStorage);\n        if (this._settings.api.debug) {\n            window.debug = true;\n        }\n        if (this._settings.api.app && this._settings.api.app.name) {\n            this._app_name = this._settings.api.app.name;\n        }\n        this.log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() { return this._app_name; }\n\n    /**\n     * Log data to the browser console\n     * @param type Type of message\n     * @param msg Message body\n     * @param args array of argments to log to the console\n     * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n     * @param force Whether to force message to be emitted when debug is disabled\n     */\n    public log(type: string, msg: string, args?: any, stream: ConsoleStream = 'debug', force: boolean = false) {\n        if (window.debug || force) {\n            const colors: string[] = ['color: #E91E63', 'color: #3F51B5', 'color: default'];\n            if (args) {\n                console[stream](`%c[${this.app_name}]%c[${type}] %c${msg}`, ...colors, args);\n            } else {\n                console[stream](`%c[${this.app_name}]%c[${type}] %c${msg}`, ...colors);\n            }\n        }\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get(key: string): any {\n        const keys = key.split('.');\n        let value = null;\n        if (keys[0] === 'session') {\n            keys.shift();\n            value = getItemWithKeys(keys, this._settings.session);\n        } else if (keys[0] === 'local') {\n            keys.shift();\n            value = getItemWithKeys(keys, this._settings.local);\n        } else {\n            value = getItemWithKeys(keys, this._settings.api) ||\n                getItemWithKeys(keys, this._settings.session) ||\n                getItemWithKeys(keys, this._settings.local);\n        }\n        return value;\n    }\n\n    /**\n     * Load settings from the given Storage object\n     * @param name Root key for the settings\n     * @param store Storage item to add to the load into the settings\n     */\n    private loadStore(name: string, store: Storage) {\n        if (store) {\n            for (let i = 0; i < store.length; i++) {\n                const key = store.key(i);\n                const item = store.getItem(key);\n                if (item) { this._settings[name][key] = item; }\n            }\n        }\n    }\n\n    /**\n     * Load setting data from a file\n     * @param name Namespace to add file data to\n     * @param file URL to file to load setting data from\n     */\n    private async loadFromFile(name: string, file: string = 'assets/settings.json', tries: number = 0) {\n        if (file !== 'assets/settings.json' && tries > 5) {\n            return Promise.resolve();\n        }\n        const file_name = file.split('/')[file.split('/').length - 1];\n        console.log('File name:', file_name, window[file_name]);\n        // Check if data has been loaded into the global space\n        if (window[file_name] instanceof Object) {\n            this._settings[name] = { ...(this._settings[name] || {}), ...window[file_name] };\n            return Promise.resolve();\n        }\n        const key = `load|${name}|${file}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<void>((resolve, reject) => {\n                this.http.get(file).subscribe(\n                    (data) => {\n                        this._settings[name] = { ...(this._settings[name] || {}), ...(data || {}) };\n                    }, (e) => {\n                        this.log('Settings', `Failed to load settings from \"${file}\"`);\n                        this._promises[key] = null;\n                        this.timeout(`load_${file_name}`, () => {\n                            this.loadFromFile(name, file, ++tries).then(() => resolve());\n                        }, 2000);\n                    }, () => resolve()\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    EngineResource,\n    EngineSystem,\n    EngineZone,\n    EngineDriver,\n    EngineModule\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from '../../services/app.service';\nimport { EngineServiceLike } from '../utilities/types.utilities';\nimport { first } from 'rxjs/operators';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-base-root-component',\n    template: '',\n    styles: []\n})\nexport class BaseRootComponent<T = EngineResource<any>> extends BaseDirective implements OnInit {\n    /** Name of the API service assoicated with the  */\n    public readonly service_name: string;\n    /** ID of the item to render */\n    public id: string;\n    /** Item to render on the UI */\n    public item: T;\n    /** ID of the active tab in the item space */\n    public tab: string;\n    /** Whether the active item data is being loaded */\n    public loading_item: boolean;\n    /** Total number of items in the list */\n    public total: number;\n    /** Whether the sidebar should be shown on a mobile device */\n    public show_sidebar: boolean;\n    /** Modal Reference */\n    public modal_ref: MatDialogRef<any>;\n    /** Service to get data from */\n    public service: EngineServiceLike;\n\n    /** Service for the active module */\n    public get module(): EngineServiceLike {\n        return this.service;\n    }\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router\n    ) {\n        super();\n        this.service_name = 'Systems';\n        this.service = this._service.Systems;\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(params => {\n                if (params.has('id') && params.get('id') !== '-') {\n                    this.loading_item = true;\n                    const id = decodeURIComponent(params.get('id'));\n                    if (this._service.get('BACKOFFICE.active_item_id') !== id) {\n                        this.id = id;\n                        this.loadItem();\n                    } else {\n                        this.setActiveItem(this._service.get('BACKOFFICE.active_item'));\n                    }\n                } else if (params.has('id') && params.get('id') === '-') {\n                    this.id = '-';\n                    this.setActiveItem(null);\n                }\n                this.timeout('sidebar', () => (this.show_sidebar = !this.id));\n            })\n        );\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this._service.title = this.service_name;\n            this.init();\n        });\n\n        this.subscription(\n            'new_item',\n            this._service.Hotkeys.listen(['KeyN'], () => this.newItem())\n        );\n        this.subscription(\n            'edit_item',\n            this._service.Hotkeys.listen(['KeyE'], () => this.editItem())\n        );\n        this.subscription(\n            'delete_item',\n            this._service.Hotkeys.listen(['KeyD'], () => this.deleteItem())\n        );\n    }\n\n    public init() {}\n\n    /**\n     * Handler events from the sidebar\n     * @param event Sidebar event\n     */\n    public sidebarEvent(event: any) {\n        this.timeout(\n            'sidebar',\n            () => {\n                if (event && event.type === 'new') {\n                    this.newItem();\n                } else {\n                    this.toggleSidebar();\n                }\n            },\n            20\n        );\n    }\n\n    /**\n     * Update the state of showing the sidebar\n     * @param state New show state\n     */\n    public toggleSidebar() {\n        this.timeout('sidebar', () => (this.show_sidebar = !this.show_sidebar));\n    }\n\n    /**\n     * Handle actions on the active item\n     * @param event User action\n     */\n    public itemEvent(event: any) {\n        if (!event) {\n            return;\n        }\n        if (event.type === 'tab' && this.item && event.value) {\n            this._router.navigate([], {\n                relativeTo: this._route,\n                queryParams: { tab: event.value },\n                queryParamsHandling: 'merge'\n            });\n        } else if (event.type === 'new') {\n            this.newItem();\n        } else if (event.type === 'edit') {\n            this.editItem();\n        } else if (event.type === 'delete' && this.item) {\n            this.deleteItem();\n        }\n    }\n\n    /**\n     * Open create modal for a new item\n     */\n    protected newItem() {}\n\n    /**\n     * Open edit modal for active item\n     */\n    protected editItem() {}\n\n    protected deleteItem() {}\n\n    protected loadValues() {}\n\n    /**\n     * Load the data for the active item\n     */\n    protected loadItem() {\n        this.timeout('loading', () => (this.loading_item = true), 10);\n        this.service.show(this.id, { complete: true }).then(\n            item => this.setActiveItem(item),\n            () => {\n                this._service.notifyError(\n                    `Failed to load data for ${this.service._name} \"${this.id}\"`\n                );\n                this.loading_item = false;\n                this._service.navigate([this.service._api_route]);\n            }\n        );\n    }\n\n    protected setActiveItem(new_item: T) {\n        this.item = new_item;\n        this._service.set('BACKOFFICE.active_item_id', this.id);\n        this._service.set('BACKOFFICE.active_item', this.item);\n        if (this.item) {\n            this.subscription(\n                'item_changes',\n                (this.item as any).changeEvents.subscribe(event => {\n                    if (event.type === 'item_saved') {\n                        this.setActiveItem(event.metadata as any);\n                    }\n                })\n            );\n            this.loadValues();\n            this.loadSettings();\n        }\n        this.timeout('item', () => (this.loading_item = false));\n    }\n\n    protected loadSettings(): void {\n        if (\n            this.item instanceof EngineSystem ||\n            this.item instanceof EngineZone ||\n            this.item instanceof EngineDriver ||\n            this.item instanceof EngineModule\n        ) {\n            this._service.set('loading_settings', true);\n            this._service.EngineSettings.query({ parent_id: this.item.id }).then(\n                list => {\n                    this._service.set('loading_settings', false);\n                    for (const settings of list) {\n                        (this.item as any).settings[settings.encryption_level] = settings;\n                    }\n                },\n                err => {\n                    this._service.set('loading_settings', false);\n                    this._service.notifyError(\n                        `Error loading settings. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        }\n    }\n}\n","import {\n    Component,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    Input,\n    HostListener,\n    OnInit\n} from '@angular/core';\nimport { MatMenuTrigger, MatMenuPanel } from '@angular/material/menu';\n\nimport { BaseDirective } from '../../globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: '[context-menu]',\n    templateUrl: './context-menu.template.html',\n    styleUrls: ['./context-menu.styles.scss']\n})\nexport class ContextMenuComponent extends BaseDirective implements OnInit, AfterViewInit {\n    /** List of context menu items */\n    @Input('context-menu') public menu: MatMenuPanel;\n    /** Offset of the context menu on the x axis */\n    @Input() public offset_x = 0;\n    /** Offset of the context menu on the y axis */\n    @Input() public offset_y = 0;\n    /** Top position of the menu */\n    public top: number;\n    /** Whether menu show to the left of the cursor */\n    public right: boolean;\n    /** Whether the context menu should be shown */\n    public show: boolean;\n    /** Location of the menu */\n    public position: { top: number; left: number };\n\n    @ViewChild('container', { static: true }) private container: ElementRef<HTMLDivElement>;\n    @ViewChild(MatMenuTrigger, { static: true }) private trigger: MatMenuTrigger;\n\n    @HostListener('contextmenu', ['$event']) public onEvent(event) {\n        event.preventDefault();\n        this.position = { top: event.clientY + this.offset_y, left: event.clientX + this.offset_x };\n        if (this.trigger) {\n            this.trigger.openMenu();\n        }\n        this.timeout('update_position', () => this.updatePosition(), 50);\n    }\n\n    constructor(private _service: ApplicationService, private _element: ElementRef<HTMLElement>) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.position = { top: 0, left: 0 };\n    }\n\n    public ngAfterViewInit() {\n        setTimeout(() => this.updatePosition(), 10);\n    }\n\n    /** Update the position of the context menu */\n    public updatePosition() {\n        if (!this.container || !this.container.nativeElement) {\n            return setTimeout(() => this.updatePosition(), 50);\n        }\n        const box = this.container.nativeElement.getBoundingClientRect();\n        this.right = false;\n        this.top = 0;\n        if (window.innerHeight < box.bottom) {\n            this.top = window.innerHeight - (box.bottom + 5);\n        }\n        this.right = box.right - 5 > window.innerWidth;\n    }\n}\n","<ng-content></ng-content>\n<div\n    class=\"context-placeholder\"\n    #container\n    [style.top]=\"position.top + 'px'\"\n    [style.left]=\"position.left + 'px'\"\n    [matMenuTriggerFor]=\"menu\"\n>\n</div>\n","import { Component, OnInit, forwardRef, Input, ViewChild, LOCALE_ID, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatMenuTrigger } from '@angular/material/menu';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\nimport * as dayjs from 'dayjs';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n    selector: 'a-date-field',\n    templateUrl: './date-field.component.html',\n    styleUrls: ['./date-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateFieldComponent extends BaseDirective implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = dayjs().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: number;\n    /** Pipe for formatting date strings */\n    private date_pipe: DatePipe;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    @ViewChild(MatMenuTrigger, { static: true }) private _trigger: MatMenuTrigger;\n\n    /** First allowed date on the calendar */\n    public get from(): number {\n        return this._from || dayjs().startOf('d').valueOf();\n    }\n    /** Current date value */\n    public get until(): number {\n        return this._to || dayjs().endOf('d').add(1, 'y').valueOf();\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return this.date_pipe.transform(dayjs(this.date).toDate(), 'DD MMM YYYY');\n    }\n\n    /** Whether date picker is open */\n    public get is_open(): boolean {\n        return this._trigger.menuOpen;\n    }\n\n    constructor(@Inject(LOCALE_ID) private _locale: string) {\n        super();\n        this.date_pipe = new DatePipe(this._locale);\n    }\n\n    public ngOnInit() {\n        this.date = dayjs().valueOf();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        this.date = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value;\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /** Set the state of the tooltip to closed after delay */\n    public closeDatePicker() {\n        this._trigger.closeMenu();\n    }\n\n    /** Set the state of the tooltip to closed after delay */\n    public openDatePicker() {\n        this._trigger.openMenu();\n    }\n}\n","<div\n    class=\"date-field\"\n    role=\"button\"\n    form-field\n    tabindex=\"0\"\n    [class.active]=\"is_open\"\n    [attr.disabled]=\"disabled\"\n    (keydown.enter)=\"openDatePicker()\"\n    [matMenuTriggerFor]=\"appMenu\"\n>\n    <div class=\"display\">{{ date_string }}</div>\n    <div class=\"icon\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: is_open ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n<mat-menu #appMenu=\"matMenu\">\n    <div mat-menu-item class=\"date-picker\" (click)=\"$event.stopPropagation()\">\n        <a-date-picker\n            [ngModel]=\"date\"\n            [options]=\"{ from: from, to: until }\"\n            (ngModelChange)=\"setValue($event); closeDatePicker()\"\n        ></a-date-picker>\n    </div>\n</mat-menu>\n","import { Component, OnInit, forwardRef, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, map, catchError } from 'rxjs/operators';\n\nimport { EngineResource, EngineModule, EngineDriverRole } from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { EngineServiceLike, HashMap, Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'item-search-field',\n    templateUrl: './item-search-field.component.html',\n    styleUrls: ['./item-search-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ItemSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ItemSearchFieldComponent<T extends Identity = any> extends BaseDirective\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Limit available options to these */\n    @Input() public options: T[];\n    /** Function for filtering out options */\n    @Input() public exclude: (_: T) => boolean;\n    /** Minimum number of characters needed to start a server query */\n    @Input('minLength') public min_length = 0;\n    /** Whether item list is loading */\n    @Input() public loading: boolean;\n    /** Service used for searching items */\n    @Input() public service: EngineServiceLike;\n    /** Currently selected item */\n    public active_item: T;\n    /** Item list to display */\n    public item_list: T[];\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** List of items from an API search */\n    public search_results$: Observable<T[]>;\n    /** Subject holding the value of the search */\n    public readonly search$ = new Subject<string>();\n    /** Form control on change handler */\n    private _onChange: (_: T) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: T) => void;\n\n    /** Map of item names to their IDs */\n    public get item_name(): HashMap<string> {\n        const map = {};\n        const list = this.item_list || [];\n        for (let item of list) {\n            if (item instanceof EngineModule) {\n                const detail =\n                    item.role === EngineDriverRole.Service\n                        ? item.uri\n                        : item.role === EngineDriverRole.Logic\n                        ? item.control_system_id\n                        : item.ip;\n                map[item.id] = `${item.name || '<Unnamed>'} <span class=\"small\">${detail}<span>`;\n            } else {\n                map[item.id] = (item as any).custom_name || item.name || '<Unnamed>';\n            }\n        }\n        return map;\n    }\n\n    public ngOnInit(): void {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap((query) => {\n                this.loading = true;\n                return this.options && this.options.length > 0\n                    ? Promise.resolve(this.options)\n                    : !this.min_length || query.length >= this.min_length\n                    ? (this.service.query({ q: query || '', cache: 5 * 1000 }) as Promise<T[]>)\n                    : Promise.resolve([]);\n            }),\n            catchError((_) => of([])),\n            map((list: T[]) => {\n                this.loading = false;\n                const search = (this.search_str || '').toLowerCase();\n                console.log('List:', list);\n                return list.filter((item: any) => {\n                    const match =\n                        item.name.toLowerCase().indexOf(search) >= 0 ||\n                        (item.email || '').toLowerCase().indexOf(search) >= 0;\n                    return match && (this.exclude ? !this.exclude(item) : true);\n                });\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.item_list = list))\n        );\n        this.timeout('init', () => {\n            this.search$.next('');\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.service) {\n            this.search$.next('');\n        }\n    }\n\n    /**\n     * Reset the search string back to the name of the active item\n     */\n    public resetSearchString() {\n        this.timeout(\n            'value',\n            () => {\n                if (this.active_item) {\n                    this.search_str = this.active_item.name || this.search_str;\n                }\n            },\n            10\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: T): void {\n        this.active_item = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T) {\n        console.log('Value:', value);\n        this.active_item = value;\n        this.resetSearchString();\n    }\n\n    /**\n     * Registers a callback function that is called when the\n     * control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: T) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API\n     * on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: T) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div class=\"item-search-field\" form-field>\n    <mat-form-field appearance=\"outline\">\n        <input\n            matInput\n            name=\"item-search\"\n            [(ngModel)]=\"search_str\"\n            (ngModelChange)=\"search$.next($event)\"\n            [placeholder]=\"'Search for ' + (service?.name || service?._name || '') + '...'\"\n            i18n-placeholder\n            [matAutocomplete]=\"auto\"\n            (focus)=\"search_str = ''; search$.next(' ')\"\n            (blur)=\"resetSearchString()\"\n        />\n        <div class=\"prefix\" matPrefix>\n            <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'search' }\"></app-icon>\n        </div>\n        <div class=\"suffix\" matSuffix *ngIf=\"loading\">\n            <mat-spinner diameter=\"16\"></mat-spinner>\n        </div>\n    </mat-form-field>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"setValue($event.option.value)\">\n        <mat-option *ngFor=\"let option of item_list\" [value]=\"option\">\n            <div class=\"name\" [innerHTML]=\"item_name[option.id] | sanitize\"></div>\n            <div class=\"email\">{{ option.id }}{{ option.extra ? ' - ' + option.extra : '' }}</div>\n        </mat-option>\n    </mat-autocomplete>\n</div>\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'object-list-field',\n    templateUrl: './object-list-field.component.html',\n    styleUrls: ['./object-list-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ObjectListFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class ObjectListFieldComponent extends BaseDirective implements ControlValueAccessor {\n    /** List of fields that can be populated for each object */\n    @Input() public fields: string[];\n    /** List of objects */\n    public active_list: HashMap[] = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: HashMap[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: HashMap[]) => void;\n\n    /** Add a new item the the active list */\n    public addRow() {\n        if (!this.active_list) {\n            this.active_list = [];\n        }\n        this.active_list.push({});\n        this.setValue(this.active_list);\n    }\n\n    /**\n     * Remove item from the active list\n     * @param item Item to remove\n     */\n    public removeRow(item: HashMap) {\n        const index = this.active_list.indexOf(item);\n        if (index >= 0) {\n            this.active_list.splice(index, 1);\n        }\n        this.setValue(this.active_list);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: HashMap[]): void {\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: HashMap[]) {\n        this.active_list = value;\n    }\n\n    /**\n     * Registers a callback function that is called when the\n     * control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: HashMap[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms\n     * API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: HashMap[]) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div class=\"object-list\" *ngIf=\"fields && fields.length\">\n    <div class=\"header row\" *ngIf=\"active_list && active_list.length\">\n        <div class=\"field\" *ngFor=\"let field of fields\" [attr.name]=\"field\">\n            {{ field }}\n        </div>\n        <div class=\"gap\"></div>\n    </div>\n    <div class=\"row\" *ngFor=\"let item of active_list\">\n        <div class=\"field\" *ngFor=\"let field of fields\" [attr.name]=\"field\">\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    [name]=\"field\"\n                    [placeholder]=\"field\"\n                    i18n-placeholder\n                    [(ngModel)]=\"item[field]\"\n                    (ngModelChange)=\"setValue(active_list)\"\n                />\n            </mat-form-field>\n        </div>\n        <button mat-icon-button (tapped)=\"removeRow(item)\">\n            <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n        </button>\n    </div>\n    <div class=\"row footer\">\n        <button mat-button type=\"button\" (tapped)=\"addRow()\">\n            <div class=\"contents\">\n                <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n                <div class=\"text\" i18n=\"@@newItem\">New Item</div>\n            </div>\n        </button>\n    </div>\n</div>\n","/// <reference path=\"../../../../../../node_modules/monaco-editor/monaco.d.ts\" />\n\nimport {\n    Component,\n    forwardRef,\n    ViewChild,\n    ElementRef,\n    OnInit,\n    Input,\n    OnDestroy,\n    SimpleChanges,\n    OnChanges\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n// import * as monaco_yaml from 'monaco-editor/dev/vs/basic-languages/yaml/yaml.js';\n\n@Component({\n    selector: 'settings-form-field',\n    templateUrl: './settings-field.component.html',\n    styleUrls: ['./settings-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SettingsFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class SettingsFieldComponent extends BaseDirective\n    implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\n    /** Whether form field is readonly */\n    @Input() public readonly = true;\n    /** Resize */\n    @Input() public resize: boolean;\n    /** Input language for syntax highlighting and error checking */\n    @Input() public lang = 'yaml';\n    /** Current value for the */\n    public settings_string = ' ';\n    /** Form control on change handler */\n    private _onChange: (_: string) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: string) => void;\n\n    /** Reference to the element container the monaco editor */\n    @ViewChild('editor', { static: true }) private element: ElementRef;\n    /** API object for the monaco editor */\n    private editor: any;\n\n    public ngOnInit(): void {\n        this.createEditor();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.readonly && this.editor) {\n            this.editor.updateOptions({ readOnly: !!this.readonly });\n        }\n        if (changes.lang && this.editor) {\n            this.editor.updateOptions({ language: this.lang || 'yaml' });\n        }\n        if (changes.resize) {\n            this.resizeEditor();\n        }\n    }\n\n    public ngOnDestroy() {\n        if (this.editor) {\n            this.editor.dispose();\n            this.editor = null;\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.settings_string = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: string) {\n        this.settings_string = `${value}`;\n        if (this.editor) {\n            if (this.readonly) {\n                this.editor.updateOptions({ readOnly: false });\n                this.editor.setValue(this.settings_string);\n                this.editor.updateOptions({ readOnly: true });\n            } else {\n                this.editor.setValue(this.settings_string);\n            }\n        }\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: string) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: string) => void): void {\n        this._onTouch = fn;\n    }\n\n    /** Update sizing of the editor after window has resized */\n    public resizeEditor() {\n        this.timeout('resize', () => this.createEditor(), 100);\n    }\n\n    /**\n     * Create and render the monaco editor to the component\n     */\n    private createEditor() {\n        if (this.element && this.element.nativeElement) {\n            if (this.editor) {\n                this.editor.dispose();\n                this.editor = null;\n            }\n            // monaco.languages.register(monaco_yaml);\n            this.editor = monaco.editor.create(this.element.nativeElement, {\n                value: this.settings_string || '',\n                language: this.lang || 'yaml',\n                fontFamily: `\"Fira Code\", monospace`,\n\n                lineNumbers: 'on',\n                roundedSelection: false,\n                scrollBeyondLastLine: false,\n                readOnly: this.readonly,\n                theme: 'vs-dark'\n            });\n            this.editor.onDidChangeModelContent(() => {\n                this.setValue(this.editor.getValue());\n            });\n        }\n    }\n}\n","<div class=\"settings-field\" widget (window:resize)=\"resizeEditor()\">\n    <div class=\"editor\" #editor></div>\n</div>\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    ViewChildren,\n    ElementRef,\n    QueryList,\n    SimpleChanges,\n    forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineModuleFunction, HashMap, TriggerFunction, EngineSystem } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../../../services/app.service';\nimport { BaseDirective } from '../../../globals/base.directive';\nimport { ViewResponseModalComponent } from 'src/app/overlays/view-response-modal/view-response-modal.component';\n\ninterface EngineModuleLike {\n    id: string;\n    name: string;\n    module: string;\n    index: number;\n}\n\ninterface ModuleFunction extends EngineModuleFunction {\n    name?: string;\n}\n\n@Component({\n    selector: 'system-exec-field',\n    templateUrl: './system-exec-field.template.html',\n    styleUrls: ['./system-exec-field.styles.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SystemExecFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class SystemExecFieldComponent extends BaseDirective\n    implements OnChanges, ControlValueAccessor {\n    /** ID of the system to execute command on */\n    @Input() public system: EngineSystem;\n    /** Whether the selected function is executable from this field */\n    @Input() public executable = true;\n    /** Emitter for exec results */\n    @Output() public event = new EventEmitter();\n    /** List of modules of the system */\n    public devices: EngineModuleLike[] = [];\n    /** List of available functions for the active module  */\n    public methods: ModuleFunction[] = [];\n    /** Currently selected module */\n    public active_module: EngineModuleLike;\n    /** Current selected module function */\n    public active_method: ModuleFunction;\n    /** Mapping or errors to field names */\n    public error: HashMap<boolean> = {};\n    /** Whether the selected function's params are valid */\n    public fields_valid: boolean;\n    /** Mapping of function arguments to values */\n    public fields: HashMap = {};\n    /** Index of the active function param field */\n    public active_field: number;\n    /** Current location with the input fields for function params */\n    public field_pos: number;\n    /** Previous location with the input fields for function params */\n    public last_location: number;\n    /** Current value of the active input field */\n    public field_value: string;\n    /** Parameter list for the active function */\n    public param_list: [string, string, any?][] = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: TriggerFunction) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: TriggerFunction) => void;\n\n    /** List of elements containing arguments */\n    @ViewChildren('argument') private arg_list: QueryList<ElementRef>;\n\n    /** Mapping of function execution details */\n    public get function_value(): TriggerFunction {\n        if (!this.fields_valid) {\n            return null;\n        }\n        const args = this.processArguments();\n        const method = this.active_method ? this.active_method : { order: [], params: {}, name: '' };\n        return {\n            mod: `${this.active_module.module}_${this.active_module.index}`,\n            method: method.name,\n            args: args.reduce((map, arg, index) => {\n                map[method.params[method.order[index]][1]] = arg;\n                return map;\n            }, {})\n        };\n    }\n\n    public get placeholder(): HashMap<string> {\n        const map = {};\n        for (const arg of this.param_list) {\n            map[arg[0]] = (arg[2] !== undefined ? '[' + arg[0] + (arg[2] ? '=' + arg[2] : '') + ']' : arg[0])\n        }\n        return map;\n    }\n\n    constructor(private service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.system) {\n            this.devices = [];\n            this.loadModules();\n        }\n    }\n\n    /**\n     * Load the available modules for the active system\n     * @param offset Page offset of the list\n     */\n    public loadModules(offset: number = 0) {\n        if (this.system) {\n            this.service.Modules.query({ control_system_id: this.system.id, offset, limit: 500, complete: true } as any).then(\n                list => {\n                    this.devices = (list || []).filter(device => device.running).map(device => {\n                        const module_name =\n                            device.custom_name ||\n                            device.name\n                        return {\n                            id: device.id,\n                            name: device.name,\n                            module: module_name,\n                            index: 1\n                        };\n                    });\n                    this.devices.sort(\n                        (a, b) =>\n                            this.system.modules.indexOf(a.id) - this.system.modules.indexOf(b.id)\n                    );\n                    this.devices.forEach(\n                        device =>\n                            (device.index =\n                                this.devices\n                                    .filter(d => d.module === device.module)\n                                    .findIndex(mod => mod.id === device.id) + 1)\n                    );\n                    if (\n                        this.active_module &&\n                        !(this.devices || []).find(mod => mod.id === this.active_module.id)\n                    ) {\n                        this.devices.unshift(this.active_module);\n                    }\n                },\n                () => null\n            );\n        }\n    }\n\n    /**\n     * Load the available functions for the given module\n     * @param item Module to grab function list for\n     */\n    public loadFunctions(item: EngineModuleLike) {\n        this.methods = null;\n        this.fields = {};\n        this.active_module = item;\n        this.service.Systems.functionList(this.system.id, item.module, item.index).then(\n            list => {\n                if (list) {\n                    this.methods = Object.keys(list).map(i => ({ name: i, ...list[i] }));\n                    this.setMethod(this.active_method.name, this.fields);\n                }\n            },\n            () => {\n                this.service.notifyInfo('No executable methods returned.');\n            }\n        );\n    }\n\n    public selectFunction(fn: ModuleFunction) {\n        this.active_method = fn;\n        if (fn) {\n            this.param_list = Object.keys(this.active_method.params).map(\n                i => [i, ...this.active_method.params[i]] as any\n            );\n        }\n        this.checkFields();\n    }\n\n    /**\n     * Validate the arguments are valid JSON types\n     */\n    public checkFields() {\n        // Check fields\n        this.fields_valid = !!this.active_method;\n        this.error = {};\n        if (this.active_method) {\n            const params = this.param_list;\n            for (const arg of params || []) {\n                if (arg[2] === undefined && !this.fields[arg[0]]) {\n                    this.fields_valid = false;\n                    return;\n                } else {\n                    try {\n                        JSON.parse(`[${this.fields[arg[0]] || 'null'}]`);\n                    } catch (e) {\n                        this.error[arg[0]] = true;\n                        this.fields_valid = false;\n                    }\n                }\n            }\n        }\n        // Update field state\n        const args = this.arg_list.toArray();\n        if (args && args.length > 0) {\n            const current = args[this.active_field];\n            if (current) {\n                this.field_pos = current.nativeElement.selectionEnd;\n                this.timeout('field', () => (this.field_value = current.nativeElement.value));\n            }\n        }\n        this.setValue(this.function_value);\n    }\n\n    /**\n     * Move cursor to the next argument field\n     */\n    public nextField(e) {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        if (this.arg_list) {\n            const args = this.arg_list.toArray();\n            const current = args[this.active_field].nativeElement;\n            const other = e.key.toLowerCase() !== 'arrowright';\n            const right_arrow =\n                e.key.toLowerCase() === 'arrowright' &&\n                this.last_location === (current.value || '').length;\n            if ((other || right_arrow) && this.active_field < args.length - 1) {\n                const el = args[this.active_field + 1].nativeElement;\n                el.focus();\n                el.selectionStart = el.selectionEnd = 0;\n            }\n            this.last_location = current.selectionEnd;\n        }\n    }\n\n    public focused(index: number) {\n        this.active_field = index;\n        const args = this.arg_list.toArray();\n        const current = args[this.active_field];\n        this.field_pos = current.nativeElement.selectionEnd;\n        this.last_location = (current.nativeElement.value || '').length;\n    }\n\n    /**\n     * Move cursor to the previous argument field\n     */\n    public previousField(e) {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        if (this.arg_list) {\n            const args = this.arg_list.toArray();\n            const current = args[this.active_field];\n            const backspace = e.key.toLowerCase() === 'backspace' && this.last_location === 0;\n            const left_arrow = e.key.toLowerCase() === 'arrowleft' && this.last_location === 0;\n            if (\n                (backspace || left_arrow) &&\n                current.nativeElement.selectionEnd === 0 &&\n                this.active_field > 0\n            ) {\n                const el = args[this.active_field - 1].nativeElement;\n                el.focus();\n                el.selectionStart = el.selectionEnd = (el.value || '').length;\n            }\n            this.last_location = current.nativeElement.selectionEnd;\n        }\n    }\n\n    /**\n     * Execute the selected method\n     */\n    public execute() {\n        if (!this.executable) {\n            return;\n        }\n        this.checkFields();\n        if (this.fields_valid) {\n            // Check if any optional arguments have a value\n            const args = this.processArguments();\n            // Execute function\n            const details = {\n                method: this.active_method.name,\n                module: this.active_module.module,\n                index: this.active_module.index,\n                args\n            };\n            this.service.Systems.execute(\n                this.system.id,\n                details.method,\n                details.module,\n                details.index,\n                details.args\n            ).then(\n                result => {\n                    this.service.notifySuccess(\n                        'Command successful executed.\\nView Response?',\n                        'View',\n                        () => this.viewDetails(result)\n                    );\n                },\n                err => {\n                    if (typeof err === 'string' && err.length < 64) {\n                        this.service.notifyError(err);\n                    } else {\n                        this.service.notifyError(\n                            `Executing '${this.active_method.name}' failed.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err.response)\n                        );\n                    }\n                }\n            );\n        } else {\n            this.service.notifyError('One or more fields are invalid.');\n        }\n    }\n\n    /**\n     * Process the active list of argument values\n     */\n    private processArguments(): any[] {\n        const arg_list = [];\n        for (const arg of this.active_method.order) {\n            arg_list.push(this.fields[arg] || null);\n        }\n        if (this.active_method.arity < 0) {\n            const len = arg_list.length;\n            for (let i = len - 1; i >= Math.abs(this.active_method.arity) - 1; i--) {\n                if (arg_list[i]) {\n                    break;\n                }\n                arg_list.pop();\n            }\n        }\n        // Format arguments\n        let args = `[`;\n        for (const arg of arg_list) {\n            if (args !== '[') {\n                args += ',';\n            }\n            args += `${arg}`;\n        }\n        args += ']';\n        let argument_list = [];\n        try {\n            argument_list = JSON.parse(args);\n        } catch (e) {\n            console.error(e);\n        }\n        return argument_list;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: TriggerFunction): void {\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: TriggerFunction) {\n        if (value) {\n            if (value.mod) {\n                const parts = value.mod.split('_');\n                this.active_module = {\n                    id: value.mod,\n                    name: value.mod,\n                    module: parts[0],\n                    index: +parts[1]\n                };\n                if (!(this.devices || []).find(mod => mod.id === this.active_module.id)) {\n                    this.devices.unshift(this.active_module);\n                }\n            }\n            this.setMethod(value.method, value.args);\n            if (value.args) {\n                this.fields = value.args;\n            }\n        }\n    }\n\n    private setMethod(name: string, args: HashMap = {}) {\n        if (name) {\n            const method = (this.methods || []).find(a_method => a_method.name === name);\n            if (!method) {\n                this.active_method = {\n                    name,\n                    arity: Object.keys(args).length - 1,\n                    params: Object.keys(args).map(key => ['req', key]) as any,\n                    order: Object.keys(args)\n                };\n                this.methods.unshift(this.active_method);\n            } else {\n                this.active_method = method;\n            }\n        }\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { content }\n        });\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: TriggerFunction) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: TriggerFunction) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<section\n    class=\"execute\"\n    *ngIf=\"system && system.id && devices && devices.length > 0; else empty_state\"\n>\n    <div class=\"row\">\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                #select\n                [value]=\"active_module\"\n                (valueChange)=\"loadFunctions($event)\"\n                placeholder=\"Select a module\"\n                i18n-placeholder=\"@@selectModule\"\n            >\n                <mat-option *ngFor=\"let option of devices || []\" [value]=\"option\">\n                    {{ option.module || option.name || \"&lt;Unnamed&gt;\" }} {{ option.index ?\n                    option.index : '' }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <ng-container *ngIf=\"active_module\">\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"methods && methods.length; else empty_function_state\"\n            >\n                <mat-select\n                    #select\n                    [value]=\"active_method\"\n                    (valueChange)=\"selectFunction($event)\"\n                    placeholder=\"Select a function\"\n                    i18n-placeholder=\"@@selectFunction\"\n                >\n                    <mat-option *ngFor=\"let option of methods || []\" [value]=\"option\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </ng-container>\n        <button\n            *ngIf=\"active_method && executable\"\n            [class.not-mobile]=\"true\"\n            mat-button\n            [disabled]=\"!fields_valid\"\n            (tapped)=\"execute()\"\n            i18n=\"@@execute\"\n        >\n            Execute\n        </button>\n    </div>\n    <div class=\"row function\" *ngIf=\"active_method\">\n        <div class=\"fn-input\">\n            <div class=\"bracket\">{{active_method.name}}(</div>\n            <div class=\"arg\" *ngFor=\"let arg of param_list; let i = index\">\n                <span class=\"seperator\" [class.solid]=\"arg[2] !== undefined || fields[arg[0]]\"\n                    >{{(i > 0 ? ',&nbsp;' : '')}}</span\n                >\n                <input\n                    #argument\n                    [(ngModel)]=\"fields[arg[0]]\"\n                    (ngModelChange)=\"checkFields()\"\n                    [class.error]=\"error && error[arg[0]]\"\n                    [style.width]=\"(.6 * (fields[arg[0]] || placeholder[arg[0]]).length + .3) + 'em'\"\n                    [placeholder]=\"placeholder[arg[0]]\"\n                    (keyup.enter)=\"nextField($event)\"\n                    (keydown.,)=\"nextField($event)\"\n                    (keyup.arrowright)=\"nextField($event)\"\n                    (keyup.backspace)=\"previousField($event)\"\n                    (keyup.arrowleft)=\"previousField($event)\"\n                    (focus)=\"focused(i)\"\n                />\n            </div>\n            <div class=\"bracket\">)</div>\n        </div>\n    </div>\n    <button\n        *ngIf=\"active_method && executable\"\n        [class.mobile-only]=\"true\"\n        mat-button\n        [disabled]=\"!fields_valid\"\n        (tapped)=\"execute()\"\n        i18n=\"@@execute\"\n    >\n        Execute\n    </button>\n</section>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@execNoModules\">No running modules on the system</div>\n    </div>\n</ng-template>\n<ng-template #empty_function_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@execNoFunctions\">No executable methods on the selected module</div>\n    </div>\n</ng-template>\n","import {\n    Component,\n    forwardRef,\n    Input,\n    ViewChild,\n    OnInit,\n    SimpleChanges,\n    OnChanges,\n    LOCALE_ID,\n    Inject\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { timeFormatString } from 'src/app/shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n    selector: 'a-time-field',\n    templateUrl: './time-field.component.html',\n    styleUrls: ['./time-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class TimeFieldComponent extends BaseDirective\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step = 15;\n    /** Whether past times are allowed */\n    @Input() public no_past_times = true;\n    /** String representing the currently set time */\n    public date: number = dayjs().valueOf();\n    /** String representing the currently set time */\n    public time: string = dayjs().format('HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n\n    private date_pipe: DatePipe;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    constructor(@Inject(LOCALE_ID) private _locale: string) {\n        super();\n        this.date_pipe = new DatePipe(this._locale);\n    }\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n        this.timeout('hide', () => (this.show_select = false));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(\n                this.date,\n                !this.no_past_times,\n                this.step\n            );\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = (this.time || '00:00').split(':');\n        const date = dayjs(this.date)\n            .hour(+time[0])\n            .minute(+time[1]);\n        if (\n            date.minute() % 15 !== 0 &&\n            !this._time_options.find(option => option.id === date.format('HH:mm'))\n        ) {\n            this._time_options.push({\n                name: `${this.date_pipe.transform(date.toDate(), timeFormatString())}`,\n                id: date.format('HH:mm')\n            });\n            this._time_options.sort((a, b) => `${a.id}`.localeCompare(`${b.id}`));\n        }\n        return this._time_options;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        if (this._onChange) {\n            const time = (this.time || '00:00').split(':');\n            const date = dayjs(this.date)\n                .hour(+time[0])\n                .minute(+time[1]);\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value;\n        const date = dayjs(this.date);\n        this.time = date.format('HH:mm');\n        this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription(\n                    'listen_close',\n                    this.select_field.openedChange.subscribe(state => {\n                        if (!state) {\n                            this.show_select = false;\n                        }\n                    })\n                );\n            }\n        });\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(\n        datestamp: number,\n        show_past: boolean,\n        step: number = 15\n    ): Identity[] {\n        const now = dayjs();\n        let date = dayjs(datestamp);\n        const blocks: Identity[] = [];\n        if (show_past || date.isAfter(now, 'd')) {\n            date = date.startOf('d');\n        }\n        date = date.minute(Math.ceil(date.minute() / step) * step);\n        const end = date.endOf('d');\n        // Add options for the rest of the day\n        while (date.isBefore(end, 'm')) {\n            blocks.push({\n                name: `${this.date_pipe.transform(date.toDate(), timeFormatString())}`,\n                id: date.format('HH:mm')\n            });\n            date = date.add(step, 'm');\n        }\n        return blocks;\n    }\n}\n","<div class=\"time-field\" role=\"button\" form-field tabindex=\"0\" (keydown.enter)=\"showSelect()\" *ngIf=\"!show_select\">\n    <div class=\"display\">\n        <input matInput type=\"time\" [ngModel]=\"time\" (ngModelChange)=\"setValue($event)\" />\n    </div>\n    <div class=\"icon\" (tapped)=\"showSelect()\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: show_select ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n<mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n    <mat-select #select [value]=\"time\" (valueChange)=\"setValue($event)\">\n        <mat-option *ngFor=\"let option of time_options\" [value]=\"option.id\">\n            {{ option.name }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n","import { Component, OnInit, Renderer2, ViewChild, ElementRef } from '@angular/core';\n\nimport { EngineDebugService } from 'src/app/services/debug.service';\nimport { ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR } from '../../globals/angular-animations';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { eventToPoint } from '../../utilities/general.utilities';\nimport { Point } from '../../utilities/types.utilities';\n\n@Component({\n    selector: 'app-debug-output',\n    templateUrl: './debug-output.component.html',\n    styleUrls: ['./debug-output.component.scss'],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR]\n})\nexport class DebugOutputComponent extends BaseDirective implements OnInit {\n    /** Whether display output is shown */\n    public show_content: boolean = true;\n    /** Display string for debug logs */\n    public logs: string;\n    /** Height of the debug console */\n    public height: number = 384;\n    /** Width of the debug console */\n    public width: number = 768;\n    /** Toggle to resize the terminal display */\n    public resize: boolean;\n    /** Start point for resizing the console box */\n    private _resize_start: Point;\n\n    @ViewChild('content', { static: false }) private _content_el: ElementRef<HTMLDivElement>;\n\n    /** Whether user is listening for debug information */\n    public get is_enabled(): boolean {\n        return this._service.is_listening;\n    }\n    constructor(private _service: EngineDebugService, private _renderer: Renderer2) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'changes',\n            this._service.events.subscribe(_ => {\n                this.logs = this._service.terminal_string;\n            })\n        );\n    }\n\n    /** Clear all the debug logs */\n    public clearDebugMessages() {\n        this._service.clearEvents();\n    }\n\n    public startResize(event: MouseEvent | TouchEvent, dir: 'x' | 'y' | 'xy') {\n        this._resize_start = eventToPoint(event);\n        if (event instanceof MouseEvent) {\n            this.subscription(\n                'resize_move',\n                this._renderer.listen('window', 'mousemove', event => this.resizeMove(event, dir))\n            );\n            this.subscription(\n                'resize_end',\n                this._renderer.listen('window', 'mouseup', _ => {\n                    this.unsub('resize_move');\n                    this.unsub('resize_end');\n                    const box = this._content_el.nativeElement.getBoundingClientRect();\n                    this.height = box.height;\n                    this.width = box.width;\n                })\n            );\n        } else {\n            this.subscription(\n                'resize_move',\n                this._renderer.listen('window', 'touchmove', event => this.resizeMove(event, dir))\n            );\n            this.subscription(\n                'resize_end',\n                this._renderer.listen('window', 'touchend', _ => {\n                    this.unsub('resize_move');\n                    this.unsub('resize_end');\n                    const box = this._content_el.nativeElement.getBoundingClientRect();\n                    this.height = box.height;\n                    this.width = box.width;\n                })\n            );\n        }\n    }\n\n    private resizeMove(event: MouseEvent | TouchEvent, dir: 'x' | 'y' | 'xy') {\n        const point = eventToPoint(event);\n        const diff = { x: point.x - this._resize_start.x, y: point.y - this._resize_start.y };\n        if (dir.indexOf('x') >= 0) {\n            this.width = this.width - diff.x;\n        }\n        if (dir.indexOf('y') >= 0) {\n            this.height = this.height - diff.y;\n        }\n        this._resize_start = point;\n        this.timeout('resize', () => this.resize = !this.resize, 50);\n    }\n\n}\n","<ng-container *ngIf=\"is_enabled\">\n    <div class=\"debug-output\" [class.disabled]=\"!show_content\">\n        <div class=\"content\" #content [@show]=\"show_content ? 'show' : 'hide'\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n            <div class=\"header\">\n                <div class=\"text\" i18n=\"@@debugConsole\">Debug Console</div>\n                <button mat-button (tapped)=\"clearDebugMessages()\" i18n=\"@@clear\">Clear</button>\n            </div>\n            <a-terminal [content]=\"logs\" [resize]=\"resize\"></a-terminal>\n            <div\n                class=\"resize-bar top\"\n                (mousedown)=\"startResize($event, 'y')\"\n                (touchstart)=\"startResize($event, 'y')\"\n            ></div>\n            <div\n                class=\"resize-bar left\"\n                (mousedown)=\"startResize($event, 'x')\"\n                (touchstart)=\"startResize($event, 'x')\"\n            ></div>\n            <div\n                class=\"resize-bar top-left\"\n                (mousedown)=\"startResize($event, 'xy')\"\n                (touchstart)=\"startResize($event, 'xy')\"\n            ></div>\n        </div>\n        <button mat-icon-button (tapped)=\"show_content = !show_content\">\n            <app-icon\n                [icon]=\"{ class: show_content ? 'backoffice-cross' : 'backoffice-terminal' }\"\n            ></app-icon>\n        </button>\n    </div>\n</ng-container>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'application-form',\n    templateUrl: './application-form.component.html',\n    styleUrls: ['./application-form.component.scss']\n})\nexport class ApplicationFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"application form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"application-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@nameLabel\"\n                    >Name<span>*</span>:</label\n                >\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"application-name\"\n                        placeholder=\"Application Name\"\n                        i18n-placeholder=\"@@appNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@appNameError\"\n                        >Application name is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.scopes\">\n                <label for=\"scopes\" i18n=\"@@scopesLabel\">Scopes:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"scopes\"\n                        placeholder=\"Access Scopes\"\n                        i18n-placeholder=\"@@scopePlaceholder\"\n                        formControlName=\"scopes\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.skip_authorization\">\n            <mat-checkbox\n                name=\"skip-authorization\"\n                formControlName=\"skip_authorization\"\n                i18n=\"@@skipAuthLabel\"\n                >Skip Authorization</mat-checkbox\n            >\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.redirect_uri\">\n            <label for=\"redirect-uri\" i18n=\"@@redirectLabel\">Login URL:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"redirect-uri\"\n                    placeholder=\"Redirect URI e.g. http://localhost:4200/oauth-resp.html\"\n                    i18n-placeholder=\"@@redirectPlaceholder\"\n                    formControlName=\"redirect_uri\"\n                />\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\nimport { AuthType } from '@placeos/ts-client';\n\n@Component({\n  selector: 'broker-form',\n  templateUrl: './broker-form.component.html',\n  styleUrls: ['./broker-form.component.scss']\n})\nexport class BrokerFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available authentication types */\n    public auth_types = [\n        { id: AuthType.Certificate, name: 'Certificate' },\n        { id: AuthType.NoAuth, name: 'No Authentication' },\n        { id: AuthType.UserPassword, name: 'Password' },\n    ];\n    /** List of separator characters for filters */\n    public readonly separators: number[] = [ENTER, COMMA];\n    /** Whether to show password field value */\n    public show_password: boolean;\n\n    public get filters(): string[] {\n        return this.form.controls.filters.value;\n    }\n\n    /**\n     * Add a filter to the list of filters for the item\n     * @param event Input event\n     */\n    public addFilter(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.filter_list) return;\n        const input = event.input;\n        const value = event.value;\n        const filter_list = this.filters;\n        if ((value || '').trim()) {\n            filter_list.push(value);\n            this.form.controls.filters.setValue(filter_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove filter from the list\n     * @param existing_filter Filter to remove\n     */\n    public removeFilter(existing_filter: string): void {\n        if (!this.form || !this.form.controls.filter_list) return;\n        const filter_list = this.filters;\n        const index = filter_list.indexOf(existing_filter);\n\n        if (index >= 0) {\n            filter_list.splice(index, 1);\n            this.form.controls.filters.setValue(filter_list);\n        }\n    }\n}\n","<div class=\"broker form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"broker-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"broker-name\"\n                    placeholder=\"Broker Name\"\n                    i18n-placeholder=\"@@brokerNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@brokerNameError\">Broker name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"host\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@hostLabel\"\n                >Host<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"host\"\n                    placeholder=\"Host\"\n                    i18n-placeholder=\"@@hostPlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@hostError\">Host is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.port\">\n                <label\n                    for=\"port-number\"\n                    [class.error]=\"form.controls.port.invalid && form.controls.port.touched\"\n                    i18n=\"@@portLabel\"\n                >\n                    Port Number<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"port-number\"\n                        type=\"number\"\n                        placeholder=\"Port Number\"\n                        i18n-placeholder=\"@@portPlaceholder\"\n                        formControlName=\"port\"\n                    />\n                    <mat-error i18n=\"@@portError\">\n                        A valid port number between 1 - 65535 is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field checkbox\" *ngIf=\"form.controls.tls\">\n                <mat-checkbox name=\"tls\" formControlName=\"tls\" i18n=\"@@tlsLabel\">TLS</mat-checkbox>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.auth_type\">\n            <label for=\"type\">Auth Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"auth_type\">\n                    <mat-option *ngFor=\"let type of auth_types\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container *ngIf=\"form.controls.auth_type.value === 2\">\n            <div class=\"fieldset\">\n                <div class=\"field\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"host\"\n                        [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                        i18n=\"@@usernameLabel\"\n                        >Username<span>*</span>:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"username\"\n                            placeholder=\"Username\"\n                            i18n-placeholder=\"@@usernamePlaceholder\"\n                            formControlName=\"name\"\n                            required\n                        />\n                        <mat-error i18n=\"@@usernameError\">Username is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.password\">\n                    <label\n                        for=\"new-password\"\n                        [class.error]=\"\n                            form.controls.password.invalid && form.controls.password.touched\n                        \"\n                        i18n=\"@@passwordLabel\"\n                    >\n                        Password:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"new-password\"\n                            autocomplete=\"new-password\"\n                            [type]=\"show_password ? 'text' : 'password'\"\n                            placeholder=\"Password\"\n                            i18n-placeholder=\"@@passwordPlaceholder\"\n                            formControlName=\"password\"\n                        />\n                        <app-icon\n                            matSuffix\n                            [icon]=\"{ class: 'material-icons', content: 'visibility' }\"\n                            (mousedown)=\"show_password = true\"\n                            (window:mouseup)=\"show_password = false\"\n                            (touchstart)=\"show_password = true\"\n                            (window:touchend)=\"show_password = false\"\n                        ></app-icon>\n                        <mat-error i18n=\"@@passordError\">A valid password is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"form.controls.auth_type.value === 0\">\n            <div class=\"field\" *ngIf=\"form.controls.certificate\">\n                <label for=\"cert\" i18n=\"@@certificateLabel\">Certificate:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"cert\"\n                        placeholder=\"Certificate\"\n                        i18n-placeholder=\"@@certificatePlaceholder\"\n                        formControlName=\"certificate\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n        </ng-container>\n        <div class=\"field\" *ngIf=\"form.controls.secret\">\n            <label for=\"secret\" i18n=\"@@secretLabel\">Secret:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"secret\"\n                    placeholder=\"Secret\"\n                    i18n-placeholder=\"@@secretPlaceholder\"\n                    formControlName=\"secret\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.filters\">\n            <label for=\"filters\" i18n=\"@@filtersLabel\">\n                Filters:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-chip-list #chipList name=\"filters\" aria-label=\"Broker Filters\">\n                    <mat-chip\n                        *ngFor=\"let filter of filters\"\n                        [selectable]=\"true\"\n                        [removable]=\"true\"\n                        (removed)=\"removeFilter(filter)\"\n                    >\n                        {{ filter }}\n                        <app-icon matChipRemove [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                    </mat-chip>\n                    <input\n                        placeholder=\"Broker filters...\"\n                        i18n-placeholder=\"@@brokerFiltersPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addFilter($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EncryptionLevel } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'domain-form',\n    templateUrl: './domain-form.component.html',\n    styleUrls: ['./domain-form.component.scss']\n})\nexport class DomainFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"domain form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"domain-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@nameLabel\"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"domain-name\"\n                        placeholder=\"Domain Name\"\n                        i18n-placeholder=\"@@domainNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@domainNameError\">\n                        Domain name is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.dom\">\n                <label\n                    for=\"domain\"\n                    [class.error]=\"form.controls.dom.invalid && form.controls.dom.touched\"\n                    i18n=\"@@domainLabel\"\n                >\n                    Domain:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"domain\"\n                        placeholder=\"Domain e.g localhost\"\n                        i18n=\"@@domainPlaceholder\"\n                        formControlName=\"dom\"\n                    />\n                    <mat-error *ngIf=\"form.controls.dom.invalid\" i18n=\"@@domainError\">\n                        A valid Domain is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.login_url\">\n            <label\n                for=\"login-url\"\n                [class.error]=\"form.controls.login_url.invalid && form.controls.login_url.touched\"\n                i18n=\"@@loginUrlLabel\"\n            >\n                Login URL:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"login-url\"\n                    placeholder=\"Login URL\"\n                    i18n=\"@@loginUrlPlaceholder\"\n                    formControlName=\"login_url\"\n                />\n                <mat-error *ngIf=\"form.controls.login_url.invalid\" i18n=\"@@loginUrlError\">\n                    A valid Login URL is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.logout_url\">\n            <label\n                for=\"logout-url\"\n                [class.error]=\"form.controls.logout_url.invalid && form.controls.logout_url.touched\"\n                i18n=\"@@logoutUrlLabel\"\n            >\n                Logout URL:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"logout-url\"\n                    placeholder=\"Logout URL\"\n                    i18n-placeholder=\"@@logoutUrlPlaceholder\"\n                    formControlName=\"logout_url\"\n                />\n                <mat-error *ngIf=\"form.controls.logout_url.invalid\" i18n=\"@@logoutUrlError\">\n                    A valid Logout URL is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","<div class=\"driver form\" *ngIf=\"form\">\n    <div class=\"fieldset\">\n        <div class=\"field discovery\" *ngIf=\"form.controls.repository_id && !editing\">\n            <label for=\"repo\" i18n=\"@@repoLabel\">Repository: </label>\n            <item-search-field\n                name=\"repo\"\n                [service]=\"discovery_service\"\n                [ngModel]=\"base_repo\"\n                (ngModelChange)=\"updateDriverList($event)\"\n            ></item-search-field>\n        </div>\n        <div\n            class=\"field discovery\"\n            *ngIf=\"form.controls.file_name && driver_list && driver_list.length && !editing\"\n        >\n            <label for=\"driver\" i18n=\"@@driverLabel\">Driver Base: </label>\n            <item-search-field\n                name=\"driver\"\n                [options]=\"driver_list\"\n                [loading]=\"loading_drivers\"\n                [ngModel]=\"base_driver\"\n                (ngModelChange)=\"updateCommitList($event)\"\n            ></item-search-field>\n        </div>\n        <div\n            class=\"field discovery\"\n            *ngIf=\"form.controls.commit && commit_list && commit_list.length\"\n        >\n            <label for=\"commit\" i18n=\"@@driverCommitLabel\">Driver Commit: </label>\n            <item-search-field\n                name=\"commit\"\n                [options]=\"commit_list\"\n                [loading]=\"loading_commits\"\n                [ngModel]=\"base_commit\"\n                (ngModelChange)=\"setDriverBase($event)\"\n            ></item-search-field>\n        </div>\n    </div>\n    <ng-container *ngIf=\"!loading; else load_state\">\n        <form [formGroup]=\"form\">\n            <ng-container\n                *ngIf=\"(form.controls.commit && form.controls.commit.value) || base_commit\"\n            >\n                <div class=\"field\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"driver-name\"\n                        [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                        i18n=\"@@nameLabel\"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"driver-name\"\n                            placeholder=\"Driver Name\"\n                            i18n-placeholder=\"@@driverNamePlaceholder\"\n                            formControlName=\"name\"\n                            required\n                        />\n                        <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@driverNameError\">\n                            Driver name is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.role\">\n                    <label for=\"role\" i18n=\"@@roleLabel\">Role: </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select name=\"role\" formControlName=\"role\">\n                            <mat-option *ngFor=\"let type of role_types\" [value]=\"type.id\">\n                                {{ type.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.description\">\n                    <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"description\"\n                            placeholder=\"Description\"\n                            i18n-placeholder=\"@@descriptionPlaceholder\"\n                            formControlName=\"description\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.module_name\">\n                    <label\n                        for=\"module-name\"\n                        [class.error]=\"\n                            form.controls.module_name.invalid && form.controls.module_name.touched\n                        \"\n                        i18n=\"@@moduleNameLabel\"\n                    >\n                        Module Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"module-name\"\n                            placeholder=\"Module Name\"\n                            i18n=\"@@moduleNamePlaceholder\"\n                            formControlName=\"module_name\"\n                            required\n                        />\n                        <mat-error\n                            *ngIf=\"form.controls.module_name.invalid\"\n                            i18n=\"@@moduleNameError\"\n                        >\n                            Module name is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.default_uri\">\n                    <label for=\"default-uri\" i18n=\"@@defaultUriLabel\">Default URI:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"default-uri\"\n                            placeholder=\"Default URI\"\n                            i18n=\"@@defaultUriPlaceholder\"\n                            formControlName=\"default_uri\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"fieldset\">\n                    <div class=\"field\" *ngIf=\"form.controls.default_port\">\n                        <label\n                            for=\"default-port\"\n                            [class.error]=\"\n                                form.controls.default_port.invalid &&\n                                form.controls.default_port.touched\n                            \"\n                            i18n=\"@@defaultPortLabel\"\n                        >\n                            Default Port Number:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"default-port\"\n                                type=\"number\"\n                                placeholder=\"Port Number\"\n                                i18n=\"@@defaultPortPlaceholder\"\n                                formControlName=\"default_port\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.default_port.invalid\"\n                                i18n=\"@@portError\"\n                            >\n                                A valid port number between 1 - 65535 is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"field\" *ngIf=\"form.controls.ignore_connected\">\n                        <mat-checkbox\n                            name=\"ignore-connected\"\n                            formControlName=\"ignore_connected\"\n                            i18n=\"@@ignoreConnectedLabel\"\n                        >\n                            Ignore Connected\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </ng-container>\n        </form>\n    </ng-container>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@driverCommitLoading\">Loading driver details for commit...</div>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    EngineRepositoryCommit,\n    EngineRepository,\n    EngineRepositoriesService,\n    EngineDriverRole,\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\nimport { of, Subject, Observable } from 'rxjs';\n\nimport * as dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\ndayjs.extend(relativeTime);\n\n@Component({\n    selector: 'driver-form',\n    templateUrl: './driver-form.component.html',\n    styleUrls: ['./driver-form.component.scss'],\n})\nexport class DriverFormComponent extends BaseDirective implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of driver roles */\n    public role_types: Identity[] = [\n        { id: EngineDriverRole.SSH, name: 'SSH' },\n        { id: EngineDriverRole.Device, name: 'Device' },\n        { id: EngineDriverRole.Service, name: 'Service' },\n        { id: EngineDriverRole.Websocket, name: 'Websocket' },\n        { id: EngineDriverRole.Logic, name: 'Logic' },\n    ];\n\n    /** Driver used as a template for the new driver being created */\n    public base_repo: EngineRepository;\n    /** Driver used as a template for the new driver being created */\n    public base_commit: EngineRepositoryCommit;\n    /** Driver used as a template for the new driver being created */\n    public base_driver: Identity;\n    /** List of available drivers for the active repository */\n    public driver_list: Identity[] = [];\n    /** List of available commits for the active driver */\n    public commit_list: Identity[] = [];\n    /** List of items from an API search */\n    public driver_list$: Observable<Identity[]>;\n    /** List of items from an API search */\n    public commit_list$: Observable<Identity[]>;\n    /** Subject holding the value of the search */\n    public readonly repo$ = new Subject<string>();\n    /** Subject holding the value of the search */\n    public readonly driver$ = new Subject<string>();\n    /** Whether driver details are being loaded */\n    public loading: boolean;\n    /** Whether driver listings are being loaded */\n    public loading_drivers: boolean;\n    /** Whether driver commits are being loaded */\n    public loading_commits: boolean;\n\n    public get editing(): boolean {\n        return this.form.controls.id && this.form.controls.id.value;\n    }\n\n    /** Service for handling driver discovery */\n    public get discovery_service(): EngineRepositoriesService {\n        return this._service.Repositories;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.driver_list$ = this.repo$.pipe(\n            debounceTime(100),\n            distinctUntilChanged(),\n            switchMap((repo_id) => {\n                this.loading_drivers = true;\n                this.driver_list = [];\n                return this._service.Repositories.listDrivers(repo_id);\n            }),\n            catchError((_) => {\n                this._service.notifyError(`Error loading driver list. Error: ${_.message || _}`);\n                return of([]);\n            }),\n            map((list: any[]) => {\n                this.loading_drivers = false;\n                this.commit_list = [];\n                return (list || []).map((driver) => ({\n                    id: driver,\n                    name: driver.replace(/\\//g, ' > '),\n                }));\n            })\n        );\n        this.subscription(\n            'driver_list',\n            this.driver_list$.subscribe((list) => (this.driver_list = list))\n        );\n        this.commit_list$ = this.driver$.pipe(\n            debounceTime(100),\n            distinctUntilChanged(),\n            switchMap((driver_id) => {\n                this.loading_commits = true;\n                this.commit_list = [];\n                return this._service.Repositories.listCommits(this.base_repo.id, {\n                    driver: `${driver_id}`,\n                });\n            }),\n            catchError((_) => {\n                this._service.notifyError(\n                    `Error loading driver's commit list. Error: ${_.message || _}`\n                );\n                return of([]);\n            }),\n            map((list: any[]) => {\n                this.loading_commits = false;\n                if (this.form.controls.commit) {\n                    this.base_commit = this.commit_list.find(\n                        (commit) => commit.id === this.form.controls.commit.value\n                    ) as any;\n                }\n                return (list || []).map((commit: EngineRepositoryCommit) => {\n                    const date = dayjs(commit.date);\n                    return {\n                        id: commit.commit,\n                        name: `${commit.subject}`,\n                        extra: date.isAfter(dayjs().subtract(1, 'm'))\n                            ? date.fromNow()\n                            : date.format('DD MMM YYYY'),\n                    };\n                });\n            })\n        );\n        this.subscription(\n            'commit_list',\n            this.commit_list$.subscribe((list) => (this.commit_list = list))\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.initDriver();\n        }\n    }\n\n    /**\n     * Update the list of available drivers\n     * @param repo Repository to grab the drivers for\n     */\n    public async updateDriverList(repo: EngineRepository) {\n        this.form.controls.repository_id.setValue(repo.id);\n        this.base_repo = repo;\n        const promise = this.driver_list$.toPromise();\n        this.repo$.next(repo.id);\n        return await promise;\n    }\n\n    /**\n     * Update the list of available commits\n     * @param driver Driver to grab commits for\n     */\n    public updateCommitList(driver: Identity) {\n        this.form.controls.file_name.setValue(driver.id);\n        this.base_driver = driver;\n        const promise = this.commit_list$.toPromise();\n        this.driver$.next(`${driver.id}`);\n        return promise;\n    }\n\n    /**\n     *\n     * @param event Details of the driver selected\n     */\n    public setDriverBase(event: Identity) {\n        this.form.controls.commit.setValue(event.id);\n        this.base_commit = event as any;\n        this.loading = true;\n        this._service.Repositories.driverDetails(this.base_repo.id, {\n            driver: `${this.base_driver.id}`,\n            commit: `${event.id}`,\n        }).then(\n            (driver) => {\n                this.loading = false;\n                if (!this.form.controls.id.value) {\n                    this.form.controls.name.setValue(driver.descriptive_name || '');\n                    this.form.controls.module_name.setValue(driver.generic_name || '');\n                    this.form.controls.class_name.setValue(this.base_driver.id || '');\n                    this.form.controls.default_port.setValue(\n                        driver.tcp_port || driver.udp_port || ''\n                    );\n                    this.form.controls.default_uri.setValue(driver.uri_base || '');\n                    this.form.controls.role.setValue(\n                        driver.tcp_port || driver.udp_port\n                            ? EngineDriverRole.Device\n                            : driver.uri_base\n                            ? EngineDriverRole.Service\n                            : EngineDriverRole.Logic\n                    );\n                    this.form.controls.settings.setValue(driver.default_settings || '');\n                    this.form.controls.description.setValue(driver.description || '');\n                }\n            },\n            () => (this.loading = false)\n        );\n    }\n\n    /**\n     * Initialise the driver details if set\n     */\n    private async initDriver() {\n        if (this.form.controls.repository_id && this.form.controls.repository_id.value) {\n            const value = this.form.controls.repository_id.value;\n            const repo = await this.discovery_service.show(value);\n            this.base_repo = repo;\n            this.updateDriverList(this.base_repo);\n            const driver = this.form.controls.file_name.value;\n            this.base_driver =\n                typeof driver === 'string'\n                    ? { id: driver, name: driver.split('/').join(' > ') }\n                    : driver;\n            this.updateCommitList(this.base_driver);\n        }\n    }\n}\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'ldap-source-form',\n    templateUrl: './ldap-source-form.component.html',\n    styleUrls: ['./ldap-source-form.component.scss']\n})\nexport class LdapSourceFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available authentication schemes */\n    public auth_methods: Identity[] = [\n        { id: 'plain', name: 'Plain' },\n        { id: 'ssl', name: 'SSL' },\n        { id: 'tls', name: 'TLS' }\n    ];\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"auth-source-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@authSourceNameLabel\"\n            >\n                Name<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"auth-source-name\"\n                    placeholder=\"Auth Source Name\"\n                    i18n-placeholder=\"@@authSourceNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@authSourceNameError\">\n                    Auth source name is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.host\">\n                <label\n                    for=\"host\"\n                    [class.error]=\"form.controls.host.invalid && form.controls.host.touched\"\n                    i18n=\"@@authSourceHostLabel\"\n                >\n                    Host<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"host\"\n                        placeholder=\"Host\"\n                        formControlName=\"host\"\n                        i18n-placeholder=\"@@authSourceHostPlaceholder\"\n                    />\n                    <mat-error *ngIf=\"form.controls.host.invalid\" i18n=\"@@authSourceNameError\">\n                        Host is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.port\">\n                <label for=\"port\" i18n=\"@@portLabel\">Port:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        type=\"number\"\n                        name=\"port\"\n                        placeholder=\"Port number\"\n                        i18n=\"@@portPlaceholder\"\n                        formControlName=\"port\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.uid\">\n                <label for=\"uid\" i18n=\"@@authSourceUidLabel\">User ID Key:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"uid\"\n                        placeholder=\"User ID Key\"\n                        i18n-placeholder=\"@@authSourceUidPlaceholder\"\n                        formControlName=\"uid\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field type\" *ngIf=\"form.controls.auth_method\">\n                <label for=\"auth-method\" i18n=\"@@authSourceMethodLabel\"\n                    >Authentication Method:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"auth-method\" formControlName=\"auth_method\">\n                        <mat-option\n                            *ngFor=\"let type of auth_methods\"\n                            [value]=\"type.id\"\n                            i18n=\"@@authSourceMethodOptions\"\n                        >\n                            {type.name, select, Plain { Plain } SSL { SSL } TLS { TLS } other {\n                            Other }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.base\">\n                <label\n                    for=\"base\"\n                    [class.error]=\"form.controls.base.invalid && form.controls.base.touched\"\n                    i18n=\"@@authSourceBaseLabel\"\n                >\n                    Base<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"base\"\n                        placeholder=\"Base\"\n                        i18n-placeholder=\"@@authSourceBasePlaceholder\"\n                        formControlName=\"base\"\n                    />\n                    <mat-error *ngIf=\"form.controls.base.invalid\" i18n=\"@@authSourceBaseError\">\n                        Base is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.bind_dn\">\n                <label for=\"bind-dn\" i18n=\"@@authSourceBindDnLabel\">Bind DN:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"bind-dn\"\n                        placeholder=\"Bind DN\"\n                        i18n=\"@@authSourceBindDnPlaceholder\"\n                        formControlName=\"bind_dn\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.password\">\n                <label for=\"password\" i18n=\"@@passwordLabel\">Password:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        i18n-placeholder=\"@@passwordPlaceholder\"\n                        formControlName=\"password\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.filter\">\n                <label for=\"filter\" i18n=\"@@authSourceFilterLabel\">Filter:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"filter\"\n                        placeholder=\"Filter\"\n                        i18n-placeholder=\"@@authSourceFilterPlaceholder\"\n                        formControlName=\"filter\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n</div>\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EncryptionLevel, EngineDriverRole } from '@placeos/ts-client';\n\nimport { Identity, EngineServiceLike } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n@Component({\n    selector: 'module-form',\n    templateUrl: './module-form.component.html',\n    styleUrls: ['./module-form.component.scss']\n})\nexport class ModuleFormComponent extends BaseDirective implements OnDestroy {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Whether system is readonly */\n    @Input() public readonly: boolean;\n\n    /** Service for handling system */\n    public get system_service(): EngineServiceLike {\n        return this._service.Systems;\n    }\n\n    /** Service for handling drivers */\n    public get driver_service(): EngineServiceLike {\n        return this._service.Drivers;\n    }\n\n    /** Role of the selected driver */\n    public get role(): string {\n        if (!this.form.controls.driver) {\n            return 'service';\n        }\n        const driver = this.form.controls.driver.value;\n        if (!driver) {\n            return 'logic';\n        }\n        switch (driver.role) {\n            case EngineDriverRole.SSH:\n                return 'ssh';\n            case EngineDriverRole.Device:\n                return 'device';\n            case EngineDriverRole.Service:\n                return 'service';\n            case EngineDriverRole.Websocket:\n                return 'websocket';\n        }\n        return 'logic';\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.driver\">\n            <label\n                for=\"driver\"\n                [class.error]=\"form.controls.driver.invalid && form.controls.driver.touched\"\n                i18n=\"@@driverLabel\"\n            >\n                Driver<span>*</span>:\n            </label>\n            <item-search-field\n                name=\"driver\"\n                [service]=\"driver_service\"\n                formControlName=\"driver\"\n            ></item-search-field>\n            <div\n                class=\"error\"\n                *ngIf=\"form.controls.driver.invalid && form.controls.driver.touched\"\n                i18n=\"@@driverError\"\n            >\n                Driver is required\n            </div>\n        </div>\n        <ng-container *ngIf=\"!form.controls.driver || form.controls.driver.value\">\n            <div class=\"field\" *ngIf=\"form.controls.system && role === 'logic'\">\n                <label\n                    for=\"system\"\n                    [class.error]=\"form.controls.system.invalid && form.controls.system.touched\"\n                    i18n=\"@@systemLabel\"\n                    >Control System<span *ngIf=\"role === 'logic'\">*</span>:\n                </label>\n                <ng-container *ngIf=\"!readonly; else readonly_system\">\n                    <item-search-field\n                        name=\"system\"\n                        [service]=\"system_service\"\n                        formControlName=\"system\"\n                    ></item-search-field>\n                    <div\n                        class=\"error\"\n                        *ngIf=\"form.controls.system.invalid && form.controls.system.touched\"\n                        i18n=\"@@systemError\"\n                    >\n                        Control System is required\n                    </div>\n                </ng-container>\n                <ng-template #readonly_system>\n                    <div class=\"value\">\n                        {{ form.controls.system.value?.name }}\n                        <span>{{ form.controls.system.value?.id }}</span>\n                    </div>\n                </ng-template>\n            </div>\n            <div class=\"fieldset\">\n                <div class=\"field\" *ngIf=\"form.controls.ip && role !== 'logic'\">\n                    <label\n                        for=\"ip\"\n                        [class.error]=\"form.controls.ip.invalid && form.controls.ip.touched\"\n                        i18n=\"@@ipAddressLabel\"\n                    >\n                        IP Address<span *ngIf=\"role === 'ssh' || role === 'device'\">*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"ip\"\n                            placeholder=\"IP Address\"\n                            i18n-placeholder=\"@@ipAddressPlaceholder\"\n                            formControlName=\"ip\"\n                        />\n                        <mat-error *ngIf=\"form.controls.ip.invalid\" i18n=\"@@ipAddressError\">\n                            A valid IP address is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.port && role !== 'logic'\">\n                    <label\n                        for=\"port-number\"\n                        [class.error]=\"form.controls.port.invalid && form.controls.port.touched\"\n                        i18n=\"@@portLabel\"\n                    >\n                        Port Number<span *ngIf=\"role === 'ssh'\">*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"port-number\"\n                            type=\"number\"\n                            placeholder=\"Port Number\"\n                            i18n-placeholder=\"@@portPlaceholder\"\n                            formControlName=\"port\"\n                        />\n                        <mat-error *ngIf=\"form.controls.port.invalid\" i18n=\"@@portError\">\n                            A valid port number between 1 - 65535 is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tls && role !== 'logic'\">\n                <mat-checkbox name=\"tls\" formControlName=\"tls\" i18n=\"@@tlsLabel\">TLS</mat-checkbox>\n            </div>\n            <div\n                class=\"field\"\n                *ngIf=\"form.controls.udp && role !== 'logic' && role !== 'websocket'\"\n            >\n                <mat-checkbox name=\"udp\" formControlName=\"udp\" i18n=\"@@udpLabel\">UDP</mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.makebreak && role !== 'logic'\">\n                <mat-checkbox name=\"makebreak\" formControlName=\"makebreak\" i18n=\"@@makebreakLabel\"\n                    >Makebreak</mat-checkbox\n                >\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.ignore_connected && role !== 'logic'\">\n                <mat-checkbox\n                    name=\"ignore-connected\"\n                    i18n=\"@@ignoreConnectedLabel\"\n                    formControlName=\"ignore_connected\"\n                >\n                    Ignore Connected\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.uri && role !== 'logic'\">\n                <label\n                    for=\"uri\"\n                    [class.error]=\"form.controls.uri.invalid && form.controls.uri.touched\"\n                    i18n=\"@@uriLabel\"\n                >\n                    URI<span *ngIf=\"role === 'websocket'\">*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"uri\"\n                        placeholder=\"Module URI\"\n                        i18n-placeholder=\"@@uriPlaceholder\"\n                        formControlName=\"uri\"\n                    />\n                    <mat-error *ngIf=\"form.controls.uri.invalid\" i18n=\"@@uriError\"\n                        >A valid URI is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.notes\">\n                <label for=\"notes\" i18n=\"@@notesLabel\">Notes:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        placeholder=\"Module Notes\"\n                        i18n-placholder=\"@@notePlaceholder\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.custom_name\">\n                <label for=\"custom-name\" i18n=\"@@customNameLabel\">Custom Name:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"custom-name\"\n                        placeholder=\"Custom Name\"\n                        i18n-placholder=\"@@customNamePlaceholder\"\n                        formControlName=\"custom_name\"\n                    />\n                </mat-form-field>\n            </div>\n        </ng-container>\n    </form>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Identity, HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n@Component({\n  selector: 'oauth-source-form',\n  templateUrl: './oauth-source-form.component.html',\n  styleUrls: ['./oauth-source-form.component.scss']\n})\nexport class OauthSourceFormComponent extends BaseDirective implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available token request methods */\n    public token_methods: Identity[] = [\n        { id: 'get', name: 'GET' },\n        { id: 'post', name: 'POST' },\n        { id: 'put', name: 'PUT' },\n    ];\n    /** List of available authentication schemes */\n    public auth_schemes: Identity[] = [\n        { id: 'request_body', name: 'Request Body' },\n        { id: 'basic_auth', name: 'Basic Auth' },\n    ];\n    /** List of info mapping pairs */\n    public info_mapping_list: any[] = [];\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form && this.form) {\n            if (this.form.controls.info_mappings) {\n                const map = this.form.controls.info_mappings.value || {};\n                this.info_mapping_list = Object.keys(map).map((key) => {\n                    return { Engine: key, Remote: map[key] };\n                });\n            }\n        }\n    }\n\n    public updateMappings(mappings: { Engine: string, Remote: string }[]) {\n        this.timeout('mappings', () => {\n            const map: HashMap = {};\n            for (const pair of mappings) {\n                if (pair.Engine && pair.Remote) {\n                    map[pair.Engine] = pair.Remote;\n                }\n            }\n            this.form.controls.info_mappings.setValue(map);\n        }, 200);\n    }\n\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"auth-source-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n            >\n                Name<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"auth-source-name\"\n                    placeholder=\"Auth Source Name\"\n                    i18n-placeholder=\"@@authSourceNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@authSourceNameError\">\n                    Auth source name is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.client_id\">\n                <label for=\"client-id\" i18n=\"@@authSourceClientIdLabel\">Client ID:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"client-id\"\n                        placeholder=\"Client ID\"\n                        i18n-placeholder=\"@@authSourceClientIdPlaceholder\"\n                        formControlName=\"client_id\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.client_secret\">\n                <label for=\"client-secret\" i18n=\"@@authSourceClientSecretLabel\">\n                    Client Secret:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"client-secret\"\n                        placeholder=\"Client Secret\"\n                        i18n-placeholder=\"@@authSourceClientSecretPlaceholder\"\n                        formControlName=\"client_secret\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.site\">\n                <label for=\"site\" i18n=\"@@authSourceSiteLabel\">Site:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"site\"\n                        placeholder=\"URL of the SSO provider\"\n                        i18n-placeholder=\"@@authSourceSitePlaceholder\"\n                        formControlName=\"site\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.scope\">\n                <label for=\"scope\" i18n=\"@@scopeLabel\">Scope:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"scope\"\n                        placeholder=\"Scope\"\n                        i18n-placeholder=\"@@scopePlaceholder\"\n                        formControlName=\"scope\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field type\" *ngIf=\"form.controls.token_method\">\n                <label for=\"token-method\" i18n=\"@@authSourceTokenMethodLabel\">Token Method: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"token-method\" formControlName=\"token_method\">\n                        <mat-option *ngFor=\"let type of token_methods\" [value]=\"type.id\">\n                            {{ type.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field type\" *ngIf=\"form.controls.auth_scheme\">\n                <label for=\"auth-scheme\" i18n=\"@@authSourceSchemeLabel\">\n                    Authentication Scheme:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"auth-scheme\" formControlName=\"auth_scheme\">\n                        <mat-option *ngFor=\"let type of auth_schemes\" [value]=\"type.id\">\n                            { type.id, select, request_body { Request Body } basic_auth { Basic Auth\n                            } }\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.token_url\">\n            <label for=\"token-url\" i18n=\"@@authSourceTokenUrlLabel\">Token URL:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"token-url\"\n                    placeholder=\"Token URL\"\n                    i18n-placeholder=\"@@authSourceTokenUrlPlaceholder\"\n                    formControlName=\"token_url\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.authorize_url\">\n                <label for=\"authorize-url\" i18n=\"@@authSourceAuthorizeUrlLabel\">\n                    Authorize URL:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"authorize-url\"\n                        placeholder=\"Authorize URL\"\n                        i18n-placeholder=\"@@authSourceAuthorizeUrlPlaceholder\"\n                        formControlName=\"authorize_url\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.raw_info_url\">\n                <label for=\"info-url\" i18n=\"@@authSourceProfileUrlLabel\">User Profile URL:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"raw_info_url\"\n                        placeholder=\"User Profile URL\"\n                        i18n-placeholder=\"@@authSourceProfileUrlPlaceholder\"\n                        formControlName=\"raw_info_url\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.info_mappings\">\n            <label for=\"client-secret\" i18n=\"@@authSourceMappingsLabel\">Info Mappings:</label>\n            <object-list-field\n                [(ngModel)]=\"info_mapping_list\"\n                (ngModelChange)=\"updateMappings($event)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                [fields]=\"['Engine', 'Remote']\"\n            ></object-list-field>\n        </div>\n    </form>\n</div>\n","<div class=\"repository form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div\n            class=\"field commit\"\n            *ngIf=\"is_edit && can_change_commit\"\n        >\n            <label for=\"commit\" i18n=\"@@repoCommitLabel\">Repository Commit: </label>\n            <item-search-field\n                name=\"commit\"\n                [options]=\"commit_list\"\n                [loading]=\"loading_commits\"\n                [ngModel]=\"base_commit\"\n                (ngModelChange)=\"form.controls.commit_hash.setValue($event.id)\"\n            ></item-search-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"repository-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"repository-name\"\n                    placeholder=\"Repository Name\"\n                    i18n-placeholder=\"@@repositoryNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@repoNameError\"\n                    >\n                    Repository name is required\n                    </mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.folder_name\">\n            <label\n                for=\"folder-name\"\n                [class.error]=\"\n                    form.controls.folder_name.invalid && form.controls.folder_name.touched\n                \"\n                i18n=\"@@folderNameLabel\"\n                >Folder Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"folder-name\"\n                    placeholder=\"Folder Name\"\n                    i18n-placeholder=\"@@folderNamePlaceholder\"\n                    formControlName=\"folder_name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.folder_name.invalid\" i18n=\"@@folderNameError\"\n                    >Folder name is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\"i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.uri\">\n            <label for=\"uri\" [class.error]=\"form.controls.uri.invalid && form.controls.uri.touched\" i18n=\"@@repoUriLabel\">\n                Repository URI<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"uri\"\n                    placeholder=\"Repository URI\"\n                    i18n-placeholder=\"@@repoUriPlaceholder\"\n                    formControlName=\"uri\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.uri.invalid\" i18n=\"@@repoUriError\">URI is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"!is_edit && form.controls.repo_type\">\n            <label for=\"type\"i18n=\"@@repoTypeLabel\">Repository Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"repo_type\">\n                    <mat-option *ngFor=\"let type of repo_types\" [value]=\"type.id\" i18n=\"@@repoType\">\n                        { type.name, select, Driver { Driver } Interface { Interface } other { Other } }\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { EngineRepositoryType } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'repository-form',\n    templateUrl: './repository-form.component.html',\n    styleUrls: ['./repository-form.component.scss'],\n})\nexport class RepositoryFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of commits available for repository */\n    public commit_list: Identity[] = [];\n    /** Whether repository's commits are being loaded */\n    public loading_commits: boolean;\n    /** Currently selected commit for the repository */\n    public base_commit: Identity;\n    /** List of available types of repositories */\n    public repo_types: Identity[] = [\n        { id: EngineRepositoryType.Driver, name: 'Driver' },\n        { id: EngineRepositoryType.Interface, name: 'Interface' },\n    ];\n\n    /** Whether item is being edited */\n    public get is_edit(): boolean {\n        return this.form && this.form.controls.id && this.form.controls.id.value;\n    }\n\n    /** Whether commit of the repo is allowed to be changed */\n    public get can_change_commit(): boolean {\n        return !!(\n            this.form &&\n            this.form.controls.commit_hash &&\n            this.form.controls.repo_type &&\n            this.form.controls.repo_type.value === EngineRepositoryType.Interface\n        );\n    }\n\n    constructor(private _service: ApplicationService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            this.loadCommits();\n        }\n    }\n\n    public async loadCommits() {\n        if (this.is_edit && this.can_change_commit) {\n            return;\n        }\n        const id = this.form.controls.id.value;\n        const commits: any[] = await this._service.Repositories.listCommits(id);\n        this.commit_list = (commits || []).map((commit) => {\n            const date = dayjs(commit.date);\n            return {\n                id: commit.commit,\n                name: commit.subject,\n                extra: date.isAfter(dayjs().subtract(1, 'm'))\n                    ? date.fromNow()\n                    : date.format('DD MMM YYYY'),\n            };\n        });\n        const active_commit = this.form.controls.commit_hash.value;\n        this.base_commit = this.commit_list.find((commit) => `${commit.id}` === active_commit);\n        if (!this.base_commit) {\n            this.base_commit = this.commit_list[0] || null;\n        }\n    }\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n  selector: 'saml-source-form',\n  templateUrl: './saml-source-form.component.html',\n  styleUrls: ['./saml-source-form.component.scss']\n})\nexport class SamlSourceFormComponent extends BaseDirective implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    /** List of attribute statement pairs */\n    public attribute_statement_mappings: any[] = [];\n    /** List of runtime param pairs */\n    public runtime_param_list: any[] = [];\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form && this.form) {\n            if (this.form.controls.attribute_statements) {\n                const map = this.form.controls.attribute_statements.value || {};\n                this.attribute_statement_mappings = Object.keys(map).map((key) => {\n                    return { name: key, mappings: map[key].join(',') };\n                });\n            }\n            if (this.form.controls.idp_sso_target_url_runtime_params) {\n                const map = this.form.controls.idp_sso_target_url_runtime_params.value || {};\n                this.runtime_param_list = Object.keys(map).map((key) => {\n                    return { name: key, mappings: map[key] };\n                });\n            }\n        }\n    }\n\n    /**\n     * Update the form control value for attribute statements\n     * @param mappings Mapping listing\n     */\n    public updateAttributeStatements(mappings: { name: string, mappings: string }[]) {\n        this.timeout('mappings', () => {\n            const map: HashMap = {};\n            for (const pair of mappings) {\n                if (pair.name && pair.mappings) {\n                    map[pair.name] = (pair.mappings || '').split(',');\n                }\n            }\n            this.form.controls.attribute_statements.setValue(map);\n        }, 200);\n    }\n\n    /**\n     * Update the form control value for runtime parameters\n     * @param mappings Mapping listing\n     */\n    public updateRuntimeParams(mappings: { name: string, mapping: string }[]) {\n        this.timeout('mappings', () => {\n            const map: HashMap = {};\n            for (const pair of mappings) {\n                if (pair.name && pair.mapping) {\n                    map[pair.name] = pair.mapping;\n                }\n            }\n            this.form.controls.idp_sso_target_url_runtime_params.setValue(map);\n        }, 200);\n    }\n\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"auth-source-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@authSourceNameLabel\"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"auth-source-name\"\n                        placeholder=\"Auth Source Name\"\n                        i18n-placeholder=\"@@authSourceNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@authSourceNameError\">\n                        Auth source name is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.issuer\">\n                <label\n                    for=\"issuer\"\n                    [class.error]=\"form.controls.issuer.invalid && form.controls.issuer.touched\"\n                    i18n=\"@@authSourceIssuerLabel\"\n                >\n                    Issuer<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"issuer\"\n                        placeholder=\"Issuer\"\n                        i18n-placeholder=\"@@authSourceIssuerPlaceholder\"\n                        formControlName=\"issuer\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.issuer.invalid\" i18n=\"@@authSourceIssuerError\">\n                        Issuer is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.idp_sso_target_url\">\n                <label\n                    for=\"idp-target\"\n                    [class.error]=\"\n                        form.controls.idp_sso_target_url.invalid &&\n                        form.controls.idp_sso_target_url.touched\n                    \"\n                    i18n=\"@@authSourceIdpTargetLabel\"\n                >\n                    IdP Target URL<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"idp-target\"\n                        placeholder=\"IdP Target URL\"\n                        i18n-placeholder=\"@@authSourceIdpTargetPlaceholder\"\n                        formControlName=\"idp_sso_target_url\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.idp_sso_target_url.invalid\" i18n=\"@@authSourceIdpTargetError\">\n                        IdP Target URL is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.name_identifier_format\">\n                <label\n                    for=\"name-identifier-format\"\n                    [class.error]=\"\n                        form.controls.name_identifier_format.invalid &&\n                        form.controls.name_identifier_format.touched\n                    \"\n                    i18n=\"@@authSourceNameIdFormatLabel\"\n                >\n                    Name Identifier Format<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name-identifier-format\"\n                        placeholder=\"Name Identifier Format\"\n                        i18n-placeholder=\"@@authSourceNameIdFormatPlaceholder\"\n                        formControlName=\"name_identifier_format\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name_identifier_format.invalid\" i18n=\"@@authSourceNameIdFormatError\">\n                        Name Identifier Format is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.request_attributes\">\n            <label\n                for=\"request-attributes\"\n                [class.error]=\"form.controls.request_attributes.invalid && form.controls.request_attributes.touched\"\n                i18n=\"@@authSourceRequestAttrLabel\"\n            >\n                Request Attributes<span>*</span>:\n            </label>\n            <object-list-field\n                formControlName=\"request_attributes\"\n                [fields]=\"['name', 'name_format', 'friendly_name']\"\n            ></object-list-field>\n            <div class=\"error-message\" *ngIf=\"form.controls.request_attributes.invalid && form.controls.request_attributes.touched\" i18n=\"@@authSourceRequestAttrError\">\n                Request Attributes are required\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.assertion_consumer_service_url\">\n                <label\n                    for=\"assertion-url\"\n                    [class.error]=\"\n                        form.controls.assertion_consumer_service_url.invalid &&\n                        form.controls.assertion_consumer_service_url.touched\n                    \"\n                    i18n=\"@@authSourceAssertionUrlLabel\"\n                >\n                    Assertion URL<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"assertion-url\"\n                        placeholder=\"Assertion URL\"\n                        i18n-placeholder=\"@@authSourceAssetionUrlPlaceholder\"\n                        formControlName=\"assertion_consumer_service_url\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.assertion_consumer_service_url.invalid\" i18n=\"@@authSourceAssetionUrlError\">\n                        Assertion URL is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.idp_cert_fingerprint\">\n                <label for=\"cert-fingerprint\" i18n=\"@@authSourceCertPrintLabel\">Certificate Fingerprint:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"cert-fingerprint\"\n                        placeholder=\"Certificate Fingerprint\"\n                        i18n-placeholder=\"@@authSourceCertPrintPlaceholder\"\n                        formControlName=\"idp_cert_fingerprint\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.idp_cert\">\n            <label for=\"cert\" i18n=\"@@authSourceCertLabel\">Full Certificate:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"cert\"\n                    placeholder=\"Full Certificate\"\n                    i18n-placeholder=\"@@authSourceCertPlaceholder\"\n                    formControlName=\"idp_cert\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.uid_attribute\">\n                <label for=\"uid-attribute\" i18n=\"@@authSourceUidAttrLabel\">UID Attribute:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"uid-attribute\"\n                        placeholder=\"UID Attribute\"\n                        i18n-placeholder=\"@@authSourceUidAttrPlaceholder\"\n                        formControlName=\"uid_attribute\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.attribute_service_name\">\n                <label for=\"attribute-service-name\" i18n=\"@@authSourceAttrServiceLabel\">Attribute Service Name:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"attribute-service-name\"\n                        placeholder=\"Attribute Service Name\"\n                        i18n-placeholder=\"@@authSourceAttrServicePlaceholder\"\n                        formControlName=\"attribute_service_name\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.attribute_statements\">\n            <label for=\"client-secret\" i18n=\"@@authSourceAttrStmtLabel\">Attribute Statements:</label>\n            <object-list-field\n                [(ngModel)]=\"attribute_statement_mappings\"\n                (ngModelChange)=\"updateAttributeStatements($event)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                [fields]=\"['name', 'mappings']\"\n            ></object-list-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.idp_sso_target_url_runtime_params\">\n            <label for=\"client-secret\" i18n=\"@@authSourceIdpSsoRuntimeLabel\">IdP SSO Runtime Params:</label>\n            <object-list-field\n                [(ngModel)]=\"runtime_param_list\"\n                (ngModelChange)=\"updateRuntimeParams($event)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                [fields]=\"['name', 'mapping']\"\n            ></object-list-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.idp_slo_target_url\">\n                <label for=\"slo-target\" i18n=\"@@authSourceIdpSloUriLabel\">IdP SLO Target URL:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"slo-target\"\n                        placeholder=\"IdP SLO Target URL\"\n                        i18n-placeholder=\"@@authSourceIdpSloUriPlaceholder\"\n                        formControlName=\"idp_slo_target_url\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.slo_default_relay_state\">\n                <label for=\"slo-relay\" i18n=\"@@authSourceSloRelayLabel\">SLO Default Relay State:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"slo-relay\"\n                        placeholder=\"SLO Default Relay State\"\n                        i18n-placeholder=\"@@authSourceSloRelayPlaceholder\"\n                        formControlName=\"slo_default_relay_state\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n</div>\n","import { Component, Input, SimpleChanges, OnChanges, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { EngineSettings, EngineUser, EncryptionLevel } from '@placeos/ts-client';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { validateYAML } from 'src/app/shared/utilities/data/systems.utilities';\n\nimport * as yaml from 'js-yaml';\nimport * as merge from 'deepmerge';\n\n@Component({\n    selector: 'a-settings-form',\n    templateUrl: './settings-form.component.html',\n    styleUrls: ['./settings-form.component.scss']\n})\nexport class SettingsFormComponent extends BaseDirective implements OnChanges, OnInit {\n    /** ID of the parent object */\n    @Input() id: string;\n    /** List of settings for the  */\n    @Input() settings: [EngineSettings, EngineSettings, EngineSettings, EngineSettings];\n    /** Whether to display merged settings */\n    @Input() merge: boolean;\n    /** List of settings to merge into the main settings */\n    @Input() merge_settings: EngineSettings[];\n    /** Form fields for settings */\n    public form: FormGroup;\n    /** Whether a setting is being saved */\n    public saving: [boolean, boolean, boolean, boolean] = [false, false, false, false];\n    /** Currently displayed encryption level */\n    public encryption_level: EncryptionLevel;\n    /** Settings available to display on the UI */\n    public used_settings: EngineSettings[] = [];\n    /** List of available settings to view */\n    public available_levels = this.levels;\n    /** Index of the active settings tab */\n    public level_index: number;\n\n    /** Current user */\n    public get user(): EngineUser {\n        return this._service.Users.user.getValue();\n    }\n\n    /** Whether user is admin */\n    public get is_admin(): boolean {\n        return !!this.user.sys_admin;\n    }\n\n    /** Whether user is support */\n    public get is_support(): boolean {\n        return !!this.user.sys_admin || !!this.user.support;\n    }\n\n    /** Currently shown settings */\n    public get shown_option(): { id: EncryptionLevel, name: string, active?: boolean } {\n        return this.available_levels.find(i => i.id === this.encryption_level);\n    }\n\n    /** Whether the currently active settings have been edited */\n    public get active_edited(): boolean {\n        return (\n            this.used_settings &&\n            this.used_settings[this.encryption_level] &&\n            this.used_settings[this.encryption_level].changes &&\n            this.used_settings[this.encryption_level].changes.settings_string !== undefined\n        );\n    }\n\n    /** Number of settings blocks edited */\n    public get edited_count(): number {\n        let count = 0;\n        for (const setting of this.used_settings) {\n            if (setting.changes.settings_string !== undefined) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    /** Whether a settings group has errors */\n    public get has_errors(): boolean {\n        for (const key in this.form.controls) {\n            if (this.form.controls[key] && this.form.controls[key].errors) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Displayable encryption levels for settings */\n    public get levels(): any[] {\n        const levels: Identity[] = [\n            { id: EncryptionLevel.None, name: 'Unencrypted', active: true },\n            {\n                id: EncryptionLevel.Support,\n                name: 'Support',\n                active: this.is_support\n            },\n            { id: EncryptionLevel.Admin, name: 'Admin', active: this.is_admin },\n            { id: EncryptionLevel.NeverDisplay, name: 'Encrypted', active: this.is_admin }\n        ];\n        if (this.merge) {\n            levels.unshift({ id: EncryptionLevel.NeverDisplay + 1, name: 'Merged' });\n        }\n        return levels;\n    }\n\n    public type(level: EncryptionLevel) {\n        switch (level) {\n            case EncryptionLevel.None:\n                return 'Unencrypted';\n            case EncryptionLevel.Support:\n                return 'Support';\n            case EncryptionLevel.Admin:\n                return 'Admin';\n        }\n        return 'Never Display';\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'save_all',\n            this._service.Hotkeys.listen(['KeyA'], () => this.saveAll())\n        );\n        this.subscription(\n            'clear_all',\n            this._service.Hotkeys.listen(['KeyC'], () => this.clearChanges())\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.merge) {\n            this.encryption_level = this.merge\n                ? EncryptionLevel.NeverDisplay + 1\n                : EncryptionLevel.None;\n            this.available_levels = this.levels;\n        }\n        if (changes.settings) {\n            this.used_settings = this.processSettings(this.settings || []);\n            this.initForm();\n        }\n    }\n\n    /** Save changes to the given setting level */\n    public save(level: EncryptionLevel) {\n        const item = this.used_settings[level];\n        if (\n            item &&\n            !this.saving[level] &&\n            item.changes &&\n            item.changes.settings_string !== undefined\n        ) {\n            this.saving[level] = true;\n            item.save().then(\n                (new_settings: EngineSettings) => {\n                    this.saving[level] = false;\n                    this.settings[level] = new_settings;\n                    this._service.notifySuccess(`Successfully saved ${this.type(level)} settings.`);\n                    this.used_settings = this.processSettings(this.settings || []);\n                    this.initForm();\n                },\n                err => {\n                    this.saving[level] = false;\n                    this._service.notifyError(\n                        `Error updating settings. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        }\n    }\n\n    /** Save all changes to settings */\n    public saveAll() {\n        if (this.has_errors) {\n            return;\n        }\n        const promises = [];\n        for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n            if (\n                this.settings[i] &&\n                !this.saving[i] &&\n                Object.keys(this.used_settings[i].changes || {}).length\n            ) {\n                this.saving[i] = true;\n                promises.push(this.used_settings[i].save());\n            }\n        }\n        if (promises.length) {\n            Promise.all(promises).then(\n                (results: EngineSettings[]) => {\n                    for (const result of results) {\n                        this.saving[result.encryption_level] = false;\n                        this.settings[result.encryption_level] = result;\n                    }\n                    this._service.notifySuccess('Successfully saved all settings.');\n                    this.used_settings = this.processSettings(this.settings || []);\n                    this.initForm();\n                },\n                err => {\n                    for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n                        this.saving[i] = false;\n                    }\n                    this._service.notifyError(\n                        `Error updating settings. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        }\n    }\n\n    public clearChanges() {\n        if (this.edited_count < 1) {\n            return;\n        }\n        this.used_settings = this.processSettings(this.settings || []);\n        this.initForm();\n    }\n\n    private initForm() {\n        this.form = new FormGroup({\n            settings0: new FormControl(this.used_settings[0].settings_string, [validateYAML]),\n            settings1: new FormControl(this.used_settings[1].settings_string, [validateYAML]),\n            settings2: new FormControl(this.used_settings[2].settings_string, [validateYAML]),\n            settings3: new FormControl(this.used_settings[3].settings_string, [validateYAML]),\n            settings4: new FormControl(this.used_settings[4].settings_string, [validateYAML])\n        });\n        for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n            this.subscription(\n                `setting_change_${i}`,\n                this.form.controls[`settings${i}`].valueChanges.subscribe(value => {\n                    this.used_settings[i].storePendingChange('settings_string', value);\n                })\n            );\n        }\n    }\n\n    private processSettings(settings: EngineSettings[]): EngineSettings[] {\n        const processed_settings = [];\n        for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n            processed_settings.push(this.processSetting(settings[i]));\n        }\n        processed_settings.push(\n            this.merge ? this.generateMergedSettings(processed_settings) : settings[3]\n        );\n        return processed_settings;\n    }\n\n    private processSetting(setting: EngineSettings): EngineSettings {\n        if (\n            (setting.encryption_level === EncryptionLevel.Admin && !this.is_admin) ||\n            (setting.encryption_level === EncryptionLevel.Support && !this.is_support) ||\n            setting.encryption_level === EncryptionLevel.NeverDisplay\n        ) {\n            const obj = {};\n            for (const key of setting.keys) {\n                obj[key] = '<MASKED>';\n            }\n            const settings_string = (setting.keys || []).length ? yaml.safeDump(obj) : '';\n            return new EngineSettings({\n                ...setting.toJSON(),\n                parent_id: this.id,\n                settings_string\n            });\n        }\n        return new EngineSettings({ ...setting, parent_id: this.id });\n    }\n\n    /** Genereate merged settings from all available settings */\n    private generateMergedSettings(settings: EngineSettings[]): EngineSettings {\n        const local_settings = (settings || []).map(\n            item => yaml.safeLoad(item.settings_string) || {}\n        );\n        const remote_settings = (this.merge_settings || []).map(\n            item => yaml.safeLoad(item.settings_string) || {}\n        );\n        const merged_settings = merge.all(remote_settings.concat(local_settings));\n        const settings_string = Object.keys(merged_settings).length ? yaml.safeDump(merged_settings, { strict: true }) : '';\n        return new EngineSettings({\n            id: 'merged',\n            settings_string,\n            parent_id: this.id,\n            keys: Object.keys(merged_settings)\n        });\n    }\n}\n","<form *ngIf=\"form && used_settings && used_settings.length\" [formGroup]=\"form\">\n    <div class=\"actions\">\n        <button mat-button *ngIf=\"edited_count > 0\" (tapped)=\"clearChanges()\">\n            <div class=\"text\" *ngIf=\"!saving[shown_option.id]; else spinner\"  i18n=\"@@clearLabel\">Clear Changes [C]</div>\n        </button>\n        <button\n            mat-button\n            *ngIf=\"active_edited\"\n            [disabled]=\"has_errors && !saving[shown_option.id]\"\n            (tapped)=\"save(shown_option.id)\"\n        >\n            <div class=\"text\" *ngIf=\"!saving[shown_option.id]; else spinner\"  i18n=\"@@saveLabel\">Save [S]</div>\n        </button>\n        <button\n            mat-button\n            *ngIf=\"edited_count > 1\"\n            [disabled]=\"has_errors && !saving[shown_option.id]\"\n            (tapped)=\"saveAll()\"\n        >\n            <div class=\"text\" *ngIf=\"!saving[shown_option.id]; else spinner\" i18n=\"@@saveAllLabel\">Save All [A]</div>\n        </button>\n    </div>\n    <mat-tab-group\n        [selectedIndex]=\"level_index\"\n        (selectedIndexChange)=\"encryption_level = available_levels[$event].id\"\n    >\n        <mat-tab\n            *ngFor=\"let option of available_levels\"\n            [label]=\"\n                option.name +\n                (option.id !== 4 && used_settings[option.id]?.changes?.settings_string !== undefined\n                    ? ' *'\n                    : '')\n            \"\n        >\n        </mat-tab>\n    </mat-tab-group>\n    <ng-container *ngFor=\"let option of available_levels\">\n        <ng-container\n            *ngIf=\"encryption_level === option.id && form.controls['settings' + option.id]\"\n        >\n            <div [class.error-border]=\"form.controls['settings' + option.id]?.errors\">\n                <settings-form-field\n                    [formControlName]=\"'settings' + option.id\"\n                    [readonly]=\"!option.active || this.saving[option.id]\"\n                ></settings-form-field>\n            </div>\n            <div class=\"error-display\" *ngIf=\"form.controls['settings' + option.id]?.errors\">\n                {{ form.controls['settings' + option.id].errors.yaml }}\n            </div>\n        </ng-container>\n    </ng-container>\n</form>\n<ng-template #spinner>\n    <mat-spinner diameter=\"32\"></mat-spinner>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EncryptionLevel } from '@placeos/ts-client';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { EngineServiceLike, Identity } from 'src/app/shared/utilities/types.utilities';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\n@Component({\n    selector: 'system-form',\n    templateUrl: './system-form.component.html',\n    styleUrls: ['./system-form.component.scss']\n})\nexport class SystemFormComponent extends BaseDirective {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Levels of encyption available for the system's settings */\n    public encryption_levels: Identity[] = [\n        { id: EncryptionLevel.None, name: 'None' },\n        { id: EncryptionLevel.Support, name: 'Support' },\n        { id: EncryptionLevel.Admin, name: 'Admin' },\n        { id: EncryptionLevel.NeverDisplay, name: 'Never Display' }\n    ]\n\n    /** List of separator characters for features */\n    public readonly separators: number[] = [ENTER, SPACE];\n\n    public get feature_list(): string[] {\n        return this.form.controls.feature_list.value;\n    }\n\n    /** Service for handling zones */\n    public get zone_service(): EngineServiceLike {\n        return this._service.Zones;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addFeature(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.feature_list) return;\n        const input = event.input;\n        const value = event.value;\n        const feature_list = this.feature_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.feature_list.setValue(feature_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove feature from the list\n     * @param existing_feature Feature to remove\n     */\n    public removeFeature(existing_feature: string): void {\n        if (!this.form || !this.form.controls.feature_list) return;\n        const feature_list = this.feature_list;\n        const index = feature_list.indexOf(existing_feature);\n\n        if (index >= 0) {\n            feature_list.splice(index, 1);\n            this.form.controls.feature_list.setValue(feature_list);\n        }\n    }\n}\n","<div class=\"system form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.zone\">\n            <label\n                for=\"zone\"\n                [class.error]=\"form.controls.zone.invalid && form.controls.zone.touched\"\n                i18n=\"@@zoneLabel\"\n            >\n                Zone<span>*</span>:\n            </label>\n            <item-search-field [service]=\"zone_service\" formControlName=\"zone\"></item-search-field>\n            <div\n                class=\"error\"\n                *ngIf=\"form.controls.zone.invalid && form.controls.zone.touched\"\n                i18n=\"@@zoneError\"\n            >\n                Zone is required\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"system-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@nameLabel\"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"system-name\"\n                        placeholder=\"System Name\"\n                        i18n-placeholder=\"@@systemNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@systemNameError\"\n                        >System name is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label\n                    for=\"system-email\"\n                    [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                    i18n=\"@@emailLabel\"\n                >\n                    Email:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"system-email\"\n                        placeholder=\"System Email\"\n                        i18n-placeholder=\"@@systemEmailPlaceholder\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error *ngIf=\"form.controls.email.invalid\" i18n=\"@@emailError\"\n                        >A valid email is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.support_url\">\n            <label\n                for=\"support-url\"\n                [class.error]=\"\n                    form.controls.support_url.invalid && form.controls.support_url.touched\n                \"\n                i18n=\"@@supportUrlLabel\"\n            >\n                Support URL:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"support-url\"\n                    placeholder=\"Support URL\"\n                    i18n-placeholder=\"@@suportUrlPlaceholder\"\n                    formControlName=\"support_url\"\n                />\n                <mat-error *ngIf=\"form.controls.support_url.invalid\" i18n=\"@@urlError\">\n                    A valid URL is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.installed_ui_devices\">\n                <label\n                    for=\"ui-devices\"\n                    [class.error]=\"\n                        form.controls.installed_ui_devices.invalid &&\n                        form.controls.installed_ui_devices.touched\n                    \"\n                    i18n=\"@@panelCountLabel\"\n                >\n                    Number of Touch Panels:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"ui-devices\"\n                        type=\"number\"\n                        placeholder=\"Number of Touch Panels\"\n                        i18n-placeholder=\"@@panelCountPlaceholder\"\n                        formControlName=\"installed_ui_devices\"\n                    />\n                    <mat-error\n                        *ngIf=\"form.controls.installed_ui_devices.invalid\"\n                        i18n=\"@@panelCountError\"\n                    >\n                        A valid positive number is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.capacity\">\n                <label\n                    for=\"capacity\"\n                    [class.error]=\"form.controls.capacity.invalid && form.controls.capacity.touched\"\n                    i18n=\"@@capacityLabel\"\n                >\n                    Capacity:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"capacity\"\n                        type=\"number\"\n                        placeholder=\"Capacity\"\n                        i18n-placeholder=\"@@capacityPlaceholder\"\n                        formControlName=\"capacity\"\n                    />\n                    <mat-error *ngIf=\"form.controls.capacity.invalid\" i18n=\"@@capacityError\">\n                        A valid positive number is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.bookable\">\n                <mat-checkbox name=\"bookable\" formControlName=\"bookable\" i18n=\"@@bookableLabel\">\n                    Bookable\n                </mat-checkbox>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.tag_list\">\n            <label\n                for=\"system-email\"\n                [class.error]=\"form.controls.tag_list.invalid && form.controls.tag_list.touched\"\n                i18n=\"@@featuresLabel\"\n            >\n                Features:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-chip-list #chipList aria-label=\"Zone Tags\">\n                    <mat-chip\n                        *ngFor=\"let feature of feature_list\"\n                        [selectable]=\"true\"\n                        [removable]=\"true\"\n                        (removed)=\"removeFeature(feature)\"\n                    >\n                        {{ feature }}\n                        <app-icon matChipRemove [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                    </mat-chip>\n                    <input\n                        placeholder=\"Features...\"\n                        i18n-placeholder=\"@@featuresPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addFeature($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.map_id\">\n            <label for=\"map_id\" i18n=\"@@mapIdLabel\">Map ID:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"map_id\"\n                    i18n-placeholder=\"@@mapIdPlaceholder\"\n                    placeholder=\"Map SVG ID selector e.g. area-01.10-status\"\n                    formControlName=\"map_id\"\n                />\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'system-trigger-form',\n  templateUrl: './system-trigger-form.component.html',\n  styleUrls: ['./system-trigger-form.component.scss']\n})\nexport class SystemTriggerFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"system-trigger form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label for=\"name\" i18n=\"@@nameLabel\"> Name: </label>\n            <div class=\"value\" name=\"name\">{{ form.controls.name.value }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label for=\"triggered\" i18n=\"@@triggeredLabel\"> Currently Triggered: </label>\n            <div class=\"value\" name=\"triggered\">{{ !!form.controls.triggered.value }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.enabled\">\n            <mat-checkbox name=\"enabled\" formControlName=\"enabled\" i18n=\"@@enabledLabel\">Enabled</mat-checkbox>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.important\">\n            <mat-checkbox name=\"important\" formControlName=\"important\" i18n=\"@@importantLabel\">Important</mat-checkbox>\n        </div>\n    </form>\n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ENTER, COMMA, SPACE } from '@angular/cdk/keycodes';\nimport { MatChipList } from '@angular/material/chips';\nimport { EngineSystem } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'trigger-action-form',\n    templateUrl: './trigger-action-form.component.html',\n    styleUrls: ['./trigger-action-form.component.scss']\n})\nexport class TriggerActionFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Systems used for templating the status variables */\n    @Input() public system: EngineSystem;\n    /** List of seperators for storing emails */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n    /** Variable to hold new email addresses */\n    public new_email = '';\n\n    @ViewChild('chipList') private chip_list: MatChipList;\n\n    /** List of available trigger action types */\n    public action_types: Identity[] = [\n        { id: 'function', name: 'Execute Method' },\n        { id: 'email', name: 'Send Email' }\n    ];\n\n    public get email_list(): string[] {\n        return (\n            (this.form && this.form.controls.emails ? this.form.controls.emails.value : null) || []\n        );\n    }\n\n    /**\n     * Add the given emails to the list\n     * @param email New email\n     */\n    public addEmail(email: string): void {\n        if (!email) {\n            return;\n        }\n        const email_list = this.email_list;\n        if (email_list.indexOf(email) < 0) {\n            email_list.push(email);\n        }\n        this.form.controls.emails.setValue(email_list);\n        this.chip_list.errorState = !this.form.controls.emails.valid;\n    }\n\n    /**\n     * Remove given email from the list\n     * @param email Exisiting email\n     */\n    public removeEmail(email: string): void {\n        const email_list = this.email_list;\n        const index = email_list.indexOf(email);\n        if (index >= 0) {\n            email_list.splice(index, 1);\n        }\n        this.form.controls.emails.setValue(email_list);\n        this.chip_list.errorState = !this.form.controls.emails.valid;\n    }\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.action_type\">\n            <label for=\"type\">Action Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"action_type\">\n                    <mat-option *ngFor=\"let type of action_types\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container [ngSwitch]=\"form.controls.action_type.value\">\n            <ng-container *ngSwitchCase=\"'email'\">\n                <div class=\"field\" *ngIf=\"form.controls.emails\">\n                    <label\n                        for=\"description\"\n                        [class.error]=\"form.controls.emails.touched && form.controls.emails.errors\"\n                        i18n=\"@@emailAddressesLabel\"\n                    >\n                        Email Addresses<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-chip-list #chipList aria-label=\"Email addresses\">\n                            <mat-chip\n                                *ngFor=\"let email of email_list\"\n                                [selectable]=\"true\"\n                                [removable]=\"true\"\n                                (removed)=\"removeEmail(email)\"\n                            >\n                                {{ email }}\n                                <app-icon\n                                    matChipRemove\n                                    [icon]=\"{ class: 'backoffice-cross' }\"\n                                ></app-icon>\n                            </mat-chip>\n                            <input\n                                [(ngModel)]=\"new_email\"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                placeholder=\"New email...\"\n                                i18n-placeholder=\"@@addEmailPlaceholder\"\n                                [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separators\"\n                                [matChipInputAddOnBlur]=\"true\"\n                                (matChipInputTokenEnd)=\"addEmail($event.value); new_email = ''\"\n                            />\n                        </mat-chip-list>\n                        <mat-error>{{\n                            form.controls.emails.hasError('email')\n                                ? 'Email addresses need to be valid'\n                                : 'An email address is required'\n                        }}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.content\">\n                    <label for=\"content\" i18n=\"@@emailBodyLabel\">Email Body:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"content\"\n                            placeholder=\"Email body contents...\"\n                            i18n-placeholder=\"@@emailBodyPlacholder\"\n                            formControlName=\"content\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <div class=\"field\" *ngIf=\"form.controls.method_call\">\n                    <label for=\"content\" i18n=\"@@selectExecLabel\">Select method to execute:</label>\n                    <system-exec-field\n                        formControlName=\"method_call\"\n                        [system]=\"system\"\n                        [executable]=\"false\"\n                    ></system-exec-field>\n                </div>\n            </ng-container>\n        </ng-container>\n    </form>\n</div>\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    EngineModule,\n    EngineSystem,\n    TriggerConditionOperator,\n    TriggerStatusVariable\n} from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { calculateModuleIndex } from 'src/app/shared/utilities/api.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: 'trigger-condition-comparison-form',\n    templateUrl: './comparison-form.component.html',\n    styleUrls: ['./comparison-form.component.scss']\n})\nexport class TriggerConditionComparisonFormComponent implements OnInit, OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Systems used for templating the status variables */\n    @Input() public system: EngineSystem;\n    /** List of modules associated with the template system */\n    public modules: EngineModule[] = [];\n    /** List of status variables associated with the selected module */\n    public module_list: Identity[] = [];\n    /** List of status variables associated with the selected module */\n    public left_status_variables: Identity[] = [];\n    /** List of status variables associated with the selected module */\n    public right_status_variables: Identity[] = [];\n    /** Type of value to compare the left hand side to */\n    public rhs_type: 'constant' | 'status_var' = 'constant';\n    /** Type of value to compare the left hand side to */\n    public rhs_value: string;\n    /** Status variable details for the left side of the comparison */\n    public left_side: TriggerStatusVariable = { mod: '', status: '', keys: [] };\n    /** Status variable details for the right side of the comparison */\n    public right_side: TriggerStatusVariable = { mod: '', status: '', keys: [] };\n\n    /** Types of trigger conditions */\n    public right_var_type: Identity[] = [\n        { id: 'constant', name: 'Constant Value' },\n        { id: 'status_var', name: 'Status Variable' }\n    ];\n\n    /** Allowed comparison operators */\n    public compare_types: Identity[] = [\n        { id: TriggerConditionOperator.EQ, name: 'equal to' },\n        { id: TriggerConditionOperator.NEQ, name: 'not equal to' },\n        { id: TriggerConditionOperator.GT, name: 'greater than' },\n        { id: TriggerConditionOperator.GTE, name: 'greater than or equal' },\n        { id: TriggerConditionOperator.LT, name: 'less than' },\n        { id: TriggerConditionOperator.LTE, name: 'less than or equal' },\n        { id: TriggerConditionOperator.AND, name: 'truthy AND' },\n        { id: TriggerConditionOperator.OR, name: 'truthy OR' },\n        { id: TriggerConditionOperator.XOR, name: 'truthy XOR' }\n    ];\n\n    public get left_keys(): string {\n        return this.left_side.keys.join(',');\n    }\n    public get right_keys(): string {\n        return this.right_side.keys.join(',');\n    }\n\n    constructor(private _service: ApplicationService) {}\n\n    public ngOnInit(): void {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.system && this.system) {\n            this.loadSystemModules();\n        }\n    }\n\n    public updateFormForSide(side: 'left' | 'right') {\n        if (this.form.controls[side]) {\n            this.form.controls[side].setValue(this[side + '_side']);\n        }\n    }\n\n    /**\n     * Load the list of status variables for the given modules\n     * @param module Module to list status variables\n     */\n    public loadSystemStatusVariables(mod_name: string, side: 'left' | 'right') {\n        const name = mod_name.split('_');\n        this._service.Systems.state(this.system.id, name[0], +name[1]).then(\n            var_map => {\n                if (Object.keys(var_map).length <= 0) {\n                    var_map.connected = true;\n                }\n                this[`${side}_status_variables`] = Object.keys(var_map).map(key => ({\n                    id: key,\n                    name: key\n                }));\n                this.addExistingStatusVariables();\n            },\n            () =>\n                this._service.notifyError(\n                    `Error loading the status variables for ${this.system.id}, ${mod_name}`\n                )\n        );\n    }\n\n    /**\n     * Load the list of modules for the active system\n     */\n    private loadSystemModules() {\n        if (!this.system) {\n            return;\n        }\n        this._service.Modules.query({ control_system_id: this.system.id }).then(module_list => {\n            this.modules = module_list;\n            const mod_list = this.system.modules;\n            this.modules.sort((a, b) => mod_list.indexOf(a.id) - mod_list.indexOf(b.id));\n            this.module_list = this.modules.map(mod => {\n                const module_class =\n                    mod.custom_name || (mod.driver ? mod.driver.class_name : 'System');\n                const index = calculateModuleIndex(this.modules, mod);\n                return {\n                    id: mod.id,\n                    name: `${module_class}_${index}`\n                };\n            });\n            this.addExistingModules();\n        });\n    }\n\n    /**\n     * Add pre-exisiting module detail to the available list\n     */\n    private addExistingModules() {\n        if (this.form.controls.left && this.form.controls.left.value) {\n            const module = this.form.controls.left.value.mod;\n            if (!this.module_list.find(mod => mod.name === module)) {\n                this.module_list.unshift({ id: 'old_left_value', name: module });\n            }\n            this.loadSystemStatusVariables(module, 'left');\n            this.left_side = this.form.controls.left.value;\n        }\n        if (\n            this.form.controls.right &&\n            this.form.controls.right.value &&\n            this.form.controls.right.value.mod\n        ) {\n            this.rhs_type = 'status_var';\n            const module = this.form.controls.right.value.mod;\n            if (!this.module_list.find(mod => mod.name === module)) {\n                this.module_list.unshift({ id: 'old_right_value', name: module });\n            }\n            this.loadSystemStatusVariables(module, 'right');\n            this.right_side = this.form.controls.right_side.value;\n        }\n    }\n\n    /**\n     * Add pre-exisiting status variables to the available list\n     */\n    private addExistingStatusVariables() {\n        if (this.left_side.status) {\n            if (!this.left_status_variables.find(status => status.name === this.left_side.status)) {\n                this.left_status_variables.unshift({\n                    id: this.left_side.status,\n                    name: this.left_side.status\n                });\n            }\n        }\n        if (this.right_side.status) {\n            if (\n                !this.right_status_variables.find(status => status.name === this.right_side.status)\n            ) {\n                this.right_status_variables.unshift({\n                    id: this.right_side.status,\n                    name: this.right_side.status\n                });\n            }\n        }\n    }\n}\n","<div class=\"trigger-condition form comparison\" *ngIf=\"form\" [formGroup]=\"form\">\n    <ng-container\n        *ngTemplateOutlet=\"status_variable_form; context: { side: 'left' }\"\n    ></ng-container>\n    <div *ngIf=\"form.controls.left.touched && form.controls.left.errors\" class=\"error\" i18n=\"@@statusVarError\">\n        A module status variable is required\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.operator\">\n        <label for=\"operator\" hidden i18n=\"@@operationLabel\">Operation:</label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select name=\"operator\" formControlName=\"operator\" placeholder=\"Select comparison operator\">\n                <mat-option *ngFor=\"let operation of compare_types\" [value]=\"operation.id\">\n                    {{ operation.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.operator\">\n        <label for=\"compared-to\" hidden i18n=\"@@comparedLabel\">Compared to:</label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"compared-to\"\n                [(ngModel)]=\"rhs_type\"\n                (ngModelChange)=\"form.controls.right.setValue(null)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n            >\n                <mat-option *ngFor=\"let type of right_var_type\" [value]=\"type.id\">\n                    {{ type.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"rhs_type === 'constant' && form.controls.right; else rhs_status_var\">\n        <label for=\"constant\" hidden i18n=\"@@comparedLabel\">Compared to:</label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"constant\"\n                formControlName=\"right\"\n                placeholder=\"true/false, 'string', 123.456\"\n                i18n-placeholder=\"@@comparedValue\"\n            />\n        </mat-form-field>\n    </div>\n    <div *ngIf=\"form.controls.right.touched && form.controls.right.errors\" class=\"error\"  i18n=\"@@statusValueError\">\n        A module status variable or value is required\n    </div>\n</div>\n<ng-template #rhs_status_var>\n    <ng-container\n        *ngTemplateOutlet=\"status_variable_form; context: { side: 'right' }\"\n    ></ng-container>\n</ng-template>\n<ng-template #status_variable_form let-side=\"side\">\n    <div class=\"fieldset\">\n        <div class=\"field\">\n            <label for=\"type\"  i18n=\"@@moduleLabel\">Module:</label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [(ngModel)]=\"this[side + '_side'].mod\"\n                    (ngModelChange)=\"loadSystemStatusVariables($event, side)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                    placeholder=\"Select module\"\n                >\n                    <mat-option *ngFor=\"let mod of module_list\" [value]=\"mod.name\">\n                        {{ mod.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div\n            class=\"field\"\n            *ngIf=\"this[side + '_status_variables'] && this[side + '_status_variables'].length\"\n        >\n            <label [for]=\"side + '-status-var'\" i18n=\"@@statusVarLabel\">Status Variable:</label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [name]=\"side + '-status-var'\"\n                    [(ngModel)]=\"this[side + '_side'].status\"\n                    (ngModelChange)=\"updateFormForSide(side)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                    placeholder=\"Select status variable\"\n                    i18n-placeholder=\"@@statusVarPlaceholder\"\n                >\n                    <mat-option\n                        *ngFor=\"let mod of this[side + '_status_variables']\"\n                        [value]=\"mod.name\"\n                    >\n                        {{ mod.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n    <div\n        class=\"field\"\n        *ngIf=\"this[side + '_status_variables'] && this[side + '_status_variables'].length\"\n    >\n        <label [for]=\"side + '-subkeys'\"  i18n=\"@@subkeysLabel\">Subkeys:</label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                [ngModel]=\"this[side + '_keys']\"\n                (ngModelChange)=\"this[side + '_side'].keys = $event.split(','); updateFormForSide(side);\"\n                [name]=\"side + '-subkeys'\"\n                placeholder=\"Status variable subkeys...\"\n                i18n-placeholder=\"@@subkeysPlaceholder\"\n            />\n        </mat-form-field>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { numberToPosition } from 'src/app/shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\nimport * as cron from 'cron-builder';\n\n@Component({\n    selector: 'trigger-condition-time-form',\n    templateUrl: './time-form.component.html',\n    styleUrls: ['./time-form.component.scss']\n})\nexport class TriggerConditionTimeFormComponent implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available periods for scheduled repetition */\n    public repeat_period: Identity[] = [\n        { id: 'minute', name: 'Minute' },\n        { id: 'hour', name: 'Hour' },\n        { id: 'day', name: 'Day' },\n        { id: 'week', name: 'Week' },\n        { id: 'month', name: 'Month' },\n        { id: 'year', name: 'Year' }\n    ];\n    /** Whether condition is a cron(recurring) job */\n    public is_cron: boolean;\n    /** The period which the user selects the recurrence */\n    public cron_period: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year' = 'minute';\n\n    public minutes_in_hour = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];\n    public hours_in_day = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n    public days_of_week = Array(7)\n        .fill(0)\n        .map((_, index) =>\n            dayjs()\n                .day(index)\n                .format('ddd')\n        );\n    public days_of_month: Identity[] = Array(31)\n        .fill(0)\n        .map((_, index) => ({ id: index + 1, name: `${numberToPosition(index + 1)}` }));\n    public months_of_year = Array(12)\n        .fill(0)\n        .map((_, index) =>\n            dayjs()\n                .month(index)\n                .format('MMM')\n        );\n    /** Minute of the hour to recurr on */\n    public cron_minute = 0;\n    /** Hour of the day to recurr on */\n    public cron_hour = 0;\n    /** Hour of the day to recurr on */\n    public cron_hour_period = 'AM';\n    /** Hour of the day to recurr on */\n    public cron_day = this.days_of_week[0];\n    /** Hour of the day to recurr on */\n    public cron_date = 1;\n    /** Hour of the day to recurr on */\n    public cron_month = this.months_of_year[0];\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form && this.form) {\n            this.is_cron = this.form.controls.time_type.value === 'cron';\n            if (this.is_cron) {\n                this.loadCronTab(this.form.controls.cron.value);\n            }\n        }\n    }\n\n    /**\n     * Update the output CRON string for the selected periods\n     */\n    public updateCronString() {\n        if (this.form && this.form.controls.cron) {\n            const current_cron = new cron();\n            const hour = (this.cron_hour % 12) + (this.cron_hour_period === 'AM' ? 0 : 12);\n            const day_of_week = this.days_of_week.indexOf(this.cron_day);\n            const month = this.months_of_year.indexOf(this.cron_month);\n            switch (this.cron_period) {\n                case 'minute':\n                    break;\n                case 'hour':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    break;\n                case 'day':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    break;\n                case 'week':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    current_cron.set('dayOfTheWeek', [`${day_of_week + 1}`]);\n                    break;\n                case 'month':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    current_cron.set('dayOfTheMonth', [`${this.cron_date}`]);\n                    break;\n                case 'year':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    current_cron.set('dayOfTheMonth', [`${this.cron_date}`]);\n                    current_cron.set('month', [`${month + 1}`]);\n                    break;\n            }\n            const cron_str = current_cron.build();\n            this.form.controls.cron.setValue(cron_str);\n        }\n    }\n\n    private loadCronTab(cron_tab: string): void {\n        const cron_str = new cron(cron_tab);\n        this.cron_minute =\n            cron_str.get('minute') === '*' ? this.cron_minute : +cron_str.get('minute');\n        this.cron_hour = cron_str.get('hour') === '*' ? this.cron_minute : +cron_str.get('hour');\n        if (this.cron_hour > 12) {\n            this.cron_hour = this.cron_hour % 12;\n            this.cron_hour_period = 'PM';\n        } else {\n            this.cron_hour_period = 'AM';\n        }\n        this.cron_day =\n            cron_str.get('dayOfTheWeek') === '*'\n                ? this.cron_day\n                : this.days_of_week[+cron_str.get('dayOfTheWeek')];\n        this.cron_date =\n            cron_str.get('dayOfTheMonth') === '*' ? this.cron_date : +cron_str.get('dayOfTheMonth');\n        this.cron_month =\n            cron_str.get('month') === '*'\n                ? this.cron_month\n                : this.months_of_year[+cron_str.get('month') - 1];\n        /** Set the cron period */\n        if (cron_str.get('month') !== '*') {\n            this.cron_period = 'year';\n        } else if (cron_str.get('dayOfTheMonth') !== '*') {\n            this.cron_period = 'month';\n        } else if (cron_str.get('dayOfTheWeek') !== '*') {\n            this.cron_period = 'week';\n        } else if (cron_str.get('hour') !== '*') {\n            this.cron_period = 'day';\n        } else if (cron_str.get('minute') !== '*') {\n            this.cron_period = 'hour';\n        } else {\n            this.cron_period = 'minute';\n        }\n    }\n}\n","<div class=\"trigger-condition form time\" *ngIf=\"form\" [formGroup]=\"form\">\n    <div class=\"field\">\n        <mat-checkbox [(ngModel)]=\"is_cron\" (ngModelChange)=\"form.controls.cron.setValue(null)\" [ngModelOptions]=\"{ standalone: true }\" i18n=\"@@recurringLabel\">\n            Recurring Schedule\n        </mat-checkbox>\n    </div>\n    <div class=\"fieldset\" *ngIf=\"!is_cron; else cron_time_form\">\n        <div class=\"field\" *ngIf=\"form.controls.time\">\n            <label for=\"type\" i18n=\"@@dateLabel\">Date: </label>\n            <a-date-field name=\"date\" formControlName=\"time\"></a-date-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.time\">\n            <label for=\"type\" i18n=\"@@timeLabel\">Time: </label>\n            <a-time-field name=\"date\" formControlName=\"time\"></a-time-field>\n        </div>\n    </div>\n</div>\n<ng-template #cron_time_form>\n    <div class=\"field\">\n        <label for=\"type\" i18n=\"@@repeatLabel\">Repeat every: </label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"type\"\n                [(ngModel)]=\"cron_period\"\n                (ngModelChange)=\"updateCronString()\"\n                [ngModelOptions]=\"{ standalone: true }\"\n            >\n                <mat-option *ngFor=\"let period of repeat_period\" [value]=\"period.id\">\n                    {{ period.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period === 'month' || cron_period === 'year'\">\n        <label for=\"day\" i18n=\"@@dayLabel\">Day of Month: </label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"day\"\n                [(ngModel)]=\"cron_date\"\n                (ngModelChange)=\"updateCronString()\"\n                [ngModelOptions]=\"{ standalone: true }\"\n            >\n                <mat-option *ngFor=\"let period of days_of_month\" [value]=\"period.id\">\n                    {{ period.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period === 'year'\">\n        <label for=\"month\" i18n=\"@@monthLabel\">Month of year: </label>\n        <mat-button-toggle-group\n            name=\"month\"\n            [(ngModel)]=\"cron_month\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let month of months_of_year\" [value]=\"month\">\n                {{ month }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period === 'week'\">\n        <label for=\"weekday\" i18n=\"@@weekLabel\">Day of week: </label>\n        <mat-button-toggle-group\n            name=\"weekday\"\n            [(ngModel)]=\"cron_day\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let weekday of days_of_week\" [value]=\"weekday\">\n                {{ weekday }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period !== 'minute' && cron_period !== 'hour'\">\n        <label for=\"hour\"i18n=\"@@hourLabel\">Hour in the day: </label>\n        <mat-button-toggle-group\n            name=\"hour\"\n            [(ngModel)]=\"cron_hour\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let hour of hours_in_day\" [value]=\"hour\">\n                {{ hour }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n        <mat-button-toggle-group\n            name=\"hour\"\n            [(ngModel)]=\"cron_hour_period\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let hour of ['AM', 'PM']\" [value]=\"hour\">\n                {{ hour }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period !== 'minute'\">\n        <label for=\"minute\"i18n=\"@@minuteLabel\">Minute past the hour: </label>\n        <mat-button-toggle-group\n            name=\"minute\"\n            [(ngModel)]=\"cron_minute\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let minute of minutes_in_hour\" [value]=\"minute\">\n                {{ minute }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EngineSystem } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'trigger-condition-form',\n    templateUrl: './trigger-condition-form.component.html',\n    styleUrls: ['./trigger-condition-form.component.scss']\n})\nexport class TriggerConditionFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Systems used for templating the status variables */\n    @Input() public system: EngineSystem;\n\n    /** Types of trigger conditions */\n    public condition_types: Identity[] = [\n        { id: 'compare', name: 'Compare values' },\n        { id: 'time', name: 'Particular time' }\n    ];\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.condition_type\">\n            <label for=\"type\" i18n=\"@@conditionTypeLabel\">Condition Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"condition_type\">\n                    <mat-option *ngFor=\"let type of condition_types\" [value]=\"type.id\" i18n=\"@@triggerConditionType\">\n                        { type.id, select, compare { Compare Values } time { Particular Time } }\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container *ngIf=\"form.controls.condition_type.value === 'compare'; else time_form\">\n            <trigger-condition-comparison-form [form]=\"form\" [system]=\"system\"></trigger-condition-comparison-form>\n        </ng-container>\n    </form>\n</div>\n<ng-template #time_form>\n    <trigger-condition-time-form [form]=\"form\"></trigger-condition-time-form>\n</ng-template>\n\n\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'trigger-form',\n    templateUrl: './trigger-form.component.html',\n    styleUrls: ['./trigger-form.component.scss']\n})\nexport class TriggerFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"zone form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"trigger-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"trigger-name\"\n                    placeholder=\"Trigger Name\"\n                    i18n-placeholder=\"@@triggerNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@triggerError\">Trigger name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.enable_webhook\">\n            <mat-checkbox name=\"enable-webhook\" formControlName=\"enable_webhook\" i18n=\"@@enableWebhooklabel\">\n                Enable Webhook\n            </mat-checkbox>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    templateUrl: './user-form.component.html',\n    styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Whether password should be visible in plaintext */\n    public show_password: boolean;\n    /** Whether password confirm should be visible in plaintext */\n    public show_confirm: boolean;\n}\n","<form class=\"user form\" *ngIf=\"form\" [formGroup]=\"form\">\n    <!--  fake fields are a workaround for chrome/opera autofill getting the wrong fields -->\n    <input id=\"email\" style=\"display: none;\" type=\"text\" name=\"fakeusernameremembered\" />\n    <input id=\"password\" style=\"display: none;\" type=\"password\" name=\"fakepasswordremembered\" />\n    <div class=\"field\" *ngIf=\"form.controls.name\">\n        <label\n            for=\"system-name\"\n            [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n            i18n=\"@@nameLabel\"\n        >\n            Name<span>*</span>:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"name\"\n                placeholder=\"Name\"\n                i18n-placeholder=\"@@namePlaceholder\"\n                formControlName=\"name\"\n                required\n            />\n            <mat-error i18n=\"@@userNameError\">User's name is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.email\">\n        <label\n            for=\"useremail\"\n            [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n            i18n=\"@@emailLabel\"\n        >\n            Email<span>*</span>:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"useremail\"\n                placeholder=\"Email\"\n                i18n-placeholder=\"@@emailPlaceholder\"\n                formControlName=\"email\"\n                autocomplete=\"nope\"\n            />\n            <mat-error i18n=\"@@emailError\">A valid email is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.staff_id\">\n        <label\n            for=\"staff-id\"\n            [class.error]=\"form.controls.staff_id.invalid && form.controls.staff_id.touched\"\n            i18n=\"@@cardNumberLabel\"\n        >\n            Card Number:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"staff-id\"\n                placeholder=\"Card Number\"\n                i18n-placeholder=\"@@cardNumberPlaceholder\"\n                formControlName=\"staff_id\"\n            />\n            <mat-error i18n=\"@@cardNumberError\">A valid Card Number is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.support\">\n        <mat-checkbox name=\"support\" formControlName=\"support\" i18n=\"@@supportLabel\"\n            >Support</mat-checkbox\n        >\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.sys_admin\">\n        <mat-checkbox name=\"sys_admin\" formControlName=\"sys_admin\" i18n=\"@@adminLabel\"\n            >System Admin</mat-checkbox\n        >\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.staff_id\">\n        <label\n            for=\"new-password\"\n            [class.error]=\"form.controls.password.invalid && form.controls.password.touched\"\n            i18n=\"@@passwordLabel\"\n        >\n            Password:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"new-password\"\n                autocomplete=\"new-password\"\n                [type]=\"show_password ? 'text' : 'password'\"\n                placeholder=\"Password\"\n                i18n-placeholder=\"@@passwordPlaceholder\"\n                formControlName=\"password\"\n            />\n            <app-icon\n                matSuffix\n                [icon]=\"{ class: 'material-icons', content: 'visibility' }\"\n                (mousedown)=\"show_password = true\"\n                (window:mouseup)=\"show_password = false\"\n                (touchstart)=\"show_password = true\"\n                (window:touchend)=\"show_password = false\"\n            ></app-icon>\n            <mat-error i18n=\"@@passordError\">A valid password is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.confirm_password\">\n        <label\n            for=\"confirm-password\"\n            [class.error]=\"\n                form.controls.confirm_password.invalid && form.controls.confirm_password.touched\n            \"\n            minlength=\"1\"\n            i18n=\"@@checkPasswordLabel\"\n        >\n            Confirm Pasword:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                [type]=\"show_confirm ? 'text' : 'password'\"\n                name=\"confirm-password\"\n                placeholder=\"Confirm Password\"\n                i18n-placeholder=\"@@checkPasswordPlaceholder\"\n                formControlName=\"confirm_password\"\n                minlength=\"1\"\n            />\n            <app-icon\n                matSuffix\n                [icon]=\"{ class: 'material-icons', content: 'visibility' }\"\n                (mousedown)=\"show_confirm = true\"\n                (window:mouseup)=\"show_confirm = false\"\n                (touchstart)=\"show_confirm = true\"\n                (window:touchend)=\"show_confirm = false\"\n            ></app-icon>\n            <mat-error i18n=\"@@checkPasswordError\">Passwords don't match</mat-error>\n        </mat-form-field>\n    </div>\n</form>\n","<div class=\"zone form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.parent_zone\">\n            <label for=\"parent-zone\" i18n=\"@@parentZoneLabel\">Parent Zone: </label>\n            <item-search-field\n                name=\"parent-zone\"\n                [service]=\"zone_service\"\n                [exclude]=\"exclude\"\n                formControlName=\"parent_zone\"\n            ></item-search-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"zone-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >\n                Name<span>*</span>:\n                </label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"zone-name\"\n                    placeholder=\"Zone Name\"\n                    i18n-placeholder=\"@@zoneNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@zoneNameError\">Zone name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.tag_list\">\n            <label\n                for=\"system-email\"\n                [class.error]=\"form.controls.tag_list.invalid && form.controls.tag_list.touched\"\n                i18n=\"@@tagsLabel\"\n                >\n                Tags:\n                </label\n            >\n            <mat-form-field appearance=\"outline\">\n                <mat-chip-list #chipList aria-label=\"Zone Tags\">\n                    <mat-chip\n                        *ngFor=\"let tag of tag_list\"\n                        [selectable]=\"true\"\n                        [removable]=\"true\"\n                        (removed)=\"removeTag(tag)\"\n                    >\n                        {{ tag }}\n                        <app-icon matChipRemove [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                    </mat-chip>\n                    <input\n                        placeholder=\"Zone tags...\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.location\">\n            <label for=\"location\" i18n=\"@@locationLabel\">Location:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"location\"\n                    placeholder=\"Geo-location details for zone. <lat, long>\"\n                    i18n-placeholder=\"@@locationPlaceholder\"\n                    formControlName=\"location\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.code\">\n                <label for=\"code\" i18n=\"@@codeLabel\">Code:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"code\"\n                        placeholder=\"Organisation Code\"\n                        i18n-placeholder=\"@@codePlaceholder\"\n                        formControlName=\"code\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.location\">\n                <label for=\"type\" i18n=\"@@typeLabel\">Type:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"type\"\n                        placeholder=\"Organisational Categorisation\"\n                        i18n-placeholder=\"@@zoneTypePlaceholder\"\n                        formControlName=\"type\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.count\">\n                <label for=\"count\" i18n=\"@@countLabel\">Count:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"count\"\n                        type=\"number\"\n                        placeholder=\"Resource count. Desks, Hardware, etc.\"\n                        i18n-placeholder=\"@@zoneFeatureCountPlaceholder\"\n                        formControlName=\"count\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.capacity\">\n                <label for=\"capacity\" i18n=\"@@capacityLabel\">Capacity:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"capacity\"\n                        type=\"number\"\n                        placeholder=\"Physical capacity of the zone\"\n                        i18n-placeholder=\"@@zoneCapacityPlaceholder\"\n                        formControlName=\"capacity\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.map_id\">\n            <label for=\"map\" i18n=\"@@mapUrlLabel\">Map:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"map\"\n                    placeholder=\"Map ID or URL\"\n                    i18n-placeholder=\"@@mapUrlPlaceholder\"\n                    formControlName=\"map_id\"\n                />\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EngineZone } from '@placeos/ts-client';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\nimport { EngineServiceLike } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n@Component({\n    selector: 'zone-form',\n    templateUrl: './zone-form.component.html',\n    styleUrls: ['./zone-form.component.scss']\n})\nexport class ZoneFormComponent extends BaseDirective {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA];\n    /** Function to exclude zones */\n    public readonly exclude = (zone: EngineZone) => zone.id === this.form.controls.id.value\n\n    /** Service for handling zones */\n    public get zone_service(): EngineServiceLike {\n        return this._service.Zones;\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tag_list.value;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.updateZone();\n        }\n    }\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tag_list) return;\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tag_list.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tag_list) return;\n        const tag_list = this.tag_list;\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tag_list.setValue(tag_list);\n        }\n    }\n\n    /** Update parent zone details if set */\n    private async updateZone() {\n        const parent_id = this.form.controls.parent_id ? this.form.controls.parent_id.value : '';\n        if (parent_id) {\n            const zone = await this._service.Zones.show(parent_id);\n            this.form.controls.parent_zone.setValue(zone);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\nimport { BaseDirective } from '../../globals/base.directive';\n\n@Component({\n    selector: 'app-icon',\n    templateUrl: './icon.component.html',\n    styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent extends BaseDirective {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n}\n","<div class=\"app-icon\" *ngIf=\"icon\">\n    <i *ngIf=\"icon.type !== 'img'\" [class]=\"icon.class\">{{ icon.content }}</i>\n    <img *ngIf=\"icon.type === 'img'\" [src]=\"icon.src | safe:'resource'\" />\n</div>","import {\n    Component,\n    Input,\n    TemplateRef,\n    Output,\n    EventEmitter,\n    OnInit,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineResource, EngineDriver, EngineDriverRole } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../../services/app.service';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { DialogEvent, Identity } from '../../utilities/types.utilities';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\nimport {\n    ItemCreateUpdateModalComponent,\n    CreateEditModalData\n} from 'src/app/overlays/item-modal/item-modal.component';\nimport { Router } from '@angular/router';\n\nexport interface ApplicationTab {\n    id: string;\n    name: string;\n    icon: ApplicationIcon;\n    template: TemplateRef<any>;\n    count?: number;\n}\n\n@Component({\n    selector: 'item-display',\n    templateUrl: './item-display.template.html',\n    styleUrls: ['./item-display.styles.scss']\n})\nexport class ItemDisplayComponent<T extends Identity = any> extends BaseDirective implements OnInit {\n    /** Name of the type of item being shown */\n    @Input() public name: string;\n    /** Base route of parent component */\n    @Input() public route: string;\n    /** Resource to display details of */\n    @Input() public item: T;\n    /** Whether resouce data is being loaded */\n    @Input() public loading: boolean;\n    /** Whether item is allowed to be edited and deleted */\n    @Input() public has_change = true;\n    /** Tabs available to the item type */\n    @Input() public tabs: ApplicationTab[] = [];\n    /** Emitter for events on the item display */\n    @Output() public event = new EventEmitter();\n    /** ID of the active tab */\n    public active_tab: string;\n\n    @ViewChild('content') public content_el: ElementRef<HTMLDivElement>;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    public get is_scrolled() {\n        if (this.content_el) {\n            return this.content_el.nativeElement.scrollTop > 0;\n        }\n        return false;\n    }\n\n    public get driver_type(): string {\n        const item: any = this.item;\n        if (!item.role) {\n            return '';\n        }\n        const driver: EngineDriver = item || {};\n        switch (driver.role) {\n            case EngineDriverRole.Device:\n                return 'Device';\n            case EngineDriverRole.SSH:\n                return 'SSH';\n            case EngineDriverRole.Service:\n                return 'Service';\n            case EngineDriverRole.Websocket:\n                return 'Websocket';\n        }\n        return 'Logic';\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'right',\n            this._service.Hotkeys.listen(['ArrowRight'], () => this.changeTab(1))\n        );\n        this.subscription(\n            'left',\n            this._service.Hotkeys.listen(['ArrowLeft'], () => this.changeTab(-1))\n        );\n    }\n\n    public changeTab(direction) {\n        if (!this.item) { return; }\n        console.log('Item:', this.item);\n        this.timeout('change_tab', () => {\n            const index = this.tabs.findIndex(tab => this._router.url.indexOf(tab.id) >= 0);\n            if (index >= 0 && this.tabs[index + direction]) {\n                this._router.navigate([`/${this.route}`, this.item.id, this.tabs[index + direction].id]);\n            }\n        }, 100);\n    }\n\n    /** Copy the ID of the active item to the clipboard */\n    public copy() {\n        if (this.item && this.item.id) {\n            document.execCommand('copy');\n            this._service.notifyInfo('ID copied to clipboard');\n        }\n    }\n\n    /**\n     * Open modal to edit the active item\n     */\n    public edit() {\n        const ref = this._dialog.open<ItemCreateUpdateModalComponent, CreateEditModalData>(\n            ItemCreateUpdateModalComponent,\n            {\n                data: {\n                    service: (this.item as any)._service,\n                    item: this.item,\n                    form: [] as any,\n                    name: this.name\n                }\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.item = e.metadata.item;\n                }\n            })\n        );\n    }\n\n    /**\n     * Delete the active item\n     */\n    public delete() {\n        this.event.emit({ type: 'delete' });\n    }\n\n    /**\n     * Delete the active item\n     */\n    public duplicateItem() {\n        this.event.emit({ type: 'duplicate' });\n    }\n\n    /**\n     * Delete the active item\n     */\n    public newFromItem() {\n        this.event.emit({ type: 'copy' });\n    }\n\n    /**\n     * Export the active item as a CSV\n     */\n    public exportAsCSV() {\n        this.event.emit({ type: 'export' });\n    }\n}\n","<div class=\"container\" [class.dark-mode]=\"dark_mode\">\n    <header *ngIf=\"item && !loading\">\n        <div class=\"heading-group\">\n            <div class=\"heading\">\n                {{ item.display_name || item.custom_name || item.name || \"&lt;Unnamed&gt;\" }}\n            </div>\n            <div class=\"info\">\n                <div class=\"id\" *ngIf=\"item.id\" (click)=\"copy()\">\n                    <span>{{ item.id }}</span>\n                </div>\n                <div class=\"chip driver\" *ngIf=\"driver_type\" i18n=\"@@driverType\">\n                    { driver_type, select, Device { Device } Logic { Logic } SSH { SSH } Websocket {\n                    Websocket } Service { Service } other { Other } }\n                </div>\n                <div\n                    class=\"chip connect\"\n                    *ngIf=\"item.connected !== null && item.connected !== undefined\"\n                    [class.active]=\"item.connected\"\n                    i18n=\"@@onlineState\"\n                >\n                    { item.connected, select, true { Online } false { Offline } other { Other } }\n                </div>\n                <div class=\"chip secure\" *ngIf=\"item.tls\">\n                    <div class=\"icon\"><i class=\"backoffice-lock\"></i></div>\n                    <div class=\"text\" i18n=\"@@secure\">Secure</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"options\" *ngIf=\"has_change\">\n            <button [matMenuTriggerFor]=\"action_menu\" mat-icon-button>\n                <app-icon [icon]=\"{ class: 'backoffice-dots-three-vertical' }\"></app-icon>\n            </button>\n        </div>\n    </header>\n    <main *ngIf=\"item && !loading\">\n        <div class=\"tabs\">\n            <nav mat-tab-nav-bar [class.scroll]=\"is_scrolled\">\n                <a\n                    class=\"tab\"\n                    mat-tab-link\n                    *ngFor=\"let link of tabs\"\n                    [routerLink]=\"item.id ? ['/' + route, item.id, link.id] : ['/' + route, link.id]\"\n                    routerLinkActive\n                    #rla=\"routerLinkActive\"\n                    [active]=\"rla.isActive\"\n                >\n                    <app-icon [icon]=\"link.icon\"></app-icon>&nbsp;\n                    <div class=\"name\" i18n=\"@@tabNames\">\n                        { link.name, select, About { About } Modules { Modules } Zones { Zones }\n                        Triggers { Triggers } Systems { Systems } Metadata { Metadata } Children {\n                        Children } Drivers { Drivers } History { History } Applications {\n                        Applications } Authentication { Authentication } Users { Users } Database {\n                        Database } Clusters { Clusters } Interfaces { Interfaces } MQTT Brokers {\n                        MQTT Brokers } other { Other }} &nbsp;\n                    </div>\n                    <div class=\"count\" *ngIf=\"link.count || link.count === 0\">\n                        ({{ link.count || '0' }})\n                    </div>\n                </a>\n            </nav>\n            <div class=\"content\" #content (scroll)=\"is_scrolled\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    </main>\n</div>\n<div class=\"not-mobile center\" *ngIf=\"!item && !loading\">\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <i class=\"backoffice-arrow-left\"></i>\n        </div>\n        <div class=\"text\" i18n=\"@@selectItem\">\n            Select a { name, select, system { system } module { module } driver { driver }\n            repository { repository } zone { zone } trigger { trigger } user { user } domain {\n            domain } other { other } } from the sidebar\n        </div>\n    </div>\n</div>\n<div class=\"mobile-only center\" *ngIf=\"!item && !loading\">\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <i class=\"backoffice-arrow-up\"></i>\n        </div>\n        <div class=\"text\" i18n=\"@@selectItemMobile\">\n            Select a { name, select, system { system } module { module } driver { driver }\n            repository { repository } zone { zone } trigger { trigger } user { user } domain {\n            domain } other { other } } from the search bar\n        </div>\n    </div>\n</div>\n<div class=\"info-block center\" *ngIf=\"loading\">\n    <div class=\"icon\">\n        <a-spinner circle-ring></a-spinner>\n    </div>\n    <div class=\"text\" i18n=\"@@itemLoading\">\n        Loading { name, select, system { system } module { module } driver { driver } repository {\n        repository } zone { zone } trigger { trigger } user { user } domain { domain } other { other\n        } }...\n    </div>\n</div>\n<mat-menu #action_menu=\"matMenu\">\n    <button *ngIf=\"has_change\" mat-menu-item (click)=\"edit()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@editAction\">\n                Edit { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } } [E]\n            </div>\n        </div>\n    </button>\n    <button mat-menu-item (click)=\"newFromItem()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@copyItemAction\">\n                Create new from this { name, select, system { system } module { module } driver {\n                driver } repository { repository } zone { zone } trigger { trigger } user { user }\n                domain { domain } other { other } }\n            </div>\n        </div>\n    </button>\n    <button mat-menu-item (click)=\"duplicateItem()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-flow-branch' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@duplicateAction\">\n                Duplicate { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } }\n            </div>\n        </div>\n    </button>\n    <button mat-menu-item (click)=\"exportAsCSV()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-download' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@exporeAction\">\n                Export { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } } as CSV template\n            </div>\n        </div>\n    </button>\n    <button *ngIf=\"has_change\" mat-menu-item (click)=\"delete()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@deleteAction\">\n                Delete { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } } [D]\n            </div>\n        </div>\n    </button>\n</mat-menu>\n","\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'forgot-pass-form',\n    templateUrl: './forgot-pass-form.template.html',\n    styleUrls: ['./forgot-pass-form.styles.scss']\n})\nexport class ForgotPassFormComponent {\n\n}\n\n","\nimport { LoginComponent } from './login.component';\nimport { ForgotPassFormComponent } from './forgot-pass-form/forgot-pass-form.component';\nimport { RegisterFormComponent } from './register-form/register-form.component';\nimport { LoginFormComponent } from './login-form/login-form.component';\n\nexport const LOGIN_COMPONENTS: any[] = [\n    LoginComponent,\n    LoginFormComponent,\n    RegisterFormComponent,\n    ForgotPassFormComponent\n];\n","\nimport { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { ApplicationService } from '../../../../services/app.service';\nimport { FormGroup } from '@angular/forms';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { LoginSettings } from 'src/app/shared/utilities/settings.interfaces';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'login-form',\n    templateUrl: './login-form.template.html',\n    styleUrls: ['./login-form.styles.scss']\n})\nexport class LoginFormComponent extends BaseDirective implements OnInit {\n    /** Form fields for logging in */\n    @Input() public form: FormGroup;\n    /** Emitter for user forgot password action */\n    @Output() public forgot = new EventEmitter<void>();\n    /** Emitter for form submission events */\n    @Output() public submitted = new EventEmitter<void>();\n    /** Settings for the login form */\n    public settings: LoginSettings;\n    /** Whether the password should be shown */\n    public show_password: boolean;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.settings = this._service.setting('app.login') || {};\n        });\n    }\n}\n\n","<div\n    class=\"container\"\n    (window:mouseup)=\"show_password = false\"\n    (window:touchend)=\"show_password = false\"\n>\n    <form name=\"login\" *ngIf=\"form\" [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.username\">\n            <label\n                for=\"username\"\n                [class.error]=\"form.controls.username.invalid && form.controls.username.touched\"\n                >Email:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <!-- <app-icon matPrefix [icon]=\"{ class: 'backoffice-user' }\"></app-icon> -->\n                <input\n                    matInput\n                    name=\"username\"\n                    placeholder=\"Email/Username\"\n                    formControlName=\"username\"\n                    autocomplete=\"username\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"field password\" *ngIf=\"form.controls.password\">\n            <label\n                for=\"password\"\n                [class.error]=\"form.controls.password.invalid && form.controls.password.touched\"\n                >Password:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <!-- <app-icon matPrefix [icon]=\"{ class: 'backoffice-key' }\"></app-icon> -->\n                <input\n                    matInput\n                    name=\"password\"\n                    [type]=\"show_password ? 'text' : 'password'\"\n                    placeholder=\"Password\"\n                    formControlName=\"password\"\n                    autocomplete=\"current-password\"\n                />\n                <app-icon\n                    matSuffix\n                    [icon]=\"{ class: show_password ? 'backoffice-eye' : 'backoffice-eye' }\"\n                    (mousedown)=\"show_password = true\"\n                    (touchstart)=\"show_password = true\"\n                ></app-icon>\n                <mat-error *ngIf=\"form.controls.password.invalid\"\n                    >Invalid Username or Password</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <!-- <mat-checkbox formControlName=\"remember\">Remember username</mat-checkbox> -->\n        <div class=\"forgot\" *ngIf=\"settings?.forgotten_password\" (tapped)=\"forgot.emit()\">\n            Forgot?\n        </div>\n        <div class=\"options\">\n            <button mat-button type=\"submit\" (tapped)=\"submitted.emit()\">Submit</button>\n        </div>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { ApplicationService } from '../../../services/app.service';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { ApplicationImageIcon } from '../../utilities/settings.interfaces';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'login-display',\n    templateUrl: './login.template.html',\n    styleUrls: ['./login.styles.scss']\n})\nexport class LoginComponent extends BaseDirective implements OnInit {\n    public login_form: FormGroup;\n    /** Name of the component contents to show */\n    public show: 'login' | 'forgot' | 'register';\n    /** Whether a user action is being processed */\n    public loading: boolean;\n    /** Logo of the application/organisation */\n    public logo: ApplicationImageIcon;\n    /** Current work environment for the application */\n    public env: string;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.show = 'login';\n        this.loading = true;\n        const remembered_name = localStorage.getItem('BACKOFFICE.username');\n        this.login_form = new FormGroup({\n            username: new FormControl(remembered_name || ''),\n            password: new FormControl(''),\n            remember: new FormControl(!!remembered_name)\n        });\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    public init() {\n        this.env = this._service.setting('env');\n        this.logo = this._service.setting('app.logo') || {};\n        this.subscription(\n            'state',\n            this._service.Users.state.subscribe(state => {\n                this.loading = false;\n                if (state === 'invalid') {\n                    this.show = 'login';\n                } else if (state === 'loading') {\n                    this.loading = true;\n                }\n            })\n        );\n    }\n\n    public processLogin(e: any) {\n        if (e.type === 'login') {\n        } else if (e.type === 'forgot') {\n            this.show = 'forgot';\n        } else {\n            this.show = 'login';\n        }\n    }\n\n    public login() {\n        const form_values = this.login_form.value;\n        this._service.Users.login({\n            email: form_values.username,\n            password: form_values.password\n        }).then(\n            () => {\n                if (form_values.remember) {\n                    localStorage.setItem('BACKOFFICE.username', form_values.username);\n                }\n            },\n            err => {\n                console.log('Error:', err);\n                this.login_form.controls.password.setErrors({ invalid: true });\n            }\n        );\n    }\n\n    public forgottenPassword() {\n        this.show = 'forgot';\n    }\n}\n","<div class=\"container\" [class.uat]=\"env !== 'prod'\">\n    <div class=\"login-container\">\n        <header><div class=\"text\">Login</div></header>\n        <div class=\"form\" *ngIf=\"!loading; else load_state\">\n            <login-form\n                *ngIf=\"show === 'login'\"\n                [form]=\"login_form\"\n                (forgot)=\"forgottenPassword()\"\n                (submitted)=\"login()\"\n            ></login-form>\n            <register-form *ngIf=\"show === 'register'\"></register-form>\n            <forgot-pass-form *ngIf=\"show === 'forgot'\"></forgot-pass-form>\n        </div>\n    </div>\n</div>\n<ng-template #load_state>\n    <div class=\"loader\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"rgba(0,0,0, .54)\"></a-spinner>\n        </div>\n        <div class=\"text\">\n            Loading user data...\n        </div>\n    </div>\n</ng-template>\n","\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'register-form',\n    templateUrl: './register-form.template.html',\n    styleUrls: ['./register-form.styles.scss']\n})\nexport class RegisterFormComponent {\n\n}\n\n","\nimport { Component, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n\n@Component({\n    selector: 'searchbar',\n    templateUrl: './searchbar.template.html',\n    styleUrls: ['./searchbar.styles.scss']\n})\nexport class SearchbarComponent extends BaseDirective {\n    @Input() public filter: string;\n    @Input() public limit: string;\n    @Input() public dictation = true;\n    @Input() public clearable = true;\n    @Input() public placeholder = 'Search...';\n    @Output() public filterChange = new EventEmitter();\n    @Output() public focus = new EventEmitter();\n    @Output() public blur = new EventEmitter();\n\n    public model: any = {};\n\n    @ViewChild('input', { static: true }) private input: ElementRef;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n        const win = window as any;\n        this.model.speech = !!(win.SpeechRecognition || win.webkitSpeechRecognition);\n    }\n\n    /**\n     * Activate dictation search\n     */\n    public startDictation() {\n        if (!this.input) { return; }\n        if (this.model.recognition) {\n            this.model.recognition.stop();\n            this.model.dictate = false;\n            this.model.recognition = null;\n            return;\n        }\n        const win = self as any;\n        const speech: any = win.SpeechRecognition || win.webkitSpeechRecognition;\n        if (speech) {\n            this.model.recognition = new speech();\n\n            this.model.recognition.continuous = false;\n            this.model.recognition.interimResults = false;\n\n            this.model.recognition.lang = 'en-US';\n            this.model.recognition.start();\n            this.model.dictate = true;\n\n            this.model.recognition.onresult = (e: any) => {\n                    // Update search field with dictation result\n                this.input.nativeElement.value = e.results[0][0].transcript;\n                this.filter = e.results[0][0].transcript;\n                this.model.recognition.stop();\n                this.post();\n                this.model.dictate = false;\n            };\n\n            this.model.recognition.onerror = (e: any) => {\n                this.model.recognition.stop();\n                this.model.dictate = false;\n            };\n        }\n    }\n\n    public focusInput() {\n        this.model.focus = true;\n        this.timeout('focus', () => {\n            if (this.input && this.input.nativeElement) {\n                this.input.nativeElement.focus();\n                this.focus.emit();\n            }\n        }, 50);\n    }\n\n    public clear() {\n        this.filter = '';\n        this.post();\n    }\n\n    public post() {\n        this.checkLimitations();\n        this.timeout('post', () => {\n            this.filterChange.emit(this.filter);\n        });\n    }\n\n    public checkLimitations() {\n        if (!this.limit) { return; }\n        for (let i = 0; i < (this.filter || '').length; i++) {\n            if (this.limit.indexOf(this.filter[i]) >= 0) {\n                this.filter = this.filter.substr(0, i) + this.filter.substr(i + 1);\n                i--;\n            }\n        }\n    }\n}\n","<div class=\"searchbar\" [class.dark-mode]=\"dark_mode\" widget>\n    <div class=\"field\" [class.focus]=\"model.focus || filter || model.dictate\">\n        <button mat-icon-button (touchrelease)=\"focusInput()\">\n            <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n        </button>\n        <div class=\"input\">\n            <input #input [(ngModel)]=\"filter\" (ngModelChange)=\"post()\"\n                (focus)=\"model.focus = true; focus.emit($event)\"\n                (blur)=\"model.focus = false; blur.emit($event)\"\n                [placeholder]=\"placeholder\">\n        </div>\n        <button mat-icon-button *ngIf=\"model.speech && dictation\" [class.active]=\"model.dictate\" (tapped)=\"startDictation()\">\n            <app-icon [icon]=\"{ class: 'backoffice-mic' }\"></app-icon>\n        </button>\n        <button mat-icon-button class=\"close\" *ngIf=\"filter && clearable\" (tapped)=\"clear()\">\n            <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n        </button>\n        <ng-content></ng-content>\n    </div>\n</div>\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n    ViewChild,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    SimpleChanges\n} from '@angular/core';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { EngineModule, EngineDriverRole } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationService } from '../../../services/app.service';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { EngineServiceLike, HashMap, Identity } from '../../utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\nimport { unique } from '../../utilities/general.utilities';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'sidebar',\n    templateUrl: './sidebar.template.html',\n    styleUrls: ['./sidebar.styles.scss']\n})\nexport class SidebarComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Module name to display at the top of the sidebar */\n    @Input() public heading = '';\n    /** List of items to render on the list */\n    @Input() public list: any[] = [];\n    /** Name of the active module */\n    @Input() public module: EngineServiceLike;\n    /** Whether the list is being loaded */\n    @Input() public loading: boolean;\n    /** Additional query params to add to item load requests */\n    @Input('queryParams') public query_params: HashMap = {};\n    /** Whether sidebar is closed */\n    @Input() public close = false;\n    /** Search string */\n    @Input() public search = '';\n    /** Emitter for changes to the search string */\n    @Output() public searchChange = new EventEmitter();\n    /** Emitter for user actions on the component */\n    @Output() public event = new EventEmitter();\n    /** Async list of items to render on the sidebar list */\n    public items: BehaviorSubject<Identity[]> = new BehaviorSubject([]);\n    /** Whether the application has initialised */\n    public intialised: boolean;\n    /** Last time the list was updated */\n    public last_check: number;\n    /** Last total number of items when the list was fetched */\n    public last_total: number;\n\n    /** List of elements for each associated item */\n    @ViewChildren('list_item') private item_list: QueryList<ElementRef>;\n    /** Virtual scrolling viewport */\n    @ViewChild(CdkVirtualScrollViewport)\n    private viewport: CdkVirtualScrollViewport;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    /** Whether list is has been scrolled from the top */\n    public get is_scrolled(): boolean {\n        if (this.viewport) {\n            const element = this.viewport.elementRef.nativeElement;\n            if (element) {\n                return element.scrollTop > 0;\n            }\n        }\n        return false;\n    }\n\n    /** Whether new items for the active module can be created */\n    public get new(): boolean {\n        if (this.module) {\n            return this._service.setting(`app.${this.module._api_route}.can_create`);\n        }\n        return false;\n    }\n\n    public get total(): number {\n        return this.search ? this.module.last_total : this.module.total;\n    }\n\n    public get grand_total(): number {\n        return this.module.total;\n    }\n\n    /** Heading value lower cased */\n    public get lowercase_heading() {\n        return (this.heading || '').toLowerCase();\n    }\n\n    /** Path of the active module */\n    public get route() {\n        const route = this.module._api_route;\n        return `/${route}`;\n    }\n\n    /** Maxiumum allowed items for the active module */\n    public get licenses(): number {\n        if (this.module) {\n            return this._service.setting(`app.${this.module._api_route}.licenses`);\n        }\n        return 0;\n    }\n\n    /** Map of item names to their IDs */\n    public get item_name(): HashMap<string> {\n        const map = {};\n        const list = this.items.getValue() || [];\n        for (let item of list) {\n            if (item instanceof EngineModule) {\n                const detail =\n                    item.role === EngineDriverRole.Service\n                        ? item.uri\n                        : item.role === EngineDriverRole.Logic\n                            ? item.control_system_id\n                            : item.ip;\n                map[item.id] = `${item.custom_name || item.name || '<Unnamed>'} <span class=\"small\">${detail}<span>`;\n            } else {\n                map[item.id] = item.custom_name || item.name || '<Unnamed>';\n            }\n        }\n        return map;\n    }\n\n    constructor(private _service: ApplicationService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            if (!this._service.get('BACKOFFICE.active_item')) {\n                this._service.set('BACKOFFICE.active_item', null);\n            }\n            if (!this._service.get('BACKOFFICE.removed')) {\n                this._service.set('BACKOFFICE.removed', '');\n            }\n            this.subscription(\n                'active_item',\n                this._service.listen('BACKOFFICE.active_item').subscribe(item => this.replaceActiveItem(item))\n            );\n            this.subscription(\n                'remove_item',\n                this._service.listen('BACKOFFICE.removed').subscribe(id => this.removeItem(id))\n            );\n            this.subscription(\n                'up',\n                this._service.Hotkeys.listen(['Alt', 'ArrowUp'], () => this.changeSelected(-1))\n            );\n            this.subscription(\n                'down',\n                this._service.Hotkeys.listen(['Alt', 'ArrowDown'], () => this.changeSelected(1))\n            );\n            this.items.next(this.list || []);\n            this.atBottom();\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (this._service.is_initialised && (changes.list || changes.close)) {\n            this.last_check = dayjs().valueOf();\n            this.items.next(this.list || []);\n            this.atBottom();\n        }\n        if (changes.module && changes.module.previousValue !== changes.module.currentValue) {\n            this.searching();\n        }\n        if (changes.query_params && this.query_params) {\n            this.searching();\n        }\n    }\n\n    /** Whether to update the list of items */\n    public get is_stale() {\n        const now = dayjs();\n        const last_check = dayjs(this.last_check);\n        return (\n            this.last_total !== this.items.getValue().length ||\n            last_check.add(1, 'm').isBefore(now, 's')\n        );\n    }\n\n    /**\n     * Check if user has scrolled to the bottom of the sidebar and emit an event to get next page of items\n     */\n    public atBottom() {\n        if (this.loading || !this.is_stale) {\n            return;\n        }\n        if (!this.viewport) {\n            return this.timeout('atBottom', () => this.atBottom());\n        }\n        const end = this.viewport.getRenderedRange().end;\n        const total = this.viewport.getDataLength();\n        if (end === total) {\n            this.last_total = total;\n            this.last_check = dayjs().valueOf();\n            if (this.last_total !== this.module.last_total) {\n                this.searching(this.list.length);\n            }\n        }\n    }\n\n    /**\n     * List item tracking function to reduce shadow dom re-rendering on changes\n     * @param item Item to check\n     * @param index Index of the item\n     */\n    public trackByFn(item: HashMap, index: number) {\n        return item.id || index;\n    }\n\n    /** Emit events to the parent element */\n    public post(type: string) {\n        this.event.emit({ type });\n    }\n\n    /**\n     * Update the list displayed on the sidebar\n     * @param offset Page offset for the list\n     */\n    public searching(offset: number = 0) {\n        this.loading = true;\n        if (this.module) {\n            this.module.query({ q: this.search, offset, ...(this.query_params || {}) }).then(\n                list => {\n                    this.list = offset ? this.list.concat(list) : list;\n                    this.list = unique(this.list, 'id');\n                    this.list.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n                    this.items.next(this.list);\n                    this.loading = false;\n                },\n                err => {\n                    this._service.notifyError(`Error updating ${this.module._name} list. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                    this.loading = false;\n                }\n            );\n        } else {\n            this.loading = false;\n        }\n    }\n\n    /**\n     * Update the selected item\n     * @param offset Offset with which to select the new item\n     */\n    public changeSelected(offset: number) {\n        const list = this.item_list.toArray();\n        const item_list = this.items.getValue();\n        if (list && list.length > 0) {\n            let index = item_list.findIndex(item => this._router.url.indexOf(`${item.id}`) >= 0);\n            index += offset;\n            if (index >= 0 && index < list.length) {\n                list[index].nativeElement.scrollIntoView(false);\n                this._service.navigate([this.module._api_route, item_list[index].id]);\n            }\n        }\n    }\n\n    /**\n     * Replaces the active item with the latest local version\n     * @param active_item New active item\n     */\n    private replaceActiveItem(active_item: Identity) {\n        if (!active_item) {\n            return;\n        }\n        console.log('Replace:', active_item);\n        const list = this.items.getValue() || [];\n        const index = list.findIndex(item => item.id === active_item.id);\n        if (index >= 0) {\n            list.splice(index, 1, active_item);\n        } else if (list.length > 0 && list[0].constructor === active_item.constructor) {\n            list.push(active_item);\n        } else {\n            list.push(active_item);\n        }\n\n        list.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this.items.next([...list]);\n        console.log('Replaced');\n    }\n\n    /**\n     * Remove item from the list\n     * @param id\n     */\n    private removeItem(id: string): void {\n        if (!id) {\n            return;\n        }\n        const list = this.items.getValue() || [];\n        const index = list.findIndex(item => item.id === id);\n        if (index >= 0) {\n            list.splice(index, 1);\n\n            this.items.next([...list]);\n        }\n    }\n}\n","<div class=\"container\" [class.dark-mode]=\"dark_mode\">\n    <header>\n        <div class=\"heading\">\n            { heading, select, Systems { Systems } Modules { Modules } Zones { Zones } Drivers {\n            Drivers } Repositories { Repositories } Triggers { Triggers } Users { Users } Domains { Domains }\n            Admin { Admin } other { Other } }\n        </div>\n        <div class=\"count\">\n            <div>\n                <div\n                    class=\"inline\"\n                    [matTooltip]=\"heading + ' count / License count'\"\n                    i18n-matTooltip\n                >\n                    {{ total || 0 }} of {{ (search ? grand_total : licenses) || '∞' }}\n                </div>\n            </div>\n        </div>\n        <div\n            class=\"add\"\n            *ngIf=\"new && (total < licenses || !licenses)\"\n            (click)=\"post('new')\"\n            [matTooltip]=\"'Add ' + heading + ' [N]'\"\n            i18n-matTooltip\n        >\n            <i class=\"backoffice-plus\"></i>\n        </div>\n        <div\n            class=\"error\"\n            *ngIf=\"new && (total >= licenses && licenses)\"\n            matTooltip=\"\n            Exceeded quota! No new item can be created\n            until the total is below you license count.\"\n            i18n-matTooltip\n        >\n            <i class=\"backoffice-warning\"></i>\n        </div>\n        <button mat-icon-button class=\"mobile-only\" (touchrelease)=\"event.emit({ type: 'toggle' })\">\n            <app-icon [icon]=\"{ class: 'backoffice-' + (close ? 'cross' : 'list') }\"></app-icon>\n        </button>\n    </header>\n    <section class=\"search\">\n        <div class=\"input\">\n            <input\n                [(ngModel)]=\"search\"\n                (ngModelChange)=\"searching()\"\n                [placeholder]=\"'Filter ' + lowercase_heading\"\n                i18n-placeholder\n            />\n        </div>\n    </section>\n    <section class=\"content\" [class.scroll]=\"is_scrolled\">\n        <ng-content></ng-content>\n    </section>\n    <section class=\"list\">\n        <ng-container *ngIf=\"list\">\n            <cdk-virtual-scroll-viewport\n                itemSize=\"48\"\n                (scroll)=\"is_scrolled\"\n                (scrolledIndexChange)=\"atBottom()\"\n            >\n                <ng-container *cdkVirtualFor=\"let item of items | async; trackBy:trackByFn\">\n                    <a [routerLink]=\"[route, item.id]\" routerLinkActive=\"active\">\n                        <div #list_item class=\"item\" [title]=\"\">\n                            <div class=\"text\" [innerHTML]=\"item_name[item.id] | sanitize\"></div>\n                            <app-icon\n                                [icon]=\"{ type: 'icon', class: 'backoffice-check' }\"\n                            ></app-icon>\n                        </div>\n                    </a>\n                </ng-container>\n            </cdk-virtual-scroll-viewport>\n        </ng-container>\n        <div class=\"info-block center\" *ngIf=\"!loading && (!list || !list.length)\">\n            <div class=\"icon\">\n                <i class=\"backoffice-cross\"></i>\n            </div>\n            <div class=\"text\">{{ !search ? 'No ' + lowercase_heading : 'No matches found' }}</div>\n            <div class=\"btn\" *ngIf=\"new\">\n                <button mat-button (click)=\"post('new')\" i18n>\n                    Add new {{ lowercase_heading }}\n                </button>\n            </div>\n        </div>\n    </section>\n    <div class=\"loading\" *ngIf=\"loading\">\n        <a-spinner double-circle-ring color=\"#F44336\"></a-spinner>\n    </div>\n</div>\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ElementRef,\n    SimpleChanges,\n    OnChanges\n} from '@angular/core';\nimport { Terminal } from 'xterm';\n\nimport { BaseDirective } from '../../globals/base.directive';\n\n@Component({\n    selector: 'a-terminal',\n    templateUrl: './terminal.component.html',\n    styleUrls: ['./terminal.component.scss']\n})\nexport class TerminalComponent extends BaseDirective implements OnInit, OnChanges, OnDestroy {\n    /** Contents to display on the terminal */\n    @Input() public content: string;\n    /** Resizes terminal display on change */\n    @Input() public resize: boolean;\n    /** Local instance of an xterm terminal */\n    public terminal: Terminal;\n\n    @ViewChild('terminal', { static: true }) public terminal_element: ElementRef<HTMLDivElement>;\n    @ViewChild('container', { static: true }) public container_el: ElementRef<HTMLDivElement>;\n\n    public ngOnInit(): void {\n        if (this.terminal) {\n            this.ngOnDestroy();\n        }\n        this.terminal = new Terminal({ theme: { background: `#263238` } });\n        this.terminal.open(this.terminal_element.nativeElement);\n        this.timeout('init', () => {\n            this.resizeTerminal();\n            this.updateTerminalContents(this.content || '');\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.content) {\n            this.updateTerminalContents(this.content || '');\n        }\n        if (changes.resize) {\n            this.timeout('resize', () => this.resizeTerminal());\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.terminal.clear();\n        this.terminal.dispose();\n    }\n\n    /**\n     * Resize the terminal display to fill the container element\n     */\n    public resizeTerminal(): void {\n        if (!this.terminal || !this.container_el) {\n            return;\n        }\n        const font_size = this.terminal.getOption('fontSize');\n        const line_height = this.terminal.getOption('lineHeight');\n        const box = this.container_el.nativeElement.getBoundingClientRect();\n        const width = Math.floor(box.width / (font_size * 0.6));\n        const height = Math.floor(box.height / (line_height * font_size * 1.28));\n        this.terminal.resize(width - 2, height);\n    }\n\n    /**\n     * Update the rendered contents of the terminal view\n     * @param new_content New contents to render\n     */\n    private updateTerminalContents(new_content: string) {\n        if (!this.terminal) {\n            return;\n        }\n        this.terminal.clear();\n        const lines: string[] = new_content.split('\\n');\n        for (const line of lines) {\n            this.terminal.writeln(line);\n        }\n        this.timeout('scroll', () => this.terminal.scrollToBottom(), 50);\n    }\n}\n","<div class=\"container\" #container (window:resize)=\"resizeTerminal()\">\n    <div class=\"terminal\" #terminal></div>\n</div>","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0 })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR = trigger('show', [\n    state('show', style({ opacity: 1, height: '*', width: '*' })),\n    state('hide', style({ opacity: 0, height: 0, width: 0 })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { Subscription, BehaviorSubject } from 'rxjs';\n\nexport class BaseClass {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: { [name: string]: Subscription | (() => void) } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n\n    /** Observable of the initialised state of the object */\n    public get initialised(): BehaviorSubject<boolean> {\n        return this._initialised;\n    }\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay) as any;\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = setInterval(() => fn(), delay) as any;\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name Name of the subscription to clear\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n}\n","\nimport { OnDestroy, Directive } from '@angular/core';\nimport { BaseClass } from './base.class';\n\n@Directive({\n    selector: 'a-very-basic-component-base-that-should-not-be-used'\n})\nexport class BaseDirective extends BaseClass implements OnDestroy {\n\n    public ngOnDestroy(): void {\n        // Clear local timers\n        for (const key in this._timers) {\n            if (this._timers.hasOwnProperty(key)) {\n                this.clearTimeout(key);\n            }\n        }\n        // Clear local intervals\n        for (const key in this._intervals) {\n            if (this._intervals.hasOwnProperty(key)) {\n                this.clearInterval(key);\n            }\n        }\n        // Clear local subscriptions\n        for (const key in this._subscriptions) {\n            if (this._subscriptions.hasOwnProperty(key)) {\n                this.unsub(key);\n            }\n        }\n    }\n}\n\n","import { Injectable } from '@angular/core';\nimport {\n    CanActivate,\n    CanLoad,\n    Route,\n    UrlSegment,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n    Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthorisedAdminGuard implements CanActivate, CanLoad {\n\n    constructor(private _service: ApplicationService, private _router: Router) {}\n\n    public canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        const user = this._service.get('user');\n        const can_activate = user && user.sys_admin;\n        if (!can_activate) { this._router.navigate(['/systems']); }\n        return can_activate;\n    }\n\n    public canLoad(\n        route: Route,\n        segments: UrlSegment[]\n    ): Observable<boolean> | Promise<boolean> | boolean {\n        const user = this._service.get('user');\n        const can_load = user && user.sys_admin;\n        if (!can_load) { this._router.navigate(['/systems']); }\n        return can_load;\n    }\n}\n","\nimport { generateBasicHandlers, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst DOMAIN_DATA = [];\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/domains`, DOMAIN_DATA, FILTER_FN);\n\n","\nimport * as DRIVER_DATA from '../data/drivers.json';\nimport { generateBasicHandlers, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/drivers`, (DRIVER_DATA as any).default, FILTER_FN);\n\nwindow.control.handlers.push({\n    path: `${API}/drivers/:id/compiled`,\n    metadata: (DRIVER_DATA as any).default,\n    method: 'GET',\n    callback: (event) => true,\n} as MockHttpRequestHandler);\n\n","\nimport './zones.mock';\nimport './repositories.mock';\nimport './drivers.mock';\nimport './modules.mock';\nimport './systems.mock';\nimport './triggers.mock';\nimport './users.mock';\nimport './domains.mock';\n\nimport './settings.mock';\n","import * as MODULE_DATA from '../data/modules.json';\nimport { generateBasicHandlers, API, endpointData } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.control_system_id) {\n        console.log('Endpoint data:', endpointData(`${API}/systems`));\n        const system = endpointData(`${API}/systems`).find((sys) => sys.id === q.control_system_id);\n        console.log('System:', system);\n        match =\n            match &&\n            (item.control_system_id === q.control_system_id ||\n                (system && system.modules.includes(item.id)));\n    }\n    if (q.driver_id) {\n        match = match && item.driver_id === q.driver_id;\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/modules`, (MODULE_DATA as any).default, FILTER_FN);\n","import { EngineRepositoryType, MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport * as DISCOVERY_DATA from '../data/discovery.json';\n\nimport { generateBasicHandlers, API, generateID } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst REPO_DATA = [\n    {\n        id: `repo-${generateID()}`,\n        name: 'PlaceOS Drivers',\n        folder_name: 'drivers/placeos',\n        uri: 'https://github.com/PlaceOS/drivers',\n        commit_hash: 'head',\n        type: EngineRepositoryType.Driver,\n    },\n];\n\nconst DRIVER_LIST = (DISCOVERY_DATA as any).default.map((driver) => driver.id);\n\nconst COMMIT_LIST = [\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'feat(drivers): cleanup drivers',\n    },\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'chore(readme): update readme',\n    },\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'refactor(drivers): cleanup lighting driver',\n    },\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'test(drivers): update test coverage',\n    },\n];\n\nCOMMIT_LIST.sort((a, b) => b.date - a.date);\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/repositories`, REPO_DATA, FILTER_FN);\n\n/** Add handlers for getting respository drivers */\nwindow.control.handlers.push({\n    path: `${API}/repositories/:id/drivers`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return DRIVER_LIST;\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting respository driver's commits */\nwindow.control.handlers.push({\n    path: `${API}/repositories/:id/commits`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return COMMIT_LIST;\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting respository driver's details */\nwindow.control.handlers.push({\n    path: `${API}/repositories/:id/details`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return (DISCOVERY_DATA as any).default.find(\n                (driver) => driver.id === event.query_params.driver\n            );\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n","\nimport { generateBasicHandlers, API, listenToHandlerChanges, generateID } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport { EncryptionLevel } from '@placeos/ts-client';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.parent_id) {\n        match = match && item.parent_id === q.parent_id;\n    }\n    return match;\n};\n\nconst SETTINGS_DATA = [];\n\nconst handle_items_fn = (list) => {\n    list.forEach(item => {\n        if (item.settings && !SETTINGS_DATA.find(s => s.parent_id === item.id)) {\n            SETTINGS_DATA.push({\n                id: `setting-${generateID()}`,\n                parent_id: item.id,\n                encryption_level: EncryptionLevel.None,\n                settings_string: item.settings instanceof Object ? JSON.stringify(item.settings) : item.settings\n            });\n        }\n    });\n    console.log('Settings:', SETTINGS_DATA);\n};\n\nlet obs = listenToHandlerChanges(`${API}/systems`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\nobs = listenToHandlerChanges(`${API}/modules`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\nobs = listenToHandlerChanges(`${API}/zones`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\nobs = listenToHandlerChanges(`${API}/drivers`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/settings`, SETTINGS_DATA, FILTER_FN);\n\n\n","\nimport * as SYSTEM_DATA from '../data/systems.json';\nimport { generateBasicHandlers, API, endpointData } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.zone_id) {\n        match = match && (item.zones || []).includes(q.zone_id);\n    }\n    if (q.module_id) {\n        match = match && (item.modules || []).includes(q.module_id);\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/systems`, (SYSTEM_DATA as any).default, FILTER_FN);\n\n/** Add handlers for getting system's zones */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/zones`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const system = endpointData(`${API}/systems`).find(sys => sys.id === event.route_params.id);\n            if (system) {\n                const zones = endpointData(`${API}/zones`);\n                return zones.filter(\n                    (item) => system.zones.includes(item.id)\n                );\n            }\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting system's modules */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/modules`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const system = endpointData(`${API}/systems`).find(sys => sys.id === event.route_params.id);\n            if (system){\n                const modules = endpointData(`${API}/modules`);\n                return modules.filter(\n                    (item) => system.modules.includes(item.id)\n                );\n            }\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting system's triggers */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/triggers`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return [];\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting system's inherited settings */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/settings`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const settings = endpointData(`${API}/settings`).filter(sys => sys.id === event.route_params.id);\n            return settings.reduce((map, item) => ({ ...map, ...JSON.parse(item.settings_string) }))\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n","\nimport { generateBasicHandlers, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst TRIGGER_DATA = [];\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/triggers`, TRIGGER_DATA, FILTER_FN);\n\n","\nimport { generateBasicHandlers, generateID, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport * as faker from 'faker';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst PREDFINED_USERS = [\n    'Alex Sorafumo',\n    'Jonathan McFarlane',\n    'Stephen von Takach',\n    'Alexandre Chuvand',\n    'Jeremy West',\n    'Phil Kheav',\n    'Sravani Kotha'\n].map((name) => ({\n    id: `user-${generateID()}`,\n    name,\n    email: `${name.split(' ').join('.')}@place.tech`,\n    support: Math.floor(Math.random() * 999_999) % 10 === 0,\n    sys_admin: Math.floor(Math.random() * 999_999) % 10 === 0\n}));\n\nconst USER_DATA = Array(30).fill(0).map(() => {\n    const name = `${faker.name.firstName()} ${faker.name.lastName()}`;\n    return {\n        id: `user-${generateID()}`,\n        name,\n        email: `${name.split(' ').join('.')}@place.tech`,\n        support: Math.floor(Math.random() * 999_999) % 10 === 0,\n        sys_admin: Math.floor(Math.random() * 999_999) % 10 === 0\n    }\n}).concat(PREDFINED_USERS);\n\nconst CURRENT_USER = {\n    id: `current`,\n    name: 'Place Admin',\n    email: `admin@place.tech`,\n    support: Math.floor(Math.random() * 999_999) % 10 === 0,\n    sys_admin: Math.floor(Math.random() * 999_999) % 10 === 0\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/users`, [...USER_DATA, CURRENT_USER], FILTER_FN);\n","import * as ZONE_DATA from '../data/zones.json';\nimport { generateBasicHandlers, API, endpointData } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.parent) {\n        match = match && item.parent_id === q.parent;\n    }\n    if (q.control_system_id) {\n        const system = endpointData(`${API}/systems`).find((sys) => sys.id === q.control_system_id);\n        match = match && system && system.zones.includes(item.id);\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/zones`, (ZONE_DATA as any).default, FILTER_FN);\n","import { Observable, BehaviorSubject } from 'rxjs';\nimport { HashMap } from '../utilities/types.utilities';\n\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\n/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/engine/v2';\n\nconst ENDPOINT_SUBJECTS: HashMap<BehaviorSubject<any[]>> = {};\nconst ENDPOINT_OBSERVABLES: HashMap<Observable<any[]>> = {};\n/** List of available characters for IDs */\nconst AVAILABLE_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~'.split('');\n\nexport type FilterFn<T> = (item: T, query: HashMap) => boolean;\n\n/**\n * Generate an ID with length\n * @param length Length of the ID\n */\nexport function generateID(length: number = 12, chars: string[] = AVAILABLE_CHARS) {\n    let id = '';\n    while (id.length < length) {\n        id += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return id;\n}\n\n/**\n * Get obsevable for changes to data on endpoint\n * @param endpoint Endpoint to listen to\n */\nexport function listenToHandlerChanges(endpoint: string): Observable<any> {\n    return ENDPOINT_OBSERVABLES[endpoint];\n}\n\n/**\n * Get list of data from endpoint\n * @param endpoint Endpoint to grab data for\n */\nexport function endpointData(endpoint: string): any[] {\n    return (ENDPOINT_SUBJECTS[endpoint] ? ENDPOINT_SUBJECTS[endpoint].getValue() : null) || [];\n}\n\n/**\n * Function the generate the bas\n * @param endpoint\n * @param data\n */\nexport function generateBasicHandlers<T = any>(\n    endpoint: string,\n    data: T[],\n    filter: FilterFn<T> = (_: T, q: HashMap) => true\n): Observable<T[]> {\n    if (ENDPOINT_SUBJECTS[endpoint]) {\n        ENDPOINT_SUBJECTS[endpoint].complete();\n        delete ENDPOINT_SUBJECTS[endpoint];\n        delete ENDPOINT_OBSERVABLES[endpoint];\n    }\n    console.log('Data:', endpoint, data);\n    ENDPOINT_SUBJECTS[endpoint] = new BehaviorSubject<T[]>(data);\n    ENDPOINT_OBSERVABLES[endpoint] = ENDPOINT_SUBJECTS[endpoint].asObservable();\n    if (!window.control) {\n        window.control = {};\n    }\n    if (!window.control.handlers) {\n        window.control.handlers = [];\n    }\n    /** Add GET for index */\n    window.control.handlers.push({\n        path: `${endpoint}`,\n        metadata: data,\n        method: 'GET',\n        callback: (event) => {\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            list.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n            return list.filter((item) => filter(item, event.query_params));\n        },\n    } as MockHttpRequestHandler);\n    /** Add GET for show */\n    window.control.handlers.push({\n        path: `${endpoint}/:id`,\n        metadata: data,\n        method: 'GET',\n        callback: (event) => {\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            return list.find(\n                (item) => item.id === event.route_params.id && filter(item, event.query_params)\n            );\n        },\n    } as MockHttpRequestHandler);\n    /** Add POST for item */\n    window.control.handlers.push({\n        path: `${endpoint}`,\n        metadata: data,\n        method: 'POST',\n        callback: (event) => {\n            const item = event.body;\n            item.id = `item-${generateID()}`;\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            list.push(item);\n            ENDPOINT_SUBJECTS[endpoint].next(list);\n            return item;\n        },\n    } as MockHttpRequestHandler);\n    /** Add PATCH/PUT for item */\n    const action = {\n        path: `${endpoint}/:id`,\n        metadata: data,\n        method: 'POST',\n        callback: (event) => {\n            const item = event.body;\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            const index = list.find((an_item) => an_item.id === event.query_params.id);\n            if (index >= 0) {\n                const old_item = list[index];\n                list.splice(index, 1, { ...old_item, ...item });\n                ENDPOINT_SUBJECTS[endpoint].next(list);\n                return item;\n            } else {\n                throw { status: 404, message: 'Not found' };\n            }\n        },\n    } as MockHttpRequestHandler;\n    window.control.handlers.push(action);\n    window.control.handlers.push({ ...action, method: 'PUT' });\n    /** Add DELETE for item */\n    window.control.handlers.push({\n        path: `${endpoint}/:id`,\n        metadata: data,\n        method: 'DELETE',\n        callback: (event) => {\n            const item = event.body;\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            const index = list.find((an_item) => an_item.id === event.query_params.id);\n            if (index >= 0) {\n                list.splice(index, 1);\n                ENDPOINT_SUBJECTS[endpoint].next(list);\n                return item;\n            } else {\n                throw { status: 404, message: 'Not found' };\n            }\n        },\n    } as MockHttpRequestHandler);\n\n    return ENDPOINT_OBSERVABLES[endpoint];\n}\n","\nimport './system.mockup';\nimport './backend';\n\nexport * from './system.mockup';\n","/**\n * @Author: Alex Sorafumo <alex.sorafumo>\n * @Date:   11/01/2017 4:16 PM\n * @Email:  alex@yuion.net\n * @Filename: mock-system.ts\n * @Last modified by:   Alex Sorafumo\n * @Last modified time: 03/02/2017 2:26 PM\n */\n\nimport * as dayjs from 'dayjs';\n\nconst win = self as any;\n\nwin.systemData = win.systemData || {};\nwin.control = win.control || {};\nwin.control.systems = win.control.systems || {};\nwin.control.systems['sys-B0'] = {\n    System: [\n        {\n            name: 'Demo System'\n        }\n    ],\n    Demo: [\n        {\n            volume: 0,\n            mute: false,\n            views: 0,\n            state: 'Idle',\n\n            $play: () => {\n                win.control.systems['sys-B0'].Demo[0].state = 'Playing';\n            },\n\n            $stop: () => {\n                win.control.systems['sys-B0'].Demo[0].state = 'Stopped';\n            },\n\n            $volume: (value: number) => {\n                this.volume = value;\n                if (this.volume > 100) {\n                    this.volume = 100;\n                } else if (this.volume < 0) {\n                    this.volume = 0;\n                }\n            },\n\n            $mute: (state: boolean) => {\n                this.mute = state;\n            },\n\n            $state: (status: string) => {\n                this.state = status;\n            }\n        }\n    ]\n};\n\nsetTimeout(() => initMessages(), 500);\n\nfunction initMessages() {\n    if (win.backend && win.backend.model.user) {\n        const messages = [\n            'Testing',\n            'Response to Testing',\n            `Hello I'm ${win.backend.model.user.name}`,\n            `Hello ${win.backend.model.user.name}, this is the concierge`,\n            'Can I book a room for tomorrow at 9:30am?',\n            'Sure, how does Activity Space 31.04 sound?',\n            'That\\'s exactly what I\\'m looking for, thanks',\n            'Alright, you now have a booking for Activity Space 31.04 at 9:30am tomorrow.'\n        ];\n        const time = dayjs()\n            .add(-messages.length * 30, 'm')\n            .startOf('s');\n        let index = 0;\n        for (const msg of messages) {\n            win.control.systems['sys-B0'].Slack[0].threads.local.push({\n                text: msg,\n                username: index % 2 === 0 ? win.backend.model.user.name : '',\n                ts: time.valueOf()\n            });\n            index++;\n            time.add(30, 'm');\n        }\n    } else {\n        setTimeout(() => initMessages(), 500);\n    }\n}\n\nwin.systemData['sys-B0'] = win.control.systems['sys-B0'];\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as dayjs from 'dayjs';\n\n@Pipe({\n    name: 'dateFrom'\n})\nexport class DateFromPipe implements PipeTransform {\n    public transform(value: number): string {\n        const now = dayjs();\n        const date = dayjs(value);\n        let diff = now.diff(date, 'm');\n        const direction = diff < 0;\n        diff = Math.abs(diff);\n        if (diff < 1) { // Less than a minute\n            return direction ? 'In less than a minute' : 'Less than a minute ago';\n        } else if (diff === 1) { // 1 minute\n            return direction ? 'In about 1 minute' : 'About a minute ago';\n        } else if (diff < 60) { // Minutes\n            return direction ? `In ${diff} minutes` : `${diff} minutes ago`;\n        } else if (diff < 24 * 60) { // Hours\n            const hours = Math.floor(diff / 60);\n            return direction\n                ? `In ${hours} hour${hours === 1 ? '' : 's'}`\n                : `${hours} hour${hours === 1 ? '' : 's'} ago`;\n        } else if (diff < 30 * 24 * 60) { // Days\n            const days = Math.floor(diff / (24 * 60));\n            return direction\n                ? `In ${days} day${days === 1 ? '' : 's'}`\n                : `${days} day${days === 1 ? '' : 's'} ago`;\n        } else if (diff < 365 * 24 * 60) { // Months\n            const months = Math.floor(diff / (30 * 24 * 60));\n            return direction\n                ? `In ${months} month${months === 1 ? '' : 's'}`\n                : `${months} month${months === 1 ? '' : 's'} ago`;\n        } else if (diff >= 365 * 24 * 60) { // Years\n            const years = Math.floor(diff / (365 * 24 * 60));\n            return direction\n                ? `In ${years} year${years === 1 ? '' : 's'}`\n                : `${years} year${years === 1 ? '' : 's'} ago`;\n        }\n        return 'Just now';\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'driverFormat'\n})\nexport class DriverFormatPipe implements PipeTransform {\n    public transform(format: string): string {\n        if (typeof format !== 'string') return '';\n        if ((format || '').indexOf('/') >= 0) {\n            const parts = format.split('/');\n            parts.splice(0, 1);\n            return `<div class=\"formatted-driver-name\">${parts\n                .map(i => `<div class=\"name-part\">${i}</div>`)\n                .join(\n                    '<div class=\"icon\"><i class=\"material-icons\">keyboard_arrow_right</i></div>'\n                )}</div>`;\n        }\n        return format || '';\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'formatList'\n})\nexport class FormatListPipe implements PipeTransform {\n    public transform(value: string[]): any {\n        return value.join('\\n');\n    }\n}\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { RouterModule } from '@angular/router';\n\nimport { ASpinnerModule } from '@acaprojects/ngx-spinners';\nimport { APipesModule } from '@acaprojects/ngx-pipes';\nimport { ACustomEventsModule } from '@acaprojects/ngx-custom-events';\nimport { ComposerModule } from '@placeos/composer';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n// import { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { CdkTableModule } from '@angular/cdk/table';\n\nimport { BaseDirective } from './globals/base.directive';\nimport { ContextMenuComponent } from './components/context-menu/context-menu.component';\nimport { ItemDisplayComponent } from './components/item-display/item-display.component';\nimport { LOGIN_COMPONENTS } from './components/login';\nimport { SearchbarComponent } from './components/searchbar/searchbar.component';\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\nimport { BaseRootComponent } from './components/base-root.component';\nimport { IconComponent } from './components/icon/icon.component';\nimport { TerminalComponent } from './components/terminal/terminal.component';\n\nimport { SettingsFieldComponent } from './components/custom-fields/settings-field/settings-field.component';\nimport { ItemSearchFieldComponent } from './components/custom-fields/item-search-field/item-search-field.component';\nimport { DateFieldComponent } from './components/custom-fields/date-field/date-field.component';\nimport { TimeFieldComponent } from './components/custom-fields/time-field/time-field.component';\nimport { SystemExecFieldComponent } from './components/custom-fields/system-exec-field/system-exec-field.component';\n\nimport { SystemFormComponent } from './components/forms/system-form/system-form.component';\nimport { ModuleFormComponent } from './components/forms/module-form/module-form.component';\nimport { ZoneFormComponent } from './components/forms/zone-form/zone-form.component';\nimport { DriverFormComponent } from './components/forms/driver-form/driver-form.component';\nimport { UserFormComponent } from './components/forms/user-form/user-form.component';\nimport { DomainFormComponent } from './components/forms/domain-form/domain-form.component';\nimport { ApplicationFormComponent } from './components/forms/application-form/application-form.component';\nimport { RepositoryFormComponent } from './components/forms/repository-form/repository-form.component';\nimport { TriggerFormComponent } from './components/forms/trigger-form/trigger-form.component';\nimport { TriggerConditionFormComponent } from './components/forms/trigger-condition-form/trigger-condition-form.component';\nimport { TriggerConditionComparisonFormComponent } from './components/forms/trigger-condition-form/comparison-form/comparison-form.component';\nimport { TriggerConditionTimeFormComponent } from './components/forms/trigger-condition-form/time-form/time-form.component';\nimport { TriggerActionFormComponent } from './components/forms/trigger-action-form/trigger-action-form.component';\nimport { SystemTriggerFormComponent } from './components/forms/system-trigger-form/system-trigger-form.component';\n\nimport { DriverFormatPipe } from './pipes/driver-format.pipe';\nimport { DateFromPipe } from './pipes/date-from.pipe';\nimport { FormatListPipe } from './pipes/format-list.pipe';\nimport { OauthSourceFormComponent } from './components/forms/oauth-source-form/oauth-source-form.component';\nimport { LdapSourceFormComponent } from './components/forms/ldap-source-form/ldap-source-form.component';\nimport { SamlSourceFormComponent } from './components/forms/saml-source-form/saml-source-form.component';\nimport { ObjectListFieldComponent } from './components/custom-fields/object-list-field/object-list-field.component';\nimport { DebugOutputComponent } from './components/debug-output/debug-output.component';\nimport { SettingsFormComponent } from './components/forms/settings-form/settings-form.component';\nimport { ADatePickerModule } from '@acaprojects/ngx-date-picker';\nimport { BrokerFormComponent } from './components/forms/broker-form/broker-form.component';\n\nconst FORM_COMPONENTS: Type<any>[] = [\n    SystemFormComponent,\n    ModuleFormComponent,\n    ZoneFormComponent,\n    DriverFormComponent,\n    UserFormComponent,\n    DomainFormComponent,\n    ApplicationFormComponent,\n    TriggerFormComponent,\n    RepositoryFormComponent,\n    TriggerConditionFormComponent,\n    TriggerActionFormComponent,\n    SystemTriggerFormComponent,\n    OauthSourceFormComponent,\n    LdapSourceFormComponent,\n    SamlSourceFormComponent,\n    SettingsFormComponent,\n    BrokerFormComponent,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    BaseDirective,\n    BaseRootComponent,\n    ItemDisplayComponent,\n    SearchbarComponent,\n    SidebarComponent,\n    ...LOGIN_COMPONENTS,\n    IconComponent,\n    ...FORM_COMPONENTS,\n    TerminalComponent,\n    DebugOutputComponent,\n];\n\nconst PIPES: Type<any>[] = [\n    DriverFormatPipe,\n    DateFromPipe,\n    FormatListPipe,\n];\n\nconst ENTRY_COMPONENT: Type<any>[] = [\n    ItemSearchFieldComponent,\n    SettingsFieldComponent,\n    DateFieldComponent,\n    TimeFieldComponent,\n    ContextMenuComponent,\n    SystemExecFieldComponent,\n    ObjectListFieldComponent,\n];\n\nconst MATERIAL_MODULES: any[] = [\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    // MatProgressBarModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatTooltipModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatChipsModule,\n    MatTabsModule,\n    MatCardModule,\n    MatExpansionModule,\n    CdkTableModule\n];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS,\n        ...PIPES,\n        ...ENTRY_COMPONENT,\n        TriggerConditionComparisonFormComponent,\n        TriggerConditionTimeFormComponent,\n    ],\n    imports: [\n        CommonModule,\n        ASpinnerModule,\n        FormsModule,\n        APipesModule,\n        ReactiveFormsModule,\n        ACustomEventsModule,\n        ADatePickerModule,\n        ScrollingModule,\n        ComposerModule,\n        ...MATERIAL_MODULES,\n        RouterModule.forChild([])\n    ],\n    exports: [\n        ASpinnerModule,\n        APipesModule,\n        ACustomEventsModule,\n        ADatePickerModule,\n        ComposerModule,\n        ...COMPONENTS,\n        ...PIPES,\n        ...ENTRY_COMPONENT,\n        ...MATERIAL_MODULES\n    ]\n})\nexport class SharedContentModule {}\n","import { EngineModule } from '@placeos/ts-client';\n\nimport { HashMap } from './types.utilities';\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${str ? '&' : ''}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n\n/**\n * Calculate the index of the module\n * @param module_list List of modules in the parent system\n * @param module Module to work out index\n */\nexport function calculateModuleIndex(module_list: EngineModule[], module: EngineModule): number {\n    const driver = module.driver || { class_name: 'System' };\n    const module_class = module.custom_name || driver.class_name;\n    const modules_with_class = module_list.filter(mod => {\n        const d = mod.driver || { class_name: 'System' };\n        const mod_class = mod.custom_name || d.class_name;\n        return mod_class === module_class;\n    });\n    return Math.max(1, modules_with_class.findIndex(mod => mod.id === module.id) + 1);\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineApplication } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateApplicationFormFields(app: EngineApplication): FormDetails {\n    if (!app) {\n        throw Error('No domain application passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(app.name || '', [Validators.required]),\n        scopes: new FormControl(app.scopes || ''),\n        skip_authorization: new FormControl(app.skip_authorization || ''),\n        redirect_uri: new FormControl(app.redirect_uri || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    app.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { EngineOAuthSource, EngineLDAPSource, EngineSAMLSource } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\nimport { Validators, FormControl, FormGroup } from '@angular/forms';\n\n/**\n * Generate form controls for an OAuth authentication source\n * @param auth_source Auth source to apply changes to\n */\nexport function generateOAuthSourceForm(auth_source: EngineOAuthSource): FormDetails {\n    if (!auth_source) {\n        throw Error('No OAuth source passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(auth_source.name || '', [Validators.required]),\n        client_id: new FormControl(auth_source.client_id || ''),\n        client_secret: new FormControl(auth_source.client_secret || ''),\n        info_mappings: new FormControl(auth_source.info_mappings || {}),\n        site: new FormControl(auth_source.site || ''),\n        authorize_url: new FormControl(auth_source.authorize_url || ''),\n        token_method: new FormControl(auth_source.token_method || 'post'),\n        auth_scheme: new FormControl(auth_source.auth_scheme || 'request_body'),\n        token_url: new FormControl(auth_source.token_url || ''),\n        scope: new FormControl(auth_source.scope || ''),\n        raw_info_url: new FormControl(auth_source.raw_info_url || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    auth_source.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Generate form controls for an SAML authentication source\n * @param auth_source Auth source to apply changes to\n */\nexport function generateSAMLSourceForm(auth_source: EngineSAMLSource): FormDetails {\n    if (!auth_source) {\n        throw Error('No OAuth source passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(auth_source.name || '', [Validators.required]),\n        issuer: new FormControl(auth_source.issuer || '', [Validators.required]),\n        idp_sso_target_url: new FormControl(auth_source.issuer || '', [Validators.required]),\n        name_identifier_format: new FormControl(auth_source.name_identifier_format || '', [\n            Validators.required\n        ]),\n        assertion_consumer_service_url: new FormControl(\n            auth_source.assertion_consumer_service_url || '',\n            [Validators.required]\n        ),\n        request_attributes: new FormControl(auth_source.request_attributes || [], [\n            Validators.required\n        ]),\n        idp_sso_target_url_runtime_params: new FormControl(\n            auth_source.idp_sso_target_url_runtime_params || {}\n        ),\n        uid_attribute: new FormControl(auth_source.uid_attribute || ''),\n        idp_cert: new FormControl(auth_source.idp_cert || ''),\n        idp_cert_fingerprint: new FormControl(auth_source.idp_cert_fingerprint || ''),\n        attribute_service_name: new FormControl(auth_source.attribute_service_name || ''),\n        attribute_statements: new FormControl(auth_source.attribute_statements || {}),\n        idp_slo_target_url: new FormControl(auth_source.idp_slo_target_url || ''),\n        slo_default_relay_state: new FormControl(auth_source.slo_default_relay_state || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    auth_source.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Generate form controls for an LDAP authentication source\n * @param auth_source Auth source to apply changes to\n */\nexport function generateLDAPSourceForm(auth_source: EngineLDAPSource): FormDetails {\n    if (!auth_source) {\n        throw Error('No OAuth source passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(auth_source.name || '', [Validators.required]),\n        host: new FormControl(auth_source.host || '', [Validators.required]),\n        port: new FormControl(auth_source.port || '', [Validators.min(1), Validators.max(65535)]),\n        auth_method: new FormControl(auth_source.auth_method || 'plain'),\n        uid: new FormControl(auth_source.uid || ''),\n        base: new FormControl(auth_source.base || '', [Validators.required]),\n        bind_dn: new FormControl(auth_source.bind_dn || ''),\n        password: new FormControl(auth_source.password || ''),\n        filter: new FormControl(auth_source.filter || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    auth_source.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PlaceMQTTBroker, AuthType } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateBrokerFormFields(broker: PlaceMQTTBroker): FormDetails {\n    if (!broker) {\n        throw Error('No MQTT Broker passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(broker.name || '', [Validators.required]),\n        description: new FormControl(broker.description),\n        auth_type: new FormControl(broker.auth_type),\n        host: new FormControl(broker.host, [Validators.required]),\n        port: new FormControl(broker.port, [Validators.required]),\n        tls: new FormControl(broker.tls),\n        username: new FormControl(\n            broker.username,\n            broker.auth_type === AuthType.UserPassword ? [Validators.required] : []\n        ),\n        password: new FormControl(\n            broker.password,\n            broker.auth_type === AuthType.UserPassword ? [Validators.required] : []\n        ),\n        certificate: new FormControl(\n            broker.certificate,\n            broker.auth_type === AuthType.Certificate ? [Validators.required] : []\n        ),\n        secret: new FormControl(broker.secret),\n        filters: new FormControl(broker.filters),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe((value) =>\n                    broker.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    subscriptions.push(\n        fields.auth_type.valueChanges.subscribe((type) => {\n            switch (type) {\n                case AuthType.Certificate:\n                    fields.username.setValidators([]);\n                    fields.password.setValidators([]);\n                    fields.certificate.setValidators([Validators.required]);\n                case AuthType.UserPassword:\n                    fields.username.setValidators([Validators.required]);\n                    fields.password.setValidators([Validators.required]);\n                    fields.certificate.setValidators([]);\n                default:\n                    fields.username.setValidators([]);\n                    fields.password.setValidators([]);\n                    fields.certificate.setValidators([]);\n            }\n        })\n    );\n    return {\n        form: new FormGroup(fields),\n        subscriptions,\n    };\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineDomain } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateDomainFormFields(authority: EngineDomain): FormDetails {\n    if (!authority) {\n        throw Error('No User passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(authority.name || '', [Validators.required]),\n        dom: new FormControl(authority.dom || '', [Validators.required]),\n        login_url: new FormControl(authority.login_url || ''),\n        logout_url: new FormControl(authority.logout_url || ''),\n        config: new FormControl(authority.config || ''),\n        internals: new FormControl(authority.internals || ''),\n        description: new FormControl(authority.description || ''),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    authority.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineDriver, EngineRepository, EngineDriverRole } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport interface DriverInitData {\n    repo: EngineRepository;\n    driver: EngineDriver;\n}\n\nexport function generateDriverFormFields(driver: EngineDriver): FormDetails {\n    if (!driver) {\n        throw Error('No Driver passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(driver.id || ''),\n        repository_id: new FormControl(driver.repository_id),\n        file_name: new FormControl(driver.file_name),\n        commit: new FormControl(driver.commit),\n        name: new FormControl(driver.name || '', [Validators.required]),\n        role: new FormControl(driver.role || EngineDriverRole.Logic),\n        module_name: new FormControl(driver.module_name || '', [Validators.required]),\n        default_uri: new FormControl(driver.default_uri || ''),\n        default_port: new FormControl(driver.default_port || 1, [Validators.min(1), Validators.max(65535)]),\n        class_name: new FormControl(driver.class_name || ''),\n        description: new FormControl(driver.description || ''),\n        ignore_connected: new FormControl(driver.ignore_connected || false),\n        settings: new FormControl('')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    driver.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    if (driver.id) {\n        delete fields.class_name;\n        delete fields.role;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { EngineModule, EngineSystem, EngineDriver, EncryptionLevel, EngineDriverRole } from '@placeos/ts-client';\n\nimport { FormDetails, validateYAML } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\nimport { validateURI, validateIpAddress } from '../validation.utilities';\n\nexport function generateModuleFormFields(module: EngineModule): FormDetails {\n    if (!module) {\n        throw Error('No Module passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        ip: new FormControl(module.ip || '', [validateIpAddress]),\n        port: new FormControl(module.port || '', [Validators.min(1), Validators.max(65535)]),\n        tls: new FormControl(module.tls || false),\n        udp: new FormControl(module.udp || false),\n        makebreak: new FormControl(module.makebreak || false),\n        ignore_connected: new FormControl(module.ignore_connected || false),\n        uri: new FormControl(module.uri || '', [validateURI]),\n        notes: new FormControl(module.notes || ''),\n        name: new FormControl(module.name || ''),\n        custom_name: new FormControl(module.custom_name || ''),\n        system: new FormControl(module.system),\n        driver: new FormControl('', [Validators.required])\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0 && key.indexOf('driver') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>{\n                    console.log('Change:', key, value, fields[key]);\n                    module.storePendingChange(key as any, value);\n                })\n            );\n        }\n    }\n    if (!module.id) {\n        subscriptions.push(\n            fields.system.valueChanges.subscribe((value: EngineSystem) =>\n                module.storePendingChange('control_system_id', value.id)\n            )\n        );\n        subscriptions.push(\n            fields.driver.valueChanges.subscribe((value: EngineDriver) =>{\n                module.storePendingChange('driver_id', value.id);\n                fields.name.setValue(value.name || value.module_name);\n                fields.uri.setValue(value.default_uri);\n                fields.port.setValue(value.default_port || 1)\n                resetModuleFormValidators(fields);\n                switch (value.role) {\n                    case EngineDriverRole.Websocket:\n                        fields.uri.setValidators([Validators.required, validateURI]);\n                        fields.udp.setValue(false);\n                        break;\n                    case EngineDriverRole.SSH:\n                        fields.ip.setValidators([validateIpAddress, Validators.required]);\n                        fields.port.setValidators([Validators.min(1), Validators.max(65535), Validators.required]);\n                        break;\n                    case EngineDriverRole.Logic:\n                        fields.system.setValidators([Validators.required])\n                        break;\n                }\n            })\n        );\n    } else {\n        delete fields.system;\n        delete fields.driver;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\nexport function resetModuleFormValidators(fields: HashMap<FormControl>) {\n    fields.ip.setValidators([validateIpAddress]),\n    fields.port.setValidators([Validators.min(1), Validators.max(65535)]),\n    fields.uri.setValidators([Validators.pattern('\\w+:(\\/?\\/?)[^\\s]+')]),\n    fields.settings_string.setValidators([validateYAML]),\n    fields.system.setValidators([]),\n    fields.driver.setValidators([Validators.required])\n}\n","\nimport { Validators, FormControl, FormGroup } from '@angular/forms';\nimport { HashMap, EngineRepository, EngineRepositoryType } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\n\n/**\n * Generate angular form controls\n * @param repository Trigger to generate the form controls for\n */\nexport function generateRepositoryFormFields(repository: EngineRepository): FormDetails {\n    if (!repository) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(repository.id || ''),\n        commit_hash: new FormControl(repository.commit_hash || ''),\n        name: new FormControl(repository.name || '', [Validators.required]),\n        folder_name: new FormControl(repository.folder_name || '', [Validators.required]),\n        description: new FormControl(repository.description || ''),\n        uri: new FormControl(repository.uri || '', [Validators.required]),\n        repo_type: new FormControl(repository.repo_type || EngineRepositoryType.Driver),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    repository.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    if (!repository.id) {\n        repository.storePendingChange('commit_hash', 'head');\n    } else {\n        delete fields.repo_type;\n        delete fields.folder_name;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { EngineSystem, EngineZone, EncryptionLevel } from '@placeos/ts-client';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { HashMap } from '../types.utilities';\n\nimport * as yaml from 'js-yaml';\n\nexport interface FormDetails {\n    form: FormGroup;\n    subscriptions: Subscription[];\n}\n\nexport function validateYAML(control: AbstractControl) {\n    const value = control.value || '';\n    let message = '';\n    try {\n        yaml.safeLoad(value, { strict: true });\n    } catch (e) {\n        console.error(e);\n        message = e.message;\n    }\n    return message ? { yaml: message } : null;\n}\n\nexport const URL_PATTERN =\n    '^(?:(?:(?:https?|ftp):)?//)(?:S+(?::S*)?@)?(?:(?!(?:10|127)(?:.d{1,3}){3})(?!(?:169.254|192.168)(?:.d{1,3}){2})(?!172.(?:1[6-9]|2d|3[0-1])(?:.d{1,3}){2})(?:[1-9]d?|1dd|2[01]d|22[0-3])(?:.(?:1?d{1,2}|2[0-4]d|25[0-5])){2}(?:.(?:[1-9]d?|1dd|2[0-4]d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:.(?:[a-z\\u00a1-\\uffff]{2,})))(?::d{2,5})?(?:[/?#]S*)?$';\n\nexport function generateSystemsFormFields(system: EngineSystem): FormDetails {\n    if (!system) {\n        throw Error('No System passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(system.name || '', [Validators.required]),\n        email: new FormControl(system.email || '', [Validators.email]),\n        support_url: new FormControl(system.support_url || '', [Validators.pattern(URL_PATTERN)]),\n        installed_ui_devices: new FormControl(system.installed_ui_devices || 0, [\n            Validators.pattern('[0-9]*')\n        ]),\n        feature_list: new FormControl(system.features ? system.features.split(' ') : []),\n        capacity: new FormControl(system.capacity || 0, [Validators.pattern('[0-9]*')]),\n        bookable: new FormControl(system.bookable || false),\n        description: new FormControl(system.description || ''),\n        map_id: new FormControl(system.map_id || ''),\n        zone: new FormControl('', [Validators.required])\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    system.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    if (!system.id) {\n        subscriptions.push(\n            fields.zone.valueChanges.subscribe((value: EngineZone) =>\n                system.storePendingChange('zones', [value.id])\n            )\n        );\n    } else {\n        delete fields.zone;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { Validators, FormControl, FormGroup, AbstractControl } from '@angular/forms';\nimport {\n    EngineTrigger,\n    HashMap,\n    TriggerStatusVariable,\n    TriggerConditionOperator,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerAtTimeCondition,\n    TriggerCronTimeCondition,\n    TriggerFunction,\n    TriggerMailer\n} from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\n\nimport * as dayjs from 'dayjs';\n\n/**\n * Generate angular form controls\n * @param trigger Trigger to generate the form controls for\n */\nexport function generateTriggerFormFields(trigger: EngineTrigger): FormDetails {\n    if (!trigger) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(trigger.name || '', [Validators.required]),\n        description: new FormControl(trigger.description || ''),\n        enable_webhook: new FormControl(trigger.enable_webhook || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    trigger.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n/**\n * Generate angular form controls\n * @param trigger Trigger to generate the form controls for\n */\nexport function generateTriggerSettingsFormFields(trigger: EngineTrigger): FormDetails {\n    if (!trigger) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(trigger.name || ''),\n        triggered: new FormControl(+trigger.activated_count > 0),\n        enabled: new FormControl(!!trigger.enabled),\n        important: new FormControl(!!trigger.important)\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    trigger.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Validate a side of the comparison pair\n * @param control Control holding the comparison\n */\nexport function validateCompare(control: AbstractControl) {\n    const form = control.parent;\n    if (\n        form &&\n        form instanceof FormGroup &&\n        form.controls.condition_type &&\n        form.controls.condition_type.value === 'compare'\n    ) {\n        if (control.value instanceof Object) {\n            const value: TriggerStatusVariable = control.value;\n            return !value.mod ? { module: true } : !value.status ? { status: true } : null;\n        } else {\n            return !control.value ? { required: true } : null;\n        }\n    }\n    return null;\n}\n\n/**\n * Generate form controls for creating a trigger condition\n */\nexport function generateTriggerConditionForm(\n    condition: TriggerComparison | TriggerTimeCondition = {} as any\n) {\n    const type = (condition as TriggerTimeCondition).type ? 'time' : 'compare';\n    const left =\n        typeof (condition as TriggerComparison).left === 'object'\n            ? { ...((condition as TriggerComparison).left as any) }\n            : (condition as TriggerComparison).left;\n    const right =\n        typeof (condition as TriggerComparison).right === 'object'\n            ? { ...((condition as TriggerComparison).right as any) }\n            : (condition as TriggerComparison).right;\n    const fields: HashMap<FormControl> = {\n        condition_type: new FormControl(type),\n        left: new FormControl({ ...(left || {}) }, [validateCompare]),\n        operator: new FormControl(\n            (condition as TriggerComparison).operator || TriggerConditionOperator.EQ\n        ),\n        right: new FormControl(right || undefined, [validateCompare]),\n        time_type: new FormControl((condition as TriggerTimeCondition).type || 'at'),\n        time: new FormControl(\n            (+(condition as TriggerAtTimeCondition).time || 0) * 1000 || dayjs().valueOf()\n        ),\n        cron: new FormControl((condition as TriggerCronTimeCondition).cron || undefined)\n    };\n    const subscriptions = [];\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Validate form control storing a list of emails\n * @param control Form control to valid\n */\nexport function validateEmailList(control: AbstractControl) {\n    if (control.value && control.value instanceof Array) {\n        const value: string[] = control.value;\n        return value.reduce(\n            (valid, email) => valid && !Validators.email({ value: email } as any),\n            true\n        )\n            ? null\n            : { email: true };\n    }\n    return null;\n}\n\n/**\n * Generate form controls for creating a trigger action\n */\nexport function generateTriggerActionForm(action: TriggerFunction | TriggerMailer = {} as any) {\n    const type = action && (action as TriggerMailer).emails ? 'email' : 'function';\n    const fields: HashMap<FormControl> = {\n        action_type: new FormControl(type),\n        emails: new FormControl((action as TriggerMailer).emails || [], [\n            Validators.min(1),\n            Validators.required,\n            validateEmailList\n        ]),\n        content: new FormControl((action as TriggerMailer).emails || '', [Validators.required]),\n        method_call: new FormControl((action as TriggerFunction) || null, [])\n    };\n    const subscriptions = [];\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { EngineUser } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function validateMatch(name: string) {\n    return (control: AbstractControl) => {\n        const group = control.parent;\n        if (group) {\n            const value = group.controls[name] ? group.controls[name].value : '';\n            return value !== control.value ? { match: true } : null;\n        }\n        return null;\n    }\n}\n\nexport function generateUserFormFields(user: EngineUser): FormDetails {\n    if (!user) {\n        throw Error('No User passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || '', [Validators.required]),\n        email: new FormControl(user.email || '', [Validators.email, Validators.required]),\n        staff_id: new FormControl(user.staff_id || ''),\n        support: new FormControl(user.support || false),\n        sys_admin: new FormControl(user.sys_admin || false),\n        password: new FormControl('', !user.id ? [Validators.required] : undefined),\n        confirm_password: new FormControl('', [validateMatch('password')]),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    user.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    subscriptions.push(fields.password.valueChanges.subscribe(() => {\n        fields.confirm_password.updateValueAndValidity();\n    }));\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineZone } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateZoneFormFields(zone: EngineZone): FormDetails {\n    if (!zone) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(zone.id),\n        name: new FormControl(zone.name || '', [Validators.required]),\n        tag_list: new FormControl(zone.tags ? zone.tags.split(',') : []),\n        description: new FormControl(zone.description || ''),\n        parent_zone: new FormControl(null),\n        parent_id: new FormControl(zone.parent_id),\n        location: new FormControl(zone.location),\n        display_name: new FormControl(zone.display_name),\n        code: new FormControl(zone.display_name),\n        type: new FormControl(zone.display_name),\n        count: new FormControl(zone.count),\n        capacity: new FormControl(zone.capacity),\n        map_id: new FormControl(zone.map_id)\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && zone.hasOwnProperty(key) && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    {\n                        zone.storePendingChange(key as any, value)}\n                )\n            );\n        }\n    }\n    subscriptions.push(\n        fields.tag_list.valueChanges.subscribe((value: string[]) =>\n            zone.storePendingChange('tags', value.join(','))\n        )\n    );\n    subscriptions.push(\n        fields.parent_zone.valueChanges.subscribe((zone: EngineZone) =>\n            {\n                console.log('Zone:', zone);\n                fields.parent_id.setValue(zone.id);\n            }\n        )\n    );\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { HashMap, Point } from './types.utilities';\n\nimport * as dayjs from 'dayjs';\nimport * as merge from 'deepmerge';\nimport * as yaml from 'js-yaml';\n\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map[key]) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Checks whether the platform is a mobile device.\n */\nexport function isMobileModule(): boolean {\n    const r = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n    return !!navigator.userAgent.match(r);\n}\n\n/**\n * Checks whether the browser is Mobile Safari.\n */\nexport function isMobileSafari(): boolean {\n    const agent = navigator.userAgent;\n    return !!(\n        agent.match(/iPhone|iPad|iPod/) &&\n        agent.match(/AppleWebKit/) &&\n        !agent.match('CriOS')\n    );\n}\n\n/**\n * Checks whether the browser is Android Chrome.\n */\nexport function isAndroidChrome(): boolean {\n    const agent = navigator.userAgent;\n    return !!(agent.match(/Android/) && agent.match(/Chrome/));\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\n/**\n * Generate string representation of a number with zeros padding the length\n * @param value Number to pad with zeros\n * @param length Length of the resulting string\n */\nexport function padZero(value: number, length: number): string {\n    let str = value.toString();\n    while (str.length < length) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique(array: any[], key: string = '') {\n    return array.filter((element, index) =>\n        (key\n            ? array.findIndex(i => i[key] === element[key])\n            : array.findIndex(item => item === element)) === index\n    );\n}\n\n/**\n * Convert duration to human readable string\n * @param duration Duration in minutes\n * @param short Whether to use short form of duration words e.g. hours as h\n */\nexport function humaniseDuration(duration: number, short: boolean = false) {\n    if (!duration || duration < 0) {\n        return '';\n    }\n    const h = Math.floor(duration / 60);\n    let d = `${h >= 1 ? h + (short ? 'h' : ' hour' + (h === 1 ? '' : 's')) : ''}`;\n    if (duration % 60 !== 0) {\n        if (d) {\n            d += short ? ' ' : ', ';\n        }\n        const m = duration % 60;\n        d += `${m >= 1 ? m + (short ? 'm' : ' minute' + (m === 1 ? '' : 's')) : ''}`;\n    }\n    return d;\n}\n\n/**\n * Get a filtered list of items\n * @param filter Value to filter on\n * @param items List of results to filter\n * @param fields Fields to check for matches on each item\n */\nexport function filterList<T = HashMap>(\n    filter: string,\n    items?: T[],\n    fields: string[] = ['id']\n): T[] {\n    let results: any[];\n    // Tokenise filter string\n    const filters = (filter || '').toLowerCase().split(' ');\n    const list = {};\n    for (const f of filters) {\n        if (f) {\n            if (!list[f]) {\n                list[f] = 0;\n            }\n            list[f]++;\n        }\n    }\n    // Group similar tokens\n    const parts = [];\n    for (const f in list) {\n        if (list.hasOwnProperty(f)) {\n            parts.push({ word: f, count: list[f], regex: new RegExp(f, 'gi') });\n        }\n    }\n    parts.sort((a, b) => b.word.length - a.word.length || a.word.localeCompare(b.word));\n    const item_list = JSON.parse(JSON.stringify(items || []));\n    if (filter) {\n        results = item_list.filter(item => {\n            let match_count = 0;\n            item.match_index = 65535;\n            item.match = '';\n            const field_list = {};\n            // Initialise field match variables\n            for (const f of fields) {\n                field_list[f] = {\n                    value: (item[f] || '').toLowerCase(),\n                    index: 65536,\n                    matched: 0\n                };\n            }\n            // Search for matches with the tokenised filter string\n            for (const i of parts) {\n                if (i.word) {\n                    // Check fields for matches\n                    for (const f of fields) {\n                        const field = field_list[f];\n                        const index = field.value.indexOf(i.word);\n                        field.index = index < field.index ? index : field.index;\n                        field.matches = (field.value.match(i.regex) || []).length;\n                        field.value = field.value.replace(i.regex, ' ');\n                    }\n                    // Update token match count\n                    for (const f of fields) {\n                        const field = field_list[f];\n                        if (field.matches >= i.count) {\n                            match_count++;\n                            // Update field matches\n                            let changed = 0;\n                            const tokens = (item[`match_${f}`] || item[f] || '').split(' ');\n                            for (const k of tokens) {\n                                if (changed >= i.count) {\n                                    break;\n                                }\n                                if (k.toLowerCase().indexOf(i.word) >= 0 && k.indexOf('`') < 0) {\n                                    tokens[tokens.indexOf(k)] = k.replace(i.regex, '`$&`');\n                                    changed++;\n                                }\n                            }\n                            item[`match_${f}`] = tokens.join(' ');\n                            break;\n                        }\n                    }\n                }\n            }\n            // Get field with the most relevent match\n            for (const f of fields) {\n                const field = field_list[f];\n                if (field.index < item.match_index && field.index >= 0) {\n                    item.match_index = field.index;\n                    item.match = f;\n                }\n            }\n            return item.match_index >= 0 && item.match && match_count >= parts.length;\n        });\n    } else {\n        results = item_list;\n    }\n    // Sort by order of relevence then name\n    results.sort((a, b) => {\n        const diff = a.match_index - b.match_index;\n        return diff === 0 ? a.name.localeCompare(b.name) : diff;\n    });\n    return results;\n}\n\n/**\n * Convert a match string from `filterList` to renderable HTML\n * @param str Match string to change\n */\nexport function matchToHighlight(str: string): string {\n    if (str) {\n        str = str.replace(/\\`[a-zA-Z0-9\\@\\.\\_]*\\`/g, '<span class=\"highlight\">$&</span>');\n        str = str.replace(/\\`/g, '');\n    }\n    return str;\n}\n\n/**\n * Convert time string to ms from UTC epoch for today\n * @param time Time string in the format `HH:mm`\n */\nexport function timeToDate(time: string): number {\n    const parts = (time || '').split(':');\n    const date = dayjs()\n        .hour(+parts[0])\n        .minute(+parts[1])\n        .startOf('m');\n    return date.valueOf();\n}\n\n/**\n * Merge two YAML objects together\n * @param dest Destination object to merge\n * @param source Source object to merge\n */\nexport function mergeYAMLSettings(dest: string = '', source: string = ''): string {\n    const dest_obj = yaml.safeLoad(dest) || {};\n    const source_obj = yaml.safeLoad(source) || {};\n    const merged_obj = merge(dest_obj, source_obj);\n    return yaml.safeDump(merged_obj, { indent: 4 });\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm A';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date.toLocaleTimeString();\n    return localeString.indexOf('AM') < 0 && localeString.indexOf('PM') < 0;\n}\n\n/**\n * Calculate the position counter for the given number e.g `1st`, `2nd`, `3rd`, `4th`...\n * @param num Number to caculate position for\n */\nexport function numberToPosition(num: number): string {\n    const mod_ten = num % 10;\n    if (num > 10 && num < 20) {\n        return `${num}th`;\n    } else if (mod_ten === 1) {\n        return `${num}st`;\n    } else if (mod_ten === 2) {\n        return `${num}nd`;\n    } else if (mod_ten === 3) {\n        return `${num}rd`;\n    }\n    return `${num}th`;\n}\n\n/**\n * Copy the given value to the OS Clipboard\n * @param value String to copy to the clipboard\n */\nexport function copyToClipboard(value: string) {\n    const el = document.createElement('textarea'); // Create a <textarea> element\n    el.value = value; // Set its value to the string that you want copied\n    el.setAttribute('readonly', ''); // Make it readonly to be tamper-proof\n    el.style.position = 'absolute';\n    el.style.left = '-9999px'; // Move outside the screen to make it invisible\n    document.body.appendChild(el); // Append the <textarea> element to the HTML document\n    // Check if there is any content selected previously\n    const selected =\n        document.getSelection().rangeCount > 0\n            ? document.getSelection().getRangeAt(0) // Store selection if found\n            : false; // Mark as false to know no selection existed before\n    // Select the <textarea> content\n    el.select();\n    // Copy - only works as a result of a user action (e.g. click events)\n    document.execCommand('copy');\n    document.body.removeChild(el); // Remove the <textarea> element\n    if (selected) {\n        // If a selection existed before copying\n        // Unselect everything on the HTML document\n        document.getSelection().removeAllRanges();\n        // Restore the original selection\n        document.getSelection().addRange(selected);\n    }\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, seperator: string = ',') {\n    const lines = csv.split('\\n');\n    let fields = lines.splice(0, 1)[0].split(seperator);\n    fields = fields.map(v => v.replace('\\r', ''));\n    const list: any[] = [];\n    for (const line of lines) {\n        let parts = line.split(seperator);\n        parts = parts.map(v => v.replace('\\r', ''));\n        /* istanbul ignore else */\n        if (parts.length >= fields.length) {\n            const item: any = {};\n            for (let i = 0; i <= parts.length; i++) {\n                let part = null;\n                part = parts[i];\n                /* istanbul ignore else */\n                if (part !== undefined) {\n                    item[(fields[i] || '').split(' ').join('_').toLowerCase()] = JSON.parse(part);\n\n                }\n            }\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[], ignore_keys: string[] = [], seperator: ',' | '\\t') {\n    /* istanbul ignore else */\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => ignore_keys.indexOf(key) < 0 && json[0].hasOwnProperty(key));\n        return `${valid_keys.join(seperator)}\\n${json\n            .map((item) => valid_keys.map((key) => JSON.stringify(item[key])).join(seperator))\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(contents));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\n/**\n * Grab point details from mouse or touch event\n * @param event Event to grab details from\n */\nexport function eventToPoint(event: MouseEvent | TouchEvent): Point {\n    if (!event) {\n        return { x: -1, y: -1 };\n    }\n    if (event instanceof MouseEvent) {\n        return { x: event.clientX, y: event.clientY };\n    } else {\n        return event.touches && event.touches.length > 0\n            ? { x: event.touches[0].clientX, y: event.touches[0].clientY }\n            : { x: -1, y: -1 };\n    }\n}\n","import { Validators, AbstractControl } from '@angular/forms';\n\nexport const validateIpAddress = ctrl =>\n    /^(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)$/g.test(\n        ctrl.value || '1.1.1.1'\n    )\n        ? null\n        : { pattern: true };\n\nexport const validateURI = Validators.pattern(\n    /^([a-z][a-z0-9+.-]+):(\\/\\/([^@]+@)?([a-z0-9.\\-_~]+)(:\\d+)?)?((?:[a-z0-9-._~]|%[a-f0-9]|[!$&'()*+,;=:@])+(?:\\/(?:[a-z0-9-._~]|%[a-f0-9]|[!$&'()*+,;=:@])*)*|(?:\\/(?:[a-z0-9-._~]|%[a-f0-9]|[!$&'()*+,;=:@])+)*)?(\\?(?:[a-z0-9-._~]|%[a-f0-9]|[!$&'()*+,;=:@]|[/?])+)?(\\#(?:[a-z0-9-._~]|%[a-f0-9]|[!$&'()*+,;=:@]|[/?])+)?$/gi\n);\n\nexport const validateURL = Validators.pattern(\n    /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g\n);\n\nexport function validateJSONString(control: AbstractControl) {\n    if (!control || !control.value) {\n        return null;\n    }\n    try {\n        const json = JSON.parse(control.value);\n    } catch (e) {\n        return { json: true };\n    }\n    return null;\n}\n","import {\n    Component,\n    OnChanges,\n    Input,\n    ViewChild,\n    ElementRef,\n    SimpleChanges,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport {\n    EngineResource,\n    EngineSystem,\n    EngineModule,\n    EngineZone,\n    HashMap\n} from '@placeos/ts-client';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\nimport { Subject, Observable, of } from 'rxjs';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'global-search',\n    templateUrl: './global-search.template.html',\n    styleUrls: ['./global-search.styles.scss'],\n    animations: [\n        trigger('listAnimation', [\n            transition('* => *', [\n                // each time the binding value changes\n                query(':enter', [\n                    style({ transform: 'translateY(100%)', opacity: 0 }),\n                    stagger(50, [\n                        animate('.2s', style({ transform: 'translateY(0%)', opacity: 1 }))\n                    ])\n                ])\n            ])\n        ])\n    ]\n})\nexport class GlobalSearchComponent extends BaseDirective implements OnChanges {\n    /** Search query string */\n    @Input() public search: string;\n    /** Search query string */\n    @Output() public searchChange = new EventEmitter<string>();\n    /** Minimum number of characters needed to start a server query */\n    @Input('minLength') public min_length = 2;\n    /** Mapping of item types to routes */\n    public route_map: any = {\n        system: 'Systems',\n        device: 'Modules',\n        user: 'Users',\n        trigger: 'Triggers',\n        zone: 'Zones'\n    };\n    /** Whether search data is being loaded */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Observable for the list of items from an API search */\n    public search_results$: Observable<EngineResource<any>[]>;\n    /** List of item */\n    public results: EngineResource<any>[];\n    /** Current page offset to get the next list of items */\n    public offset = 0;\n\n    /** Subject holding the value of the search */\n    private search$ = new Subject<string>();\n\n    @ViewChild('item_list', { static: true }) private list_el: ElementRef;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap(query_string => {\n                this.loading = true;\n                this.offset = 20;\n                return !this.min_length || query_string.length >= this.min_length\n                    ? this.queryEndpoints(query_string)\n                    : Promise.resolve([]);\n            }),\n            catchError(() => of([])),\n            map((list: EngineResource<any>[][]) => {\n                this.loading = false;\n                return [].concat.apply([], list);\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe(list => {\n                this.results = list;\n                this.results.forEach((item: HashMap) => (item.type = this.itemType(item as any)));\n            })\n        );\n        this.subscription(\n            'navigate_end',\n            this._router.events.subscribe(event => {\n                if (event instanceof NavigationEnd) {\n                    this.afterNavigate();\n                }\n            })\n        );\n    }\n\n    public ngOnChanges(change: SimpleChanges): void {\n        if (change.search) {\n            this.timeout('search', () => this.search$.next(this.search), 100);\n        }\n    }\n\n    /**\n     * Load the next page of items for each endpoint\n     */\n    public loadMoreItems() {\n        this.loading = true;\n        this.queryEndpoints(this.search, this.offset).then(\n            (results_list: EngineResource<any>[][]) => {\n                for (const list of results_list) {\n                    this.results = unique(this.results.concat(list), 'id');\n                }\n                this.results.forEach((item: HashMap) => (item.type = this.itemType(item as any)));\n                this.offset += 20;\n                this.loading = false;\n                this.timeout('load_more', () => this.atBottom(), 2000);\n            }\n        );\n    }\n\n    /**\n     * Get the type of item\n     * @param item Item the get the type of\n     */\n    public itemType(item: EngineResource<any>): 'systems' | 'modules' | 'zones' {\n        if (item instanceof EngineSystem) return 'systems';\n        if (item instanceof EngineModule) return 'modules';\n        if (item instanceof EngineZone) return 'zones';\n        return 'zones';\n    }\n\n    /**\n     * Open the modal to edit item\n     * @param item Item to edit\n     */\n    public edit(item: EngineResource<any>) {\n        if (item) {\n            this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item,\n                    service: (item as any)._service\n                }\n            });\n        }\n    }\n\n    /**\n     * Handle navigation events while open\n     */\n    public afterNavigate() {\n        this.search = '';\n        this.searchChange.emit(this.search);\n    }\n\n    /**\n     * Query the multiple API endpoints\n     * @param query_str Filter string\n     * @param offset Returned page offset\n     */\n    private queryEndpoints(query_str: string, offset: number = 0) {\n        return Promise.all([\n            this._service.Systems.query({ q: query_str || '', offset, cache: 60 * 1000 }),\n            this._service.Zones.query({ q: query_str || '', offset, cache: 60 * 1000 }),\n            this._service.Modules.query({ q: query_str || '', offset, cache: 60 * 1000 })\n        ]);\n    }\n\n    /**\n     * Check whether the user has scrolled to the bottom of the viewport\n     */\n    public atBottom() {\n        if (!this.list_el) {\n            return this.timeout('bottom', () => this.atBottom());\n        }\n        const el = this.list_el.nativeElement;\n        if (el && el.scrollHeight - el.scrollTop === el.clientHeight) {\n            this.loadMoreItems();\n        }\n    }\n}\n","<div class=\"container\" [class.dark-mode]=\"dark_mode\" #item_list [@listAnimation]=\"results ? results.length : 0\" (scroll)=\"atBottom()\">\n    <ng-container *ngIf=\"!loading\" >\n        <div class=\"item\" #list_item *ngFor=\"let item of (results || [])\" [title]=\"item.name\">\n            <a class=\"name\" [routerLink]=\"['/' + item.type, item.id]\">{{item.name}}</a>\n            <a class=\"details\" [routerLink]=\"['/' + item.type, item.id]\">\n                <div [class]=\"'chip ' + item.type\">{{item.type}}</div>\n                <div class=\"id\">{{item.id}}</div>\n            </a>\n            <div class=\"options\">\n                <button mat-icon-button (touchrelease)=\"edit(item)\">\n                    <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n                </button>\n                <a mat-icon-button [routerLink]=\"['/' + item.type, item.id]\">\n                    <app-icon [icon]=\"{ class: 'backoffice-eye' }\"></app-icon>\n                </a>\n            </div>\n        </div>\n    </ng-container>\n    <div class=\"info-block\" center *ngIf=\"loading\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"#F44336\"></a-spinner>\n        </div>\n        <div class=\"text\">Searching...</div>\n    </div>\n    <div class=\"info-block\" center *ngIf=\"!loading && (!results || results.length <= 0)\">\n        <div class=\"icon\">\n            <i class=\"backoffice-cross\"></i>\n        </div>\n        <div class=\"text\">No matches found</div>\n    </div>\n    <div class=\"more\" *ngIf=\"loading\">\n        <a-spinner double-circle-ring color=\"#F44336\"></a-spinner>\n    </div>\n</div>\n","\nimport { TopbarHeaderComponent } from './topbar-header/topbar-header.component';\nimport { SidebarMenuComponent } from './sidebar-menu/sidebar-menu.component';\nimport { GlobalSearchComponent } from './global-search/global-search.component';\n\nexport const SHELL_COMPONENTS: any[] = [\n    TopbarHeaderComponent,\n    SidebarMenuComponent,\n    GlobalSearchComponent\n];\n","import { Component, OnInit, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ComposerService } from '@placeos/composer';\nimport { first } from 'rxjs/operators';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationInternalLink } from 'src/app/shared/utilities/settings.interfaces';\n\n@Component({\n    selector: 'sidebar-menu',\n    templateUrl: './sidebar-menu.template.html',\n    styleUrls: ['./sidebar-menu.styles.scss']\n})\nexport class SidebarMenuComponent extends BaseDirective implements OnInit {\n    /** Whether the sidebar menu should be shown */\n    @Input() public show: boolean;\n    /** Emitter for changes to the sidebar show state */\n    @Output() public showChange = new EventEmitter<boolean>();\n    /** List of available menu items for the application */\n    public menu_items: ApplicationInternalLink[];\n    /** Route of the shown tooltip */\n    public tooltip: string;\n\n    constructor(\n        private _service: ApplicationService,\n        private _composer: ComposerService,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    public init() {\n        this.menu_items = this._service.setting('app.general.menu');\n        const user = this._service.Users.user.getValue();\n        /** Only allow metrics if a URL has be set */\n        if (!this._composer.auth.authority.metrics) {\n            this.menu_items = this.menu_items.filter(\n                item => item.route && item.route.indexOf('metrics') < 0\n            );\n            if (this._router.url.indexOf('metrics') >= 0) {\n                this._router.navigate([]);\n            }\n        }\n        /** Filter out items with insufficient permissions */\n        this.menu_items = this.menu_items.filter(\n            item => !item.needs_role || !!(user as any)[item.needs_role]\n        );\n        this.subscription(\n            'up',\n            this._service.Hotkeys.listen(['Control', 'Shift', 'ArrowUp'], () => this.changeSelected(-1))\n        );\n        this.subscription(\n            'down',\n            this._service.Hotkeys.listen(['Control', 'Shift', 'ArrowDown'], () => this.changeSelected(1))\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.show) {\n            this.clearTimeout('close');\n        }\n    }\n\n    /**\n     * Delayed close of the sidebar menu. Mobile Only\n     */\n    public close() {\n        this.timeout(\n            'close',\n            () => {\n                this.show = false;\n                this.showChange.emit(this.show);\n            },\n            100\n        );\n    }\n\n    /**\n     * Cancel delayed close\n     */\n    public cancelClose() {\n        this.timeout('cancel_close', () => this.clearTimeout('close'), 10);\n    }\n\n    private changeSelected(offset: number = 1) {\n        const index = this.menu_items.findIndex(item => this._router.url.indexOf(item.route) >= 0);\n        const new_index = index + offset;\n        if (this.menu_items[new_index]) {\n            this._router.navigate([this.menu_items[new_index].route]);\n        }\n    }\n}\n","<div\n    class=\"container\"\n    *ngIf=\"menu_items\"\n    [class.show]=\"show\"\n    (mouseleave)=\"tooltip = 'false'\"\n    (tapped)=\"cancelClose()\"\n    (window:click)=\"close()\"\n>\n    <ng-container *ngFor=\"let item of menu_items\">\n        <div class=\"item\" [title]=\"item.name\" [matTooltip]=\"item.name\" i18n-matTooltip matTooltipPosition=\"right\">\n            <a [routerLink]=\"[item.route]\" routerLinkActive=\"active\">\n                <app-icon [icon]=\"item?.icon\"></app-icon>\n                <div class=\"text\" *ngIf=\"!item?.hide_name\" i18n>\n                    { item.name, select, Systems { Systems } Modules { Modules } Zones { Zones }\n                    Drivers { Drivers } Repos { Repos } Triggers { Triggers } Users { Users }\n                    Domains { Domains } Admin { Admin } other { Other } }\n                </div>\n                <div class=\"bar\"></div>\n            </a>\n        </div>\n    </ng-container>\n</div>\n","import { Component, OnInit, EventEmitter, Output, Input, Type } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineDriver, EngineModule, EngineUser } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationLink, ApplicationIcon, ApplicationActionLink } from 'src/app/shared/utilities/settings.interfaces';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\nimport * as dayjs from 'dayjs';\nimport { BulkItemModalComponent } from 'src/app/overlays/bulk-item-modal/bulk-item-modal.component';\n\n@Component({\n    selector: 'topbar-header',\n    templateUrl: './topbar-header.template.html',\n    styleUrls: ['./topbar-header.styles.scss']\n})\nexport class TopbarHeaderComponent extends BaseDirective implements OnInit {\n    /** Whether the sidebar menu should be shown */\n    @Input('showMenu') public show_menu: boolean;\n    /** Emitter for changes to the sidebar menu show state */\n    @Output('showMenuChange') public show_menu_change = new EventEmitter<boolean>();\n    /** Current global search string */\n    @Input() public filter: string;\n    /** Emitter for changes to the search input */\n    @Output() public filterChange = new EventEmitter();\n    /** List of user actions */\n    public options: ApplicationLink[];\n    /** Whether user tooltip should be shown */\n    public show: boolean;\n    /** Whether the user wishes to bulk add items */\n    public bulk: boolean = false;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n    public set dark_mode(state: boolean) {\n        this._service.Users.dark_mode = state;\n    }\n\n    public get title() {\n        return document.title.split(' | ')[0];\n    }\n\n    public get is_fools_day(): boolean {\n        return dayjs().format('D MMM') === '1 Apr' && !localStorage.getItem('I\\'M NO FOOL!!!');\n    }\n\n    /** Application logo */\n    public get logo(): ApplicationIcon {\n        return this._service.setting('app.logo_light');\n    }\n\n    /** Whether global search is enabled */\n    public get has_search(): boolean {\n        return this._service.setting('app.general.global_search');\n    }\n\n    /** Whether global search is enabled */\n    public get languages(): { name: string, locale: string, icon: ApplicationIcon }[] {\n        return this._service.setting('app.languages') || [];\n    }\n\n    /** Active user */\n    public get user(): any {\n        return this._service.Users.user.getValue();\n    }\n\n    /** Current environment of the application */\n    public get env(): string {\n        return this._service.setting('env');\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {}\n\n    public notAFool() {\n        localStorage.setItem('I\\'M NO FOOL!!!', 'true');\n    }\n\n    public newSystem() {\n        this.newItem(new EngineSystem(), this._service.Systems, EngineSystem);\n    }\n\n    public newZone() {\n        this.newItem(new EngineZone(), this._service.Zones, EngineZone);\n    }\n\n    public newModule() {\n        this.newItem(new EngineModule(), this._service.Modules, EngineModule);\n    }\n\n    public newDriver() {\n        this.newItem(new EngineDriver(), this._service.Drivers, EngineDriver);\n    }\n\n    public newUser() {\n        this.newItem(new EngineUser(), this._service.Users, EngineUser);\n    }\n\n    /**\n     * Open the modal to create a new engine resource\n     */\n    protected newItem<T = any>(item: any, service: any, constr: Type<T>) {\n        if (this.bulk) {\n            this._dialog.open(BulkItemModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    constr,\n                    service\n                }\n            });\n        } else {\n            this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item,\n                    service\n                }\n            });\n        }\n    }\n\n    /** Toggle the show state of the sidebar menu */\n    public toggleMenu() {\n        this.show_menu = !this.show_menu;\n        this.show_menu_change.emit(this.show_menu);\n    }\n\n    /**\n     * Emit changes to the global search filter\n     */\n    public postFilter() {\n        this.filterChange.emit(this.filter);\n    }\n}\n","<div class=\"container\">\n    <div class=\"topbar\">\n        <button mat-icon-button class=\"mobile-only\" (tapped)=\"toggleMenu()\">\n            <app-icon [icon]=\"{ class: 'backoffice-' + (show_menu ? 'cross' : 'menu') }\"></app-icon>\n        </button>\n        <div class=\"block\">\n            <div *ngIf=\"logo\" class=\"logo\">\n                <a [routerLink]=\"['/']\" *ngIf=\"!is_fools_day; else fools_day\">\n                    Place<span>OS</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"uat\" *ngIf=\"env !== 'prod'\">\n            {{ env }}\n        </div>\n        <div class=\"search\">\n            <searchbar\n                *ngIf=\"has_search\"\n                [(filter)]=\"filter\"\n                (filterChange)=\"postFilter()\"\n            ></searchbar>\n        </div>\n        <div class=\"block end\">\n            <button\n                mat-icon-button\n                class=\"more-actions not-mobile\"\n                [matMenuTriggerFor]=\"more_actions\"\n            >\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'more_vert' }\"></app-icon>\n            </button>\n            <!-- TODO Add user details display -->\n            <button mat-icon-button class=\"avatar\" [title]=\"user?.name\" [matMenuTriggerFor]=\"menu\">\n                <div\n                    class=\"img\"\n                    [style.background-image]=\"('url(' + (user?.image || 'https://www.gravatar.com/avatar/' + user?.gravatar_hash) + ')') | safe:'style'\"\n                ></div>\n            </button>\n        </div>\n    </div>\n</div>\n<mat-menu #menu=\"matMenu\">\n    <a mat-menu-item>\n        <div class=\"avatar\" [routerLink]=\"['/profile']\" routerLinkActive=\"active\">\n            <div\n                class=\"img\"\n                [style.background-image]=\"('url(' + (user?.image || 'https://www.gravatar.com/avatar/' + user?.gravatar_hash) + ')') | safe:'style'\"\n            ></div>\n        </div>\n        <div class=\"text\">{{user?.name || 'Guest'}}</div>\n    </a>\n    <a mat-menu-item [routerLink]=\"['/profile']\" routerLinkActive=\"active\">\n        <app-icon [icon]=\"{ class: 'backoffice-user' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@profileAction\">Profile</div>\n    </a>\n    <a mat-menu-item href=\"/logout\">\n        <app-icon [icon]=\"{ class: 'backoffice-log-out' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@logoutAction\">Logout</div>\n    </a>\n    <div class=\"item\" mat-menu-item role=\"menuitemcheckbox\">\n        <app-icon [icon]=\"{ class: 'backoffice-moon' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@darkMode\">Dark Mode</div>\n        <div class=\"toggle\" (click)=\"$event.stopPropagation()\">\n            <mat-slide-toggle [(ngModel)]=\"dark_mode\"></mat-slide-toggle>\n        </div>\n    </div>\n    <button mat-menu-item [matMenuTriggerFor]=\"language_menu\" *ngIf=\"languages.length > 1\">\n        <app-icon [icon]=\"{ class: 'backoffice-globe' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@languageAction\">Language</div>\n    </button>\n    <a mat-menu-item [href]=\"'https://github.com/PlaceOS/backoffice/issues/new?title=Issue on page ' + title\" target=\"_blank\">\n        <app-icon [icon]=\"{ class: 'backoffice-github' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@reportAction\">Report an Issue</div>\n    </a>\n</mat-menu>\n<mat-menu #more_actions=\"matMenu\">\n    <button mat-menu-item [matMenuTriggerFor]=\"type_menu\" (mouseenter)=\"bulk = false\" (click)=\"bulk = false\">\n        <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newAction\">New</div>\n    </button>\n    <button mat-menu-item [matMenuTriggerFor]=\"type_menu\" (mouseenter)=\"bulk = true\" (click)=\"bulk = true\">\n        <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@bulkNewAction\">Bulk New</div>\n    </button>\n</mat-menu>\n<mat-menu #type_menu=\"matMenu\">\n    <button mat-menu-item (tapped)=\"newSystem()\">\n        <app-icon [icon]=\"{ class: 'backoffice-documents' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newSystemAction\">{ bulk, select, true { Systems } false { System } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newZone()\">\n        <app-icon [icon]=\"{ class: 'backoffice-layers' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newZoneAction\">{ bulk, select, true { Zones } false { Zone } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newDriver()\">\n        <app-icon [icon]=\"{ class: 'backoffice-tools' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newDriverAction\">{ bulk, select, true { Drivers } false { Driver } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newModule()\">\n        <app-icon [icon]=\"{ class: 'backoffice-tablet' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newModuleAction\">{ bulk, select, true { Modules } false { Module } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newUser()\">\n        <app-icon [icon]=\"{ class: 'backoffice-users' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newUserAction\">{ bulk, select, true { Users } false { User } }</div>\n    </button>\n</mat-menu>\n<ng-template #fools_day>\n    <a href=\"http://www.nyan.cat/\" (click)=\"notAFool()\">April <span>Fools</span></a>\n</ng-template>\n<mat-menu #language_menu=\"matMenu\">\n    <a mat-menu-item [href]=\"'/backoffice/' + language.locale\" (tapped)=\"newSystem()\" *ngFor=\"let language of languages\">\n        <app-icon [icon]=\"language.icon\"></app-icon>\n        <div class=\"text\">{{ language.name }}</div>\n    </a>\n</mat-menu>\n","\nimport { AppShellComponent } from './shell.component';\nimport { SHELL_COMPONENTS } from './components';\n\nexport const APP_COMPONENTS: any[] = [\n    AppShellComponent,\n    ...SHELL_COMPONENTS\n];\n\nexport const APP_ENTRY_COMPONENTS: any[] = [\n\n];\n","/**\n * @Author: Alex Sorafumo\n * @Date:   17/10/2016 4:10 PM\n * @Email:  alex@yuion.net\n * @Filename: simple.component.ts\n * @Last modified by:   Alex Sorafumo\n * @Last modified time: 01/02/2017 1:37 PM\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport { EngineUser } from '@placeos/ts-client';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationLink } from '../shared/utilities/settings.interfaces';\nimport { ApplicationService } from '../services/app.service';\nimport { BaseDirective } from '../shared/globals/base.directive';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'app-shell',\n    styleUrls: ['./shell.styles.scss'],\n    templateUrl: './shell.template.html'\n})\nexport class AppShellComponent extends BaseDirective implements OnInit {\n    /** Whether the application is loading */\n    public loading: boolean;\n    /** Display string for the current year */\n    public year: string;\n    /** Currently active user */\n    public user: EngineUser;\n    /** Global search filter string */\n    public filter: string;\n    /** Whether sidebar menu should be shown */\n    public show: boolean;\n\n    /** Active environment */\n    public get env(): string {\n        return this._service.setting('env') || '';\n    }\n\n    /** List of core tiles to show on the sidebar menu */\n    public get tiles(): ApplicationLink[] {\n        return this._service.setting('app.tiles') || [];\n    }\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    public get is_fools_day(): boolean {\n        return dayjs().format('D MMM') === '1 Apr' && !localStorage.getItem('I\\'M NO FOOL!!!');\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.year = dayjs().format('YYYY');\n        this.subscription(\n            'user',\n            this._service.Users.user.subscribe(user => (this.user = user))\n        );\n        this.loading = true;\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    public init() {\n        this.loading = false;\n        this._service.Users.current().then(user => (this.user = user));\n    }\n\n    /** Navigate to the root page */\n    public home() {\n        this._service.navigate('');\n    }\n}\n","<div class=\"container\" [class.uat]=\"env !== 'prod'\" [class.dark-mode]=\"dark_mode\" [class.joke]=\"is_fools_day\" *ngIf=\"user && !loading\">\n    <div class=\"header\">\n        <topbar-header [(showMenu)]=\"show\" [(filter)]=\"filter\"></topbar-header>\n    </div>\n    <div class=\"body\" [class.filtered]=\"filter\">\n        <div class=\"sidebar-menu\">\n            <sidebar-menu [(show)]=\"show\"></sidebar-menu>\n        </div>\n        <div class=\"content\">\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n    <div class=\"search-results\" *ngIf=\"filter\">\n        <global-search [(search)]=\"filter\"></global-search>\n    </div>\n    <app-debug-output></app-debug-output>\n</div>\n<div class=\"container loader\" [class.uat]=\"env !== 'prod'\" *ngIf=\"loading\">\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"#fff\"></a-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@rootLoader\">Loading application data...</div>\n    </div>\n</div>\n<div class=\"container login\" [class.uat]=\"env !== 'prod'\" *ngIf=\"!user\">\n    <login-display></login-display>\n</div>\n","export const environment = {\n  production: true\n};\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"bf4198a\",\n    \"hash\": \"bf4198a\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"bf4198a\",\n    \"semverString\": null,\n    \"version\": \"2.0.2\",\n    \"core_version\": \"1.0.0\",\n    \"time\": 1591234921840\n};\n/* tslint:enable */\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}