{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/overlays/auth-source-modal/auth-source-modal.component.ts","webpack:///src/app/overlays/auth-source-modal/auth-source-modal.component.html","webpack:///src/app/overlays/bulk-item-modal/bulk-item-modal.component.ts","webpack:///src/app/overlays/bulk-item-modal/bulk-item-modal.component.html","webpack:///src/app/overlays/bulk-item-modal/csv-upload/csv-upload.component.ts","webpack:///src/app/overlays/bulk-item-modal/csv-upload/csv-upload.component.html","webpack:///src/app/overlays/bulk-item-modal/list/list.component.ts","webpack:///src/app/overlays/bulk-item-modal/list/list.component.html","webpack:///src/app/overlays/bulk-item-modal/match-fields/match-fields.component.ts","webpack:///src/app/overlays/bulk-item-modal/match-fields/match-fields.component.html","webpack:///src/app/overlays/bulk-item-modal/status-list/status-list.component.html","webpack:///src/app/overlays/bulk-item-modal/status-list/status-list.component.ts","webpack:///src/app/overlays/bulk-item-modal/template-data.ts","webpack:///src/app/overlays/changelog-modal/changelog-modal.component.ts","webpack:///src/app/overlays/changelog-modal/changelog-modal.template.html","webpack:///src/app/overlays/confirm-modal/confirm-modal.component.ts","webpack:///src/app/overlays/confirm-modal/confirm-modal.component.html","webpack:///src/app/overlays/duplicate-modal/duplicate-modal.component.html","webpack:///src/app/overlays/duplicate-modal/duplicate-modal.component.ts","webpack:///src/app/overlays/item-modal/item-modal.component.html","webpack:///src/app/overlays/item-modal/item-modal.component.ts","webpack:///src/app/overlays/metadata-details-modal/metadata-details-modal.component.ts","webpack:///src/app/overlays/metadata-details-modal/metadata-details-modal.component.html","webpack:///src/app/overlays/overlays.module.ts","webpack:///src/app/overlays/select-item-modal/select-item-modal.component.ts","webpack:///src/app/overlays/select-item-modal/select-item-modal.component.html","webpack:///src/app/overlays/system-log-modal/system-log-modal.component.ts","webpack:///src/app/overlays/system-log-modal/system-log-modal.component.html","webpack:///src/app/overlays/trigger-action-modal/trigger-action-modal.component.ts","webpack:///src/app/overlays/trigger-action-modal/trigger-action-modal.template.html","webpack:///src/app/overlays/trigger-condition-modal/trigger-condition-modal.component.ts","webpack:///src/app/overlays/trigger-condition-modal/trigger-condition-modal.template.html","webpack:///src/app/overlays/view-module-state/view-module-state.component.ts","webpack:///src/app/overlays/view-module-state/view-module-state.template.html","webpack:///src/app/overlays/view-response-modal/view-response-modal.component.ts","webpack:///src/app/overlays/view-response-modal/view-response-modal.component.html","webpack:///src/app/services/app.service.ts","webpack:///src/app/services/data/base.service.ts","webpack:///src/app/services/data/comments.service.ts","webpack:///src/app/services/data/logs.service.ts","webpack:///src/app/services/data/search.service.ts","webpack:///src/app/services/data/stats.service.ts","webpack:///src/app/services/data/system_logs.service.ts","webpack:///src/app/services/data/users.service.ts","webpack:///src/app/services/debug.service.ts","webpack:///src/app/services/hotkeys.service.ts","webpack:///src/app/services/sentry.service.ts","webpack:///src/app/services/settings.service.ts","webpack:///src/app/shared/components/base-root.component.ts","webpack:///src/app/shared/components/context-menu/context-menu.component.ts","webpack:///src/app/shared/components/context-menu/context-menu.template.html","webpack:///src/app/shared/components/custom-fields/date-field/date-field.component.ts","webpack:///src/app/shared/components/custom-fields/date-field/date-field.component.html","webpack:///src/app/shared/components/custom-fields/item-search-field/item-search-field.component.ts","webpack:///src/app/shared/components/custom-fields/item-search-field/item-search-field.component.html","webpack:///src/app/shared/components/custom-fields/object-list-field/object-list-field.component.ts","webpack:///src/app/shared/components/custom-fields/object-list-field/object-list-field.component.html","webpack:///src/app/shared/components/custom-fields/settings-field/settings-field.component.ts","webpack:///src/app/shared/components/custom-fields/settings-field/settings-field.component.html","webpack:///src/app/shared/components/custom-fields/system-exec-field/system-exec-field.component.ts","webpack:///src/app/shared/components/custom-fields/system-exec-field/system-exec-field.template.html","webpack:///src/app/shared/components/custom-fields/time-field/time-field.component.ts","webpack:///src/app/shared/components/custom-fields/time-field/time-field.component.html","webpack:///src/app/shared/components/debug-output/debug-output.component.ts","webpack:///src/app/shared/components/debug-output/debug-output.component.html","webpack:///src/app/shared/components/forms/application-form/application-form.component.ts","webpack:///src/app/shared/components/forms/application-form/application-form.component.html","webpack:///src/app/shared/components/forms/broker-form/broker-form.component.ts","webpack:///src/app/shared/components/forms/broker-form/broker-form.component.html","webpack:///src/app/shared/components/forms/domain-form/domain-form.component.ts","webpack:///src/app/shared/components/forms/domain-form/domain-form.component.html","webpack:///src/app/shared/components/forms/driver-form/driver-form.component.html","webpack:///src/app/shared/components/forms/driver-form/driver-form.component.ts","webpack:///src/app/shared/components/forms/ldap-source-form/ldap-source-form.component.ts","webpack:///src/app/shared/components/forms/ldap-source-form/ldap-source-form.component.html","webpack:///src/app/shared/components/forms/module-form/module-form.component.ts","webpack:///src/app/shared/components/forms/module-form/module-form.component.html","webpack:///src/app/shared/components/forms/oauth-source-form/oauth-source-form.component.ts","webpack:///src/app/shared/components/forms/oauth-source-form/oauth-source-form.component.html","webpack:///src/app/shared/components/forms/repository-form/repository-form.component.html","webpack:///src/app/shared/components/forms/repository-form/repository-form.component.ts","webpack:///src/app/shared/components/forms/saml-source-form/saml-source-form.component.ts","webpack:///src/app/shared/components/forms/saml-source-form/saml-source-form.component.html","webpack:///src/app/shared/components/forms/settings-form/settings-form.component.ts","webpack:///src/app/shared/components/forms/settings-form/settings-form.component.html","webpack:///src/app/shared/components/forms/system-form/system-form.component.ts","webpack:///src/app/shared/components/forms/system-form/system-form.component.html","webpack:///src/app/shared/components/forms/system-trigger-form/system-trigger-form.component.ts","webpack:///src/app/shared/components/forms/system-trigger-form/system-trigger-form.component.html","webpack:///src/app/shared/components/forms/trigger-action-form/trigger-action-form.component.ts","webpack:///src/app/shared/components/forms/trigger-action-form/trigger-action-form.component.html","webpack:///src/app/shared/components/forms/trigger-condition-form/comparison-form/comparison-form.component.ts","webpack:///src/app/shared/components/forms/trigger-condition-form/comparison-form/comparison-form.component.html","webpack:///src/app/shared/components/forms/trigger-condition-form/time-form/time-form.component.ts","webpack:///src/app/shared/components/forms/trigger-condition-form/time-form/time-form.component.html","webpack:///src/app/shared/components/forms/trigger-condition-form/trigger-condition-form.component.ts","webpack:///src/app/shared/components/forms/trigger-condition-form/trigger-condition-form.component.html","webpack:///src/app/shared/components/forms/trigger-form/trigger-form.component.ts","webpack:///src/app/shared/components/forms/trigger-form/trigger-form.component.html","webpack:///src/app/shared/components/forms/user-form/user-form.component.ts","webpack:///src/app/shared/components/forms/user-form/user-form.component.html","webpack:///src/app/shared/components/forms/zone-form/zone-form.component.html","webpack:///src/app/shared/components/forms/zone-form/zone-form.component.ts","webpack:///src/app/shared/components/icon/icon.component.ts","webpack:///src/app/shared/components/icon/icon.component.html","webpack:///src/app/shared/components/item-display/item-display.component.ts","webpack:///src/app/shared/components/item-display/item-display.template.html","webpack:///src/app/shared/components/login/forgot-pass-form/forgot-pass-form.component.ts","webpack:///src/app/shared/components/login/index.ts","webpack:///src/app/shared/components/login/login-form/login-form.component.ts","webpack:///src/app/shared/components/login/login-form/login-form.template.html","webpack:///src/app/shared/components/login/login.component.ts","webpack:///src/app/shared/components/login/login.template.html","webpack:///src/app/shared/components/login/register-form/register-form.component.ts","webpack:///src/app/shared/components/searchbar/searchbar.component.ts","webpack:///src/app/shared/components/searchbar/searchbar.template.html","webpack:///src/app/shared/components/sidebar/sidebar.component.ts","webpack:///src/app/shared/components/sidebar/sidebar.template.html","webpack:///src/app/shared/components/terminal/terminal.component.ts","webpack:///src/app/shared/components/terminal/terminal.component.html","webpack:///src/app/shared/components/unauthorised/unauthorised.component.ts","webpack:///src/app/shared/components/unauthorised/unauthorised.component.html","webpack:///src/app/shared/globals/angular-animations.ts","webpack:///src/app/shared/globals/base.class.ts","webpack:///src/app/shared/globals/base.directive.ts","webpack:///src/app/shared/guards/authorised-admin.guard.ts","webpack:///src/app/shared/guards/authorised-user.guard.ts","webpack:///src/app/shared/mocks/backend/domains.mock.ts","webpack:///src/app/shared/mocks/backend/drivers.mock.ts","webpack:///src/app/shared/mocks/backend/index.ts","webpack:///src/app/shared/mocks/backend/modules.mock.ts","webpack:///src/app/shared/mocks/backend/repositories.mock.ts","webpack:///src/app/shared/mocks/backend/settings.mock.ts","webpack:///src/app/shared/mocks/backend/systems.mock.ts","webpack:///src/app/shared/mocks/backend/triggers.mock.ts","webpack:///src/app/shared/mocks/backend/users.mock.ts","webpack:///src/app/shared/mocks/backend/zones.mock.ts","webpack:///src/app/shared/mocks/common.mock.ts","webpack:///src/app/shared/mocks/index.ts","webpack:///src/app/shared/mocks/system.mockup.ts","webpack:///src/app/shared/pipes/date-from.pipe.ts","webpack:///src/app/shared/pipes/driver-format.pipe.ts","webpack:///src/app/shared/pipes/format-list.pipe.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/utilities/api.utilities.ts","webpack:///src/app/shared/utilities/data/applications.utilities.ts","webpack:///src/app/shared/utilities/data/auth-sources.utilities.ts","webpack:///src/app/shared/utilities/data/brokers.utilities.ts","webpack:///src/app/shared/utilities/data/domains.utilities.ts","webpack:///src/app/shared/utilities/data/drivers.utilities.ts","webpack:///src/app/shared/utilities/data/modules.utilities.ts","webpack:///src/app/shared/utilities/data/repositories.utilities.ts","webpack:///src/app/shared/utilities/data/systems.utilities.ts","webpack:///src/app/shared/utilities/data/triggers.utilities.ts","webpack:///src/app/shared/utilities/data/users.utilities.ts","webpack:///src/app/shared/utilities/data/zones.utilites.ts","webpack:///src/app/shared/utilities/general.utilities.ts","webpack:///src/app/shared/utilities/validation.utilities.ts","webpack:///src/app/shell/components/global-search/global-search.component.ts","webpack:///src/app/shell/components/global-search/global-search.template.html","webpack:///src/app/shell/components/index.ts","webpack:///src/app/shell/components/sidebar-menu/sidebar-menu.component.ts","webpack:///src/app/shell/components/sidebar-menu/sidebar-menu.template.html","webpack:///src/app/shell/components/topbar-header/topbar-header.component.ts","webpack:///src/app/shell/components/topbar-header/topbar-header.template.html","webpack:///src/app/shell/index.ts","webpack:///src/app/shell/shell.component.ts","webpack:///src/app/shell/shell.template.html","webpack:///src/environments/environment.ts","webpack:///src/environments/version.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","canLoad","canActivate","loadChildren","m","AppModulesModule","AppDomainsModule","AppDriversModule","AppMetricsModule","AppSystemsModule","AppRepositoriesModule","AppTriggersModule","AppUsersModule","AppZonesModule","AppEngineModule","redirectTo","AppRoutingModule","forRoot","useHash","imports","AppComponent","_service","_uploads","_md5_workers","_composer","location","href","origin","pathname","setup","initUploads","subscription","initialised","subscribe","state","timeout","token","auth","setTimeout","autoStart","endpoint","addProvider","unsub","title","selector","templateUrl","styleUrls","encapsulation","None","AppModule","provide","useClass","register","enabled","production","declarations","providers","bootstrap","AuthSourceModalComponent","_dialog","_data","event","source_types","name","auth_source","item","active_type","type","initialiseForm","data","authority_id","domain","form","markAllAsTouched","valid","loading","save","emit","reason","metadata","trigger","notifySuccess","is_new","close","err","notifyError","JSON","stringify","response","message","BulkItemModalComponent","_dialog_ref","flow_step","item_list","data_list","template","available_fields","getAvailableFields","generateTemplate","is_mapped","length","console","log","Resource","constr","map","list","i","split","join","toJSON","service","_name","CsvUploadComponent","target","element","file","files","reader","FileReader","readAsText","addEventListener","evt","processCSVData","srcElement","result","value","_","ignore_keys","csv_data","Object","filter","key","indexOf","error","ListComponent","fields","next","previous","field_ids","changes","MatchFieldsComponent","field_list","mapping_done","source_fields","field_mapping","toLowerCase","forEach","field","find","mapped_list","mapped_item","saveMapping","StatusListComponent","done","status","saveItems","index","storePendingChange","saved_item","push","clean_list","SYSTEM_TEMPLATE","description","email","capacity","features","bookable","installed_ui_devices","support_url","modules","zones","map_id","module_data","MODULE_TEMPLATE","driver_id","control_system_id","ip","tls","udp","port","makebreak","uri","custom_name","role","Device","notes","ignore_connected","DRIVER_TEMPLATE","module_name","Logic","default_uri","default_port","settings","settings_string","class_name","repository_id","file_name","commit","USER_TEMPLATE","phone","country","image","login_name","staff_id","first_name","last_name","ZONE_TEMPLATE","triggers","parent_id","display_name","tags","count","ChangelogModalComponent","changelog","CONFIRM_METADATA","height","width","maxHeight","maxWidth","ConfirmModalComponent","content","action","icon","DuplicateModalComponent","times","ItemConstructor","constructor","temp","Array","fill","new_item","ItemCreateUpdateModalComponent","details","external_save","subscriptions","sub","edit","generateFormData","Hotkeys","listen","submit","disableClose","controls","newSettings","setting_string","new_settings","encryption_level","readonly","MetadataDetailsModalComponent","validator","setValue","updateDetails","OVERLAYS","SharedOverlaysModule","SelectItemModalComponent","service_name","SystemLogModalComponent","sys_id","SystemLogs","query","limit","logs","sort","a","b","created","TriggerActionModalComponent","action_type","method_call","updateMailers","updateFunctions","clearPendingChanges","mailers","actions","new_mailer","emails","old_mailer","findIndex","a_mailer","splice","functions","old_function","fn","system","TriggerConditionModalComponent","condition","condition_type","updateComparisons","updateTimeDependents","old_values","conditions","comparisons","new_value","left","parse","operator","right","old_value","cmp","updated_conditions","time_dependents","time_type","time","toFixed","cron","ViewModuleStateModalComponent","device_classes","generateModuleBindings","updateState","counter","devices","device","class_parts","Systems","pre_state","undefined","ViewResponseModalComponent","ApplicationService","_app_ref","_zone","_title","_router","_cache","_settings","_analytics","_hotkeys","_engine_comments","_engine_logs","_engine_search","_engine_stats","_engine_system_logs","_users","_snackbar","_route_trail","_subjects","_observers","parent","set","isStable","pipe","run","_stable","setupCache","waitForSettings","get","on_action","duration","snackbar_ref","open","panelClass","afterDismissed","dismiss","onAction","msg","debug","notify","warn","info","args","stream","force","route","url","navigate","queryParams","pop","getValue","asObservable","init","setupComposer","setting","load","dsn","authority","sentry_dsn","loadActiveUser","_initialised","window","application","protocol","host","hostname","use_domain","mock","login_locally","search","config","scope","auth_uri","token_uri","redirect_uri","handle_login","local_login","Users","isEnabled","activateUpdate","available","current","hash","setInterval","checkForUpdate","notifyInfo","reload","applications","oauth_sources","saml_sources","ldap_sources","domains","clusters","drivers","repositories","systems","app_name","title_suffix","setTitle","getTitle","api_endpoint","providedIn","BaseAPIService","http","listing","_subscribers","_promises","_compare","_list_filter","_singular","_api_route","engine","engine_endpoint","filterFn","reduce","query_params","update_list","cache","reject","d","process","results","updateList","prefill","form_data","post","analyticsEvent","task_name","post_data","_task","delay","stopPoll","_poll","show","interval","complete","put","removeItem","remove_ids","label","Analytics","raw_item","old_list","compareFn","new_list","mixed_list","found","BackofficeCommentsService","unsubscribe","task","output_list","processReplies","cmt","comment","channel_id","user_id","user","master_id","reply_to_id","in_reply_to_id","replies","likes","other","dislikes","created_at","updated_at","q","cmt_list","BackofficeLogsService","suspected","persisted","installed_device","system_id","display","started","format","ended","ended_at","last_checked","BackofficeSearchService","rs","rj","BackofficeStatsService","period","period_name","histogram","start","period_start","BackofficeSystemLogsService","Logs","BackofficeUsersService","http_unauth","singular","can_create","can_edit","_filter_fn","predicate","setUser","dark_mode","expiry","add","valueOf","localStorage","client_id","hashStr","setItem","headers","append","res","sessionStorage","clientId","authorise","logout","ref","componentInstance","ui_theme","getItem","matchMedia","matches","document","body","classList","remove","TERMINAL_COLOURS","verbose","warning","fatal","EngineDebugService","_events","_event_obs","_bound_modules","_module_names","realtime","debug_events","mod","mod_id","event_list","parts","options","sys","_enabled","ignore","level","toUpperCase","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","activeElement","tagName","mapKey","last_down","setKeyState","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","total","v","replace","key_list","non_meta","SentryService","originalError","SettingsService","api","local","session","_app_name","now","build","built","isSame","core_version","version","loadFromFile","loadStore","app","colors","shift","store","tries","BaseRootComponent","_route","paramMap","params","has","loading_item","decodeURIComponent","loadItem","setActiveItem","show_sidebar","newItem","editItem","deleteItem","toggleSidebar","relativeTo","tab","queryParamsHandling","copy","changeEvents","loadValues","loadSettings","EngineSettings","styles","ContextMenuComponent","_element","offset_x","offset_y","position","top","clientY","clientX","openMenu","updatePosition","container","nativeElement","box","getBoundingClientRect","innerHeight","bottom","innerWidth","DateFieldComponent","_locale","_from","offset","date_pipe","date","_onChange","show_tooltip","_onTouch","disabled","_trigger","closeMenu","startOf","_to","endOf","transform","toDate","menuOpen","useExisting","multi","openDatePicker","$event","stopPropagation","closeDatePicker","ItemSearchFieldComponent","min_length","search$","search_results$","search_str","match","exclude","active_item","resetSearchString","detail","Service","ObjectListFieldComponent","active_list","SettingsFieldComponent","lang","createEditor","editor","updateOptions","readOnly","language","resize","resizeEditor","dispose","monaco","create","fontFamily","lineNumbers","roundedSelection","scrollBeyondLastLine","theme","onDidChangeModelContent","SystemExecFieldComponent","executable","methods","param_list","refresh","loadModules","Modules","running","active_module","unshift","functionList","setMethod","active_method","checkFields","fields_valid","arg","arg_list","toArray","active_field","field_pos","selectionEnd","field_value","function_value","right_arrow","last_location","el","focus","selectionStart","backspace","left_arrow","processArguments","method","execute","viewDetails","order","arity","len","Math","abs","argument_list","a_method","TimeFieldComponent","step","no_past_times","show_select","_time_options","generateAvailableTimes","hour","minute","select_field","openedChange","datestamp","show_past","blocks","isAfter","ceil","end","isBefore","option","localeCompare","DebugOutputComponent","_renderer","show_content","events","terminal_string","clearEvents","dir","_resize_start","MouseEvent","resizeMove","_content_el","point","diff","x","y","is_listening","animations","ApplicationFormComponent","BrokerFormComponent","auth_types","Certificate","NoAuth","UserPassword","separators","filter_list","input","filters","trim","existing_filter","DomainFormComponent","DriverFormComponent","role_types","SSH","Websocket","driver_list","commit_list","repo$","driver$","exclude_fn","repo","Interface","driver_list$","repo_id","loading_drivers","Repositories","listDrivers","driver","commit_list$","loading_commits","listCommits","base_repo","base_commit","subject","extra","subtract","fromNow","initDriver","promise","toPromise","base_driver","driverDetails","descriptive_name","generic_name","tcp_port","udp_port","uri_base","default_settings","discovery_service","updateDriverList","updateCommitList","LdapSourceFormComponent","auth_methods","ModuleFormComponent","Drivers","OauthSourceFormComponent","token_methods","auth_schemes","info_mapping_list","info_mappings","Engine","Remote","mappings","pair","RepositoryFormComponent","repo_types","Driver","loadCommits","is_edit","can_change_commit","commits","active_commit","commit_hash","repo_type","SamlSourceFormComponent","attribute_statement_mappings","runtime_param_list","attribute_statements","idp_sso_target_url_runtime_params","mapping","SettingsFormComponent","saving","used_settings","available_levels","levels","Support","Admin","saveAll","clearChanges","merge","NeverDisplay","merge_settings","processSettings","initForm","has_errors","promises","all","edited_count","settings0","settings1","settings2","settings3","settings4","valueChanges","processed_settings","processSetting","generateMergedSettings","is_admin","is_support","obj","local_settings","remote_settings","merged_settings","concat","strict","sys_admin","support","errors","active","SystemFormComponent","encryption_levels","feature_list","existing_feature","Zones","SystemTriggerFormComponent","TriggerActionFormComponent","new_email","action_types","email_list","chip_list","errorState","TriggerConditionComparisonFormComponent","module_list","left_status_variables","right_status_variables","rhs_type","left_side","right_side","right_var_type","compare_types","EQ","NEQ","GT","GTE","LT","LTE","AND","OR","XOR","loadSystemModules","side","mod_name","var_map","connected","addExistingStatusVariables","mod_list","module_class","addExistingModules","loadSystemStatusVariables","TriggerConditionTimeFormComponent","repeat_period","cron_period","minutes_in_hour","hours_in_day","days_of_week","day","days_of_month","months_of_year","month","cron_minute","cron_hour","cron_hour_period","cron_day","cron_date","cron_month","is_cron","loadCronTab","current_cron","day_of_week","cron_str","cron_tab","TriggerConditionFormComponent","condition_types","TriggerFormComponent","UserFormComponent","ZoneFormComponent","zone","updateZone","tag_list","existing_tag","parent_zone","IconComponent","ItemDisplayComponent","has_change","tabs","changeTab","direction","execCommand","filename","content_el","scrollTop","newFromItem","duplicateItem","exportAsTSV","ForgotPassFormComponent","LOGIN_COMPONENTS","forgot","submitted","LoginFormComponent","LoginComponent","remembered_name","login_form","username","password","remember","env","logo","form_values","login","setErrors","invalid","RegisterFormComponent","SearchbarComponent","dictation","clearable","placeholder","filterChange","blur","model","win","speech","SpeechRecognition","webkitSpeechRecognition","recognition","stop","dictate","self","continuous","interimResults","onresult","transcript","onerror","checkLimitations","substr","focusInput","SidebarComponent","heading","searchChange","items","replaceActiveItem","changeSelected","subroute","atBottom","is_initialised","last_check","previousValue","currentValue","searching","is_stale","viewport","getRenderedRange","getDataLength","last_total","scrollIntoView","elementRef","TerminalComponent","terminal","ngOnDestroy","background","terminal_element","resizeTerminal","updateTerminalContents","clear","container_el","font_size","getOption","line_height","floor","new_content","lines","line","writeln","scrollToBottom","UnauthorisedComponent","ANIMATION_SHOW_ENTER_LEAVE","opacity","ANIMATION_SHOW_CONTRACT_EXPAND","ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR","BaseClass","_timers","_intervals","_subscriptions","Function","clearTimeout","clearInterval","BaseDirective","hasOwnProperty","AuthorisedAdminGuard","_user","users","can_activate","segments","AuthorisedUserGuard","FILTER_FN","DOMAIN_DATA","control","handlers","callback","includes","REPO_DATA","folder_name","DRIVER_LIST","COMMIT_LIST","random","author","route_params","SETTINGS_DATA","handle_items_fn","s","obs","zone_id","module_id","TRIGGER_DATA","PREDFINED_USERS","USER_DATA","firstName","lastName","CURRENT_USER","DOMAIN","API","ENDPOINT_SUBJECTS","ENDPOINT_OBSERVABLES","AVAILABLE_CHARS","generateID","chars","listenToHandlerChanges","endpointData","generateBasicHandlers","an_item","old_item","systemData","System","Demo","volume","mute","views","$play","$stop","$volume","$mute","$state","initMessages","backend","messages","Slack","threads","text","ts","DateFromPipe","hours","days","months","years","DriverFormatPipe","FormatListPipe","FORM_COMPONENTS","COMPONENTS","PIPES","ENTRY_COMPONENT","MATERIAL_MODULES","SharedContentModule","forChild","toQueryString","str","calculateModuleIndex","modules_with_class","mod_class","max","generateApplicationFormFields","required","scopes","skip_authorization","generateOAuthSourceForm","client_secret","site","authorize_url","token_method","auth_scheme","token_url","raw_info_url","generateSAMLSourceForm","issuer","idp_sso_target_url","name_identifier_format","assertion_consumer_service_url","request_attributes","uid_attribute","idp_cert","idp_cert_fingerprint","attribute_service_name","idp_slo_target_url","slo_default_relay_state","generateLDAPSourceForm","min","auth_method","uid","base","bind_dn","generateBrokerFormFields","broker","auth_type","certificate","secret","setValidators","generateDomainFormFields","login_url","logout_url","internals","generateDriverFormFields","generateModuleFormFields","resetModuleFormValidators","generateRepositoryFormFields","repository","branch","validateYAML","yaml","URL_PATTERN","generateSystemsFormFields","pattern","generateTriggerFormFields","enable_webhook","supported_methods","debounce_period","generateTriggerSettingsFormFields","triggered","activated_count","exec_enabled","important","validateCompare","generateTriggerConditionForm","validateEmailList","generateTriggerActionForm","validateMatch","group","generateUserFormFields","confirm_password","updateValueAndValidity","generateZoneFormFields","getItemWithKeys","detectIE","ua","navigator","userAgent","msie","parseInt","substring","trident","rv","edge","isMobileModule","r","isMobileSafari","agent","isAndroidChrome","randomInt","padZero","toString","unique","array","humaniseDuration","short","h","filterList","f","word","regex","RegExp","match_count","match_index","matched","changed","tokens","k","matchToHighlight","timeToDate","mergeYAMLSettings","dest","source","dest_obj","source_obj","merged_obj","indent","timeFormatString","is24HourTime","Date","localeString","toLocaleTimeString","numberToPosition","num","mod_ten","copyToClipboard","createElement","setAttribute","style","appendChild","selected","getSelection","rangeCount","getRangeAt","select","removeChild","removeAllRanges","addRange","csvToJson","csv","seperator","part","jsonToCsv","json","use_keys","valid_keys","downloadFile","contents","encodeURIComponent","click","eventToPoint","touches","validateIpAddress","ctrl","test","validateURI","validateURL","validateJSONString","GlobalSearchComponent","route_map","query_string","queryEndpoints","apply","itemType","afterNavigate","change","results_list","query_str","list_el","scrollHeight","clientHeight","loadMoreItems","SHELL_COMPONENTS","SidebarMenuComponent","showChange","menu_items","metrics","needs_role","new_index","TopbarHeaderComponent","show_menu_change","bulk","show_menu","toggleMenu","newSystem","newZone","newDriver","newModule","newUser","APP_COMPONENTS","APP_ENTRY_COMPONENTS","AppShellComponent","year","environment","VERSION","bootstrapModule"],"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AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AppShellComponent } from './shell/shell.component';\nimport { AuthorisedAdminGuard } from './shared/guards/authorised-admin.guard';\nimport { AuthorisedUserGuard } from './shared/guards/authorised-user.guard';\nimport { UnauthorisedComponent } from './shared/components/unauthorised/unauthorised.component';\n\nconst routes: Routes = [\n    { path: 'unauthorised', component: UnauthorisedComponent },\n    {\n        path: '',\n        component: AppShellComponent,\n        children: [\n            {\n                path: 'modules',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/modules/modules.module').then((m) => m.AppModulesModule),\n            },\n            {\n                path: 'domains',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/domains/domains.module').then((m) => m.AppDomainsModule),\n            },\n            {\n                path: 'drivers',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/drivers/drivers.module').then((m) => m.AppDriversModule),\n            },\n            {\n                path: 'metrics',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/metrics/metrics.module').then((m) => m.AppMetricsModule),\n            },\n            {\n                path: 'systems',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/systems/systems.module').then((m) => m.AppSystemsModule),\n            },\n            {\n                path: 'repositories',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/repositories/repositories.module').then(\n                        (m) => m.AppRepositoriesModule\n                    ),\n            },\n            {\n                path: 'triggers',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/triggers/triggers.module').then((m) => m.AppTriggersModule),\n            },\n            {\n                path: 'users',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/users/users.module').then((m) => m.AppUsersModule),\n            },\n            {\n                path: 'zones',\n                canLoad: [AuthorisedUserGuard],\n                canActivate: [AuthorisedUserGuard],\n                loadChildren: () =>\n                    import('./shell/zones/zones.module').then((m) => m.AppZonesModule),\n            },\n            {\n                path: 'admin',\n                canLoad: [AuthorisedAdminGuard],\n                canActivate: [AuthorisedAdminGuard],\n                loadChildren: () =>\n                    import('./shell/engine/engine.module').then((m) => m.AppEngineModule),\n            },\n            { path: '**', redirectTo: 'systems' },\n        ],\n    },\n    { path: '**', redirectTo: 'systems' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\nimport { UploadManager, Md5Workers, Amazon, Azure, Google, OpenStack } from '@acaprojects/ngx-uploads';\n\nimport { ApplicationService } from './services/app.service';\nimport { BaseDirective } from './shared/globals/base.directive';\nimport { detectIE } from './shared/utilities/general.utilities';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: [\n        './styles/app.component.scss',\n        './styles/custom-element.styles.scss',\n        './styles/native-element.styles.scss',\n    ],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class AppComponent extends BaseDirective implements OnInit {\n    constructor(\n        private _service: ApplicationService,\n        private _uploads: UploadManager,\n        private _md5_workers: Md5Workers,\n        private _composer: ComposerService\n    ) {\n        super();\n        /* istanbul ignore if */\n        if (detectIE() && detectIE() < 12) {\n            location.href = `${location.origin}${location.pathname}assets/not-supported.html`;\n            return;\n        }\n        this._md5_workers.setup('assets/md5_worker.js');\n        this.initUploads();\n    }\n\n    private initUploads() {\n        this.subscription(\n            'composer',\n            this._service.initialised.subscribe((state) => {\n                /* istanbul ignore else */\n                if (state) {\n                    this.timeout('init_uploads', () => {\n                        const token = this._composer.auth.token;\n                        if (!token) {\n                            return setTimeout(() => this.initUploads(), 300);\n                        }\n                        this._uploads.token = token;\n                        this._uploads.autoStart = true;\n                        this._uploads.endpoint = '/api/staff/uploads';\n                        UploadManager.addProvider(Amazon);\n                        UploadManager.addProvider(Azure);\n                        UploadManager.addProvider(Google);\n                        UploadManager.addProvider(OpenStack);\n                    });\n                    this.unsub('composer');\n                }\n            })\n        );\n    }\n\n    public ngOnInit(): void {\n        this._service.title = 'Loading...';\n    }\n}\n","<div class=\"app\">\n    <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule, ErrorHandler } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { FormsModule } from '@angular/forms';\n\nimport { AGoogleAnalyticsModule } from '@acaprojects/ngx-google-analytics';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { environment } from '../environments/environment';\n\nimport { SharedOverlaysModule } from './overlays/overlays.module';\nimport { SharedContentModule } from './shared/shared.module';\nimport { SentryService } from './services/sentry.service';\n\nimport { APP_COMPONENTS } from './shell';\n\nimport './shared/mocks';\nimport { AuthorisedUserGuard } from './shared/guards/authorised-user.guard';\nimport { AuthorisedAdminGuard } from './shared/guards/authorised-admin.guard';\n\n@NgModule({\n    declarations: [AppComponent, ...APP_COMPONENTS],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n        HttpClientModule,\n        FormsModule,\n        AGoogleAnalyticsModule,\n        SharedOverlaysModule,\n        SharedContentModule,\n    ],\n    providers: [\n        { provide: ErrorHandler, useClass: SentryService },\n        AuthorisedUserGuard,\n        AuthorisedAdminGuard,\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\nimport {\n    EngineDomain,\n    EngineOAuthSource,\n    EngineLDAPSource,\n    EngineSAMLSource\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    generateOAuthSourceForm,\n    generateLDAPSourceForm,\n    generateSAMLSourceForm\n} from 'src/app/shared/utilities/data/auth-sources.utilities';\n\nexport interface AuthSourceModalData {\n    /** Domain the auth source is associated with */\n    domain: EngineDomain;\n    /** Item to add/update the trigger on */\n    auth_source?: EngineOAuthSource | EngineLDAPSource | EngineSAMLSource;\n}\n\nexport type AuthSourceTypes = 'oauth' | 'saml' | 'ldap';\n\n@Component({\n    selector: 'app-auth-source-modal',\n    templateUrl: './auth-source-modal.component.html',\n    styleUrls: ['./auth-source-modal.component.scss']\n})\nexport class AuthSourceModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether actions are loading */\n    public loading: boolean;\n    /** Form fields for trigger condition */\n    public form: FormGroup;\n    /** Item */\n    public item: EngineOAuthSource | EngineLDAPSource | EngineSAMLSource;\n    /** List of available authentication sources */\n    public source_types: Identity[] = [\n        { id: 'oauth', name: 'OAuth' },\n        { id: 'ldap', name: 'LDAP' },\n        { id: 'saml', name: 'SAML2' }\n    ];\n\n    public active_type: AuthSourceTypes;\n\n    /** Whether the triggers is new or not */\n    public get is_new(): boolean {\n        return !this._data.auth_source;\n    }\n\n    public get type(): AuthSourceTypes {\n        return this.item instanceof EngineSAMLSource\n            ? 'saml'\n            : this.item instanceof EngineLDAPSource\n            ? 'ldap'\n            : 'oauth';\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<AuthSourceModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: AuthSourceModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        if (this._data.auth_source) {\n            this.item = this._data.auth_source;\n            this.active_type = this.type;\n        }\n        this.initialiseForm();\n    }\n\n    /**\n     * Set the type of auth source to create\n     * @param type Type of auth source\n     */\n    public setType(type: AuthSourceTypes) {\n        const data = { authority_id: this._data.domain.id };\n        switch (type) {\n            case 'saml':\n                this.item = new EngineSAMLSource(data);\n                break;\n            case 'ldap':\n                this.item = new EngineLDAPSource(data);\n                break;\n            default:\n                this.item = new EngineOAuthSource(data);\n                break;\n        }\n        this.initialiseForm();\n    }\n\n    /**\n     * Create item if new or update if exsiting\n     */\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        this.loading = true;\n        (this.item as any).save().then(\n            item => {\n                this.event.emit({ reason: 'done', metadata: { trigger: item } });\n                this._service.notifySuccess(\n                    `Successfully ${this.is_new ? 'added' : 'updated'} auth source`\n                );\n                this._dialog.close();\n            },\n            err => {\n                this.loading = false;\n                this._service.notifyError(\n                    `Error ${\n                        this.is_new ? 'adding' : 'updating'\n                    } auth source. Error: ${JSON.stringify(err.response || err.message || err)}`\n                );\n            }\n        );\n    }\n\n    /**\n     * Generate the form fields for the active item type\n     */\n    private initialiseForm() {\n        if (!this.item) {\n            return;\n        }\n        if (this.item instanceof EngineOAuthSource) {\n            this.form = generateOAuthSourceForm(this.item).form;\n        } else if (this.item instanceof EngineSAMLSource) {\n            this.form = generateSAMLSourceForm(this.item).form;\n        } else if (this.item instanceof EngineLDAPSource) {\n            this.form = generateLDAPSourceForm(this.item).form;\n        }\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{!is_new ? 'Edit' : 'New'}} Auth Source</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"field type\" *ngIf=\"is_new\">\n            <label for=\"type\">Auth Source Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" [(ngModel)]=\"active_type\" (ngModelChange)=\"setType($event)\" placeholder=\"Select auth type\">\n                    <mat-option *ngFor=\"let type of source_types\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container *ngIf=\"item\">\n            <ng-container [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'saml'\">\n                    <saml-source-form [form]=\"form\"></saml-source-form>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'ldap'\">\n                    <ldap-source-form [form]=\"form\"></ldap-source-form>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <oauth-source-form [form]=\"form\"></oauth-source-form>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"button\" [disabled]=\"!active_type\" (tapped)=\"save()\">\n        {{ is_new ? 'Save' : 'Add' }}\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject, Type } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport {\n    EngineResource,\n    SYSTEM_MUTABLE_FIELDS,\n    EngineSystem,\n    MODULE_MUTABLE_FIELDS,\n    EngineModule,\n    DRIVER_MUTABLE_FIELDS,\n    EngineDriver,\n    USER_MUTABLE_FIELDS,\n    EngineUser,\n    ZONE_MUTABLE_FIELDS,\n    EngineZone\n} from '@placeos/ts-client';\nimport { HashMap, EngineServiceLike, Identity } from 'src/app/shared/utilities/types.utilities';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\nimport { SYSTEM_TEMPLATE, MODULE_TEMPLATE, DRIVER_TEMPLATE, USER_TEMPLATE, ZONE_TEMPLATE } from './template-data';\n\nexport interface BulkItemModalData<T = EngineResource<any>> {\n    constr: Type<T>;\n    service: EngineServiceLike;\n}\n\n@Component({\n    selector: 'app-bulk-item-modal',\n    templateUrl: './bulk-item-modal.component.html',\n    styleUrls: ['./bulk-item-modal.component.scss'],\n})\nexport class BulkItemModalComponent<T = EngineResource<any>> {\n    /** Current step in the bulk add flow */\n    public flow_step: '' | 'match-fields' | 'list' | 'status' = '';\n    /** List of items to bulk add */\n    public item_list: T[] = [];\n    /** List of raw data to use for bulk add */\n    public data_list: HashMap[] = [];\n    /** Whether requests are being processed */\n    public loading: boolean;\n    /** Template data for use */\n    public template: HashMap[] = [];\n\n    public available_fields: Identity[] = [];\n\n    public get type(): string {\n        return this._data.service._name;\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<BulkItemModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: BulkItemModalData<T>\n    ) {\n        this.available_fields = this.getAvailableFields();\n        this.template = this.generateTemplate();\n    }\n\n    /**\n     * Handle list data\n     * @param data List of data to process\n     */\n    public handleList(data: HashMap[], is_mapped: boolean = false): void {\n        if (data.length) {\n            if (is_mapped) {\n                console.log('To list:', data);\n                const Resource = this._data.constr;\n                this.item_list = data.map((item) => new Resource(item));\n                this.flow_step = 'list';\n            } else {\n                this.data_list = data;\n                this.flow_step = 'match-fields';\n            }\n        }\n    }\n\n    public showStatus() {\n        this.flow_step = 'status';\n    }\n\n    public done() {\n        setTimeout(() => this._dialog_ref.close(), 3000);\n    }\n\n    private getAvailableFields(): Identity[] {\n        let list: readonly string[] = [];\n        switch (this._data.constr as any) {\n            case EngineSystem:\n                list = SYSTEM_MUTABLE_FIELDS;\n                break;\n            case EngineModule:\n                list = MODULE_MUTABLE_FIELDS;\n                break;\n            case EngineDriver:\n                list = DRIVER_MUTABLE_FIELDS;\n                break;\n            case EngineUser:\n                list = USER_MUTABLE_FIELDS;\n                break;\n            case EngineZone:\n                list = ZONE_MUTABLE_FIELDS;\n                break;\n        }\n        return unique(\n            list.map((i) => ({ id: i, name: i.split('_').join(' ') })),\n            'id'\n        );\n    }\n\n    private generateTemplate(): HashMap[] {\n        switch (this._data.constr as any) {\n            case EngineSystem:\n                return [new EngineSystem(SYSTEM_TEMPLATE).toJSON()];\n            case EngineModule:\n                return [new EngineModule(MODULE_TEMPLATE).toJSON()];\n            case EngineDriver:\n                return [new EngineDriver(DRIVER_TEMPLATE).toJSON()];\n            case EngineUser:\n                return [new EngineUser(USER_TEMPLATE)];\n            case EngineZone:\n                return [new EngineZone(ZONE_TEMPLATE)];\n        }\n    }\n}\n","<header>\n    <h3 mat-dialog-title>Bulk Add {{ type }}</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <div [ngSwitch]=\"flow_step\">\n            <div *ngSwitchCase=\"'status'\">\n                <bulk-item-status-list [list]=\"item_list\" (done)=\"done()\"></bulk-item-status-list>\n            </div>\n            <div *ngSwitchCase=\"'list'\">\n                <bulk-item-list\n                    [(list)]=\"item_list\"\n                    [fields]=\"available_fields\"\n                    (next)=\"showStatus()\"\n                    (previous)=\"flow_step = 'match-fields'\"\n                ></bulk-item-list>\n            </div>\n            <div *ngSwitchCase=\"'match-fields'\">\n                <bulk-item-match-fields\n                    [list]=\"data_list\"\n                    [field_list]=\"available_fields\"\n                    (mapping_done)=\"handleList($event, true)\"\n                    (previous)=\"flow_step = ''\"\n                ></bulk-item-match-fields>\n            </div>\n            <div *ngSwitchDefault>\n                <bulk-item-csv-upload\n                    [template]=\"template\"\n                    (list)=\"handleList($event)\"\n                ></bulk-item-csv-upload>\n            </div>\n        </div>\n    </main>\n</mat-dialog-content>\n","import { Component, EventEmitter, Output, Input } from '@angular/core';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { csvToJson, jsonToCsv, downloadFile } from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'bulk-item-csv-upload',\n    templateUrl: './csv-upload.component.html',\n    styleUrls: ['./csv-upload.component.scss'],\n})\nexport class CsvUploadComponent {\n    /** Data for the template CSV */\n    @Input() template: HashMap[] = [];\n    /** Emitter for changes to the data displayed */\n    @Output() public list = new EventEmitter<HashMap[]>();\n    /** Whether user has dragged item */\n    public dragging: boolean;\n    /** Whether CSV data is being processed */\n    public loading: boolean;\n\n    constructor(private _service: ApplicationService) {}\n\n    public loadCSVData(event: InputEvent) {\n        this.loading = true;\n        /* istanbul ignore else */\n        if (event.target) {\n            const element = event.target as HTMLInputElement;\n            const file = element.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    this.processCSVData((evt.srcElement as any).result);\n                    element.value = '';\n                });\n                reader.addEventListener('error', (_) => {\n                    this.loading = false;\n                    this._service.notifyError('Error reading file.');\n                });\n            }\n        }\n    }\n\n    public downloadTemplateCSV() {\n        const ignore_keys = ['module_list', 'settings', '_type', 'version'];\n        const csv_data = jsonToCsv(\n            this.template,\n            Object.keys(this.template[0]).filter((key) => ignore_keys.indexOf(key) < 0),\n            '\\t'\n        );\n        downloadFile('bulk-upload.tsv', csv_data);\n    }\n\n    private processCSVData(data: string) {\n        try {\n            const list = csvToJson(data, '\\t') || [];\n            console.log('List:', list);\n            this.loading = false;\n            this.list.emit(list);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\n","<div\n    class=\"upload-box\"\n    *ngIf=\"!loading; else load_state\"\n    [class.hover]=\"dragging\"\n    (dragenter)=\"dragging = true\"\n    (dragleave)=\"dragging = false\"\n    (dragend)=\"dragging = false\"\n>\n    <app-icon [icon]=\"{ class: 'backoffice-upload' }\"></app-icon>\n    <div class=\"text\" i18n=\"uploadCSVAction\">Select or drop CSV file to begin</div>\n    <input type=\"file\" (change)=\"loadCSVData($event)\"/>\n</div>\n<div class=\"template\" *ngIf=\"template\">\n    <button mat-button (click)=\"downloadTemplateCSV()\">Download Template</button>\n</div>\n<ng-template #load_state>\n    <div class=\"load-state\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\" i81n=\"@@loadingCSV\">Process CSV data...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges, Output, EventEmitter } from '@angular/core';\n\nimport { EngineResource } from '@placeos/ts-client';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'bulk-item-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss'],\n})\nexport class ListComponent implements OnChanges {\n    /** List of bulk items to add */\n    @Input() public list: EngineResource<any>;\n    /** List of fields available for building new item */\n    @Input() public fields: Identity[] = [];\n    /** Emitter user want to return to next step in flow */\n    @Output() public next = new EventEmitter<void>();\n    /** Emitter user want to return to previous step in flow */\n    @Output() public previous = new EventEmitter<void>();\n    /** List of column ids to show on table */\n    public field_ids: string[] = [];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.fields && this.fields) {\n            this.field_ids = this.fields.map(i => `${i.id}`);\n        }\n    }\n}\n","<div class=\"info\"></div>\n<table cdk-table [dataSource]=\"list\">\n    <ng-container *ngFor=\"let field of fields\">\n        <ng-container [cdkColumnDef]=\"field.id\">\n            <th cdk-header-cell *cdkHeaderCellDef>{{ field.name }}</th>\n            <td cdk-cell *cdkCellDef=\"let row\">\n                <input matInput [(ngModel)]=\"row[field.id]\" />\n            </td>\n        </ng-container>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"field_ids\"></tr>\n    <tr cdk-row *cdkRowDef=\"let row; columns: field_ids\"></tr>\n</table>\n<div class=\"actions\">\n    <button mat-button class=\"inverse\" (tapped)=\"previous.emit()\">Back</button>\n    <button mat-button (click)=\"next.emit()\">Create items</button>\n</div>\n\n","import { Component, Input, SimpleChanges, EventEmitter, Output } from '@angular/core';\n\nimport { HashMap, Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'bulk-item-match-fields',\n    templateUrl: './match-fields.component.html',\n    styleUrls: ['./match-fields.component.scss'],\n})\nexport class MatchFieldsComponent {\n    /** List of bulk items to add */\n    @Input() public list: HashMap<any>[];\n    /** List of fields available for building new item */\n    @Input() public field_list: Identity[] = [];\n    /** Emitter for mapped changes to list */\n    @Output() public mapping_done = new EventEmitter<HashMap<any>[]>();\n    /** Emitter user want to return to previous step in flow */\n    @Output() public previous = new EventEmitter<void>();\n    /** List of fields available to be selected */\n    public source_fields: Identity[] = [];\n    /** Mapping of raw data fields ids to item fields ids */\n    public field_mapping: HashMap<string> = {};\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.list && this.list && this.list.length) {\n            this.source_fields = Object.keys(this.list[0]).map((i) => ({\n                id: i.toLowerCase().split(' ').join('_'),\n                name: i.split('_').join(' '),\n            }));\n            this.source_fields.forEach(field => {\n                if (this.field_list.find(i => i.id === field.id)) {\n                    this.field_mapping[`${field.id}`] = `${field.id}`;\n                }\n            });\n        }\n    }\n\n    /** Generated the mapped list of items and emit them */\n    public saveMapping(): void {\n        console.log('Mapping:', this.field_mapping);\n        const mapped_list = this.list.map(item => {\n            const mapped_item: any = {};\n            for (const field of this.field_list) {\n                const id = `${field.id}`;\n                mapped_item[id] = item[this.field_mapping[id]];\n            }\n            return mapped_item;\n        });\n        this.mapping_done.emit(mapped_list);\n    }\n}\n","<div class=\"field-list\">\n    <div class=\"field\" *ngFor=\"let field of field_list\">\n        <label [for]=\"field.id\">{{ field.id }}</label>\n        <div class=\"value\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select [name]=\"field.id\" [(ngModel)]=\"field_mapping[field.id]\" placeholder=\"Select field\">\n                    <mat-option *ngFor=\"let type of source_fields\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n</div>\n<div class=\"actions\">\n    <button mat-button class=\"inverse\" (tapped)=\"previous.emit()\">Back</button>\n    <button mat-button (click)=\"saveMapping()\">Continue</button>\n</div>\n","<div class=\"info\" *ngIf=\"!done\">Uploading items...</div>\n<div *ngFor=\"let item of list; let i = index\" class=\"item\">\n    <div class=\"name\">{{ item.name }}</div>\n    <div class=\"status\">\n        <app-icon\n            *ngIf=\"status[i] !== 'loading'\"\n            [class]=\"status[i]\"\n            [icon]=\"{ class: status[i] === 'done' ? 'backoffice-check' : 'backoffice-cross' }\"\n        ></app-icon>\n        <mat-spinner *ngIf=\"status[i] === 'loading'\" diameter=\"24\"></mat-spinner>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { EngineResource } from '@placeos/ts-client';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'bulk-item-status-list',\n    templateUrl: './status-list.component.html',\n    styleUrls: ['./status-list.component.scss'],\n})\nexport class StatusListComponent implements OnChanges {\n    /** List of bulk items to add */\n    @Input() public list: EngineResource<any>[] = [];\n    /** Emitter for completion status of the item upload */\n    @Output() public done = new EventEmitter<EngineResource<any>[]>();\n    /** Status of each of the items to be created */\n    public status: HashMap<string> = {};\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.list && this.list) {\n            this.saveItems();\n        }\n    }\n\n    public async saveItems() {\n        try {\n        const list = [];\n        let index = 0;\n        for (const item of this.list) {\n            item.storePendingChange('id', '');\n            this.status[index] = 'loading';\n            const saved_item = await item.save().catch((err) => {\n                this.status[index] = `Error: ${err.message || err}`;\n                console.error(this.status[index])\n                // this._service.notifyError(this.status[index]);\n            });\n            list.push(saved_item);\n            if (this.status[index] === 'loading') {\n                this.status[index] = 'done';\n            }\n            index++;\n        }\n        const clean_list = list.filter((item) => !!item);\n        if (clean_list.length > 0) {\n            this.done.emit(clean_list);\n        }\n        } catch (e) { console.error(e); }\n    }\n}\n","\nimport { EngineDriverRole } from '@placeos/ts-client';\n\nexport const SYSTEM_TEMPLATE = {\n    name: 'A System',\n    description: 'A description',\n    email: 'system@place.tech',\n    capacity: 10,\n    features: 'vidConf',\n    bookable: true,\n    installed_ui_devices: 4,\n    support_url: 'https://place.tech/support/test',\n    modules: ['mod-123'],\n    zones: ['zone-123'],\n    map_id: 'area-123',\n    module_data: [{ id: 'mod-001', name: 'A Module' }],\n};\n\nexport const MODULE_TEMPLATE = {\n    name: 'A Module',\n    driver_id: 'dep-001',\n    control_system_id: 'sys-001',\n    ip: '1.1.1.1',\n    tls: false,\n    udp: false,\n    port: 32000,\n    makebreak: false,\n    uri: 'test.com',\n    custom_name: 'mi-name',\n    role: EngineDriverRole.Device,\n    notes: 'Clone wars',\n    ignore_connected: false,\n};\n\nexport const DRIVER_TEMPLATE = {\n    name: 'A Driver',\n    description: 'In a galaxy far far away...',\n    module_name: 'SteamShip',\n    role: EngineDriverRole.Logic,\n    default_uri: 'Sometimes we default',\n    default_port: 1234,\n    ignore_connected: false,\n    settings: { settings_string: '{ today: false, future: \\'Yeah!\\' }' },\n    class_name: '::ACA::SolveProblem',\n    repository_id: 'my-repo',\n    file_name: 'fancy-driver.cr',\n    commit: 'some-hash'\n};\n\nexport const USER_TEMPLATE = {\n    name: 'A User',\n    authority_id: 'On who\\'s authority',\n    email: 'jon@place.tech',\n    phone: '+612000000000',\n    country: 'Australia',\n    image: '',\n    metadata: 'there be none',\n    login_name: 'elitedarklord',\n    staff_id: 'PERSON_12345',\n    first_name: 'Bob',\n    last_name: 'Marley'\n};\n\nexport const ZONE_TEMPLATE = {\n    name: 'A Zone',\n    description: 'In a galaxy far far away...',\n    triggers: ['trig-001'],\n    parent_id: 'zone-123',\n    display_name: 'The Zone',\n    tags: 'building,level,org',\n    code: 'BLD-123',\n    type: 'Client',\n    count: 32,\n    capacity: 2345,\n    location: 'Somewhere close',\n    map_id: 'a/url/to/my/map.svg'\n};\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\nexport interface ChangelogModalData {\n    changelog: string;\n}\n\n@Component({\n    selector: 'changelog-modal',\n    templateUrl: './changelog-modal.template.html',\n    styleUrls: ['./changelog-modal.styles.scss']\n})\nexport class ChangelogModalComponent extends BaseDirective {\n    /** Whether the changelog is loading */\n    public loading: boolean;\n    /** Changelog Markdown */\n    public item: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: ChangelogModalData) {\n        super();\n    }\n\n    /** HTML string for rendering the change log */\n    public get changelog(): string {\n        return this._data.changelog || '';\n    }\n}\n","<header>\n    <h3 mat-dialog-title>Changelog</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div\n        class=\"body markdown\"\n        *ngIf=\"changelog; else empty_state\"\n        [innerHTML]=\"changelog | safe:'html'\"\n    ></div>\n    <ng-template #empty_state>\n        <div class=\"body\">\n            <div class=\"info-block\">\n                <div class=\"icon\">\n                    <i class=\"backoffice-cross\"></i>\n                </div>\n                <div class=\"text\">No changelog</div>\n            </div>\n        </div>\n    </ng-template>\n</mat-dialog-content>\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon } from '../../shared/utilities/settings.interfaces';\nimport { DialogEvent } from '../../shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    action?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)'\n};\n\n@Component({\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./confirm-modal.component.scss']\n})\nexport class ConfirmModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public title: string;\n    /** Body of the confirm modal */\n    public content: string;\n    /** Display text on the confirm button */\n    public action: string;\n    /** Display icon properties */\n    public icon: ApplicationIcon;\n    /** Loading state */\n    public loading: string;\n\n    constructor(\n        private _dialog: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        const data = this._data;\n        if (data) {\n            this.title = data.title || 'Confirm';\n            this.content = data.content || 'Confirm';\n            this.action = data.action || 'Ok';\n            this.icon = data.icon;\n        }\n    }\n\n    /**\n     * User confirmation of the content of the modal\n     */\n    public accept() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ title || 'Confirm' }}</h3>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <app-icon [icon]=\"icon\"></app-icon>\n        <div class=\"content\">\n            <p [innerHTML]=\"content || 'Are you sure?'\"></p>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button name=\"accept\" (tapped)=\"accept()\">{{ action || 'Ok' }}</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring></a-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </div>\n</ng-template>\n","<header>\n    <h3 mat-dialog-title i18n=\"@@duplicateHeader\">Duplicate Item</h3>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"content\">\n            <p>How many times would you like to duplicate this item?</p>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"times\"\n                    type=\"number\"\n                    [(ngModel)]=\"times\"\n                    placeholder=\"Number of duplications\"\n                    i18n-placeholder=\"@@duplcateTimesPlaceholder\"\n                    required\n                />\n            </mat-form-field>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close i18n=\"@@cancelAction\">Cancel</button>\n    <button\n        mat-button\n        name=\"accept\"\n        [disabled]=\"!times || times <= 0\"\n        (tapped)=\"duplicate()\"\n        i18n=\"@@duplicateAction\"\n    >\n        Duplicate\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info\" *ngIf=\"!done\">Creating item duplicates...</div>\n        <div *ngFor=\"let itm of temp; let i = index\" class=\"item\">\n            <div class=\"name\">{{ item.name }} ({{ i + 1 }})</div>\n            <div class=\"status\">\n                <app-icon *ngIf=\"status[i] !== 'loading'\" [class]=\"status[i]\" [icon]=\"{ class: status[i] === 'done' ? 'backoffice-check' : 'backoffice-cross' }\"></app-icon>\n                <mat-spinner *ngIf=\"status[i] === 'loading'\" diameter=\"24\"></mat-spinner>\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\nimport { HashMap, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nexport interface DuplicateModalData {\n    item: HashMap;\n}\n\n@Component({\n    selector: 'app-duplicate-modal',\n    templateUrl: './duplicate-modal.component.html',\n    styleUrls: ['./duplicate-modal.component.scss'],\n})\nexport class DuplicateModalComponent {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Number of times to duplicate the given item */\n    public times: number = 1;\n    /** Number of times to duplicate the given item */\n    public status: HashMap<string> = {};\n    /** Whether request is loading */\n    public loading: boolean = false;\n    /** Temporary array for generating UI elements */\n    public temp: any[];\n    /** Whether duplication has completed */\n    public done: boolean = false;\n\n    /** Item selected to be duplicated */\n    public get item() {\n        return this._data.item;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DuplicateModalData,\n        private _dialog_ref: MatDialogRef<DuplicateModalComponent>,\n        private _service: ApplicationService\n    ) {}\n\n    /**\n     * Create the specified number of duplicate items\n     */\n    public async duplicate() {\n        this.loading = true;\n        const ItemConstructor: any = this.item.constructor;\n        const item = this._data.item;\n        const list = [];\n        this.temp = new Array(this.times).fill(0);\n        for (let i = 0; i < this.times; i++) {\n            const new_item = new ItemConstructor({\n                ...item,\n                id: '',\n                name: `${item.name} (${i + 1})`,\n            });\n            new_item.storePendingChange('id', '');\n            this.status[i] = 'loading';\n            const saved_item = await new_item.save().catch((err) => {\n                this.status[i] = `Error: ${err.message || err}`;\n                this._service.notifyError(this.status[i]);\n            });\n            list.push(saved_item);\n            if (this.status[i] === 'loading') {\n                this.status[i] = 'done';\n            }\n        }\n        const clean_list = list.filter((item) => !!item);\n        this.event.emit({ reason: 'done', metadata: clean_list } as DialogEvent);\n        this.done = true;\n        setTimeout(() => this._dialog_ref.close(), 5000);\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ item && edit ? 'Edit' : 'New' }} {{ name }}</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <ng-container [ngSwitch]=\"item_type\">\n            <ng-container *ngSwitchCase=\"'repository'\">\n                <repository-form [form]=\"form\"></repository-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'trigger'\">\n                <trigger-form [form]=\"form\"></trigger-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'system-trigger'\">\n                <system-trigger-form [form]=\"form\"></system-trigger-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'application'\">\n                <application-form [form]=\"form\"></application-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'domain'\">\n                <domain-form [form]=\"form\"></domain-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'user'\">\n                <user-form [form]=\"form\"></user-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'driver'\">\n                <driver-form [form]=\"form\"></driver-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'zone'\">\n                <zone-form [form]=\"form\"></zone-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'module'\">\n                <module-form [form]=\"form\" [readonly]=\"readonly\"></module-form>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'broker'\">\n                <broker-form [form]=\"form\"></broker-form>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <system-form [form]=\"form\"></system-form>\n            </ng-container>\n        </ng-container>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"submit()\">{{ item ? 'Save' : 'Add' }} [S]</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject, EventEmitter, Output, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    EngineResource,\n    EngineSystem,\n    EngineModule,\n    EngineZone,\n    EngineDriver,\n    EngineUser,\n    EngineDomain,\n    EngineApplication,\n    EngineSettings,\n    EngineTrigger,\n    EngineRepository,\n    PlaceMQTTBroker,\n    EncryptionLevel\n} from '@placeos/ts-client';\nimport { FormGroup } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { DialogEvent, EngineServiceLike, Identity } from 'src/app/shared/utilities/types.utilities';\nimport {\n    generateSystemsFormFields,\n    FormDetails\n} from 'src/app/shared/utilities/data/systems.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { generateModuleFormFields } from 'src/app/shared/utilities/data/modules.utilities';\nimport { generateZoneFormFields } from 'src/app/shared/utilities/data/zones.utilites';\nimport { generateDriverFormFields } from 'src/app/shared/utilities/data/drivers.utilities';\nimport { generateUserFormFields } from 'src/app/shared/utilities/data/users.utilities';\nimport { generateDomainFormFields } from 'src/app/shared/utilities/data/domains.utilities';\nimport { generateApplicationFormFields } from 'src/app/shared/utilities/data/applications.utilities';\nimport {\n    generateTriggerFormFields,\n    generateTriggerSettingsFormFields\n} from 'src/app/shared/utilities/data/triggers.utilities';\nimport { generateRepositoryFormFields } from 'src/app/shared/utilities/data/repositories.utilities';\nimport { generateBrokerFormFields } from 'src/app/shared/utilities/data/brokers.utilities';\n\nexport interface CreateEditModalData<T extends Identity = any> {\n    /** Service associated with the item being created/edited */\n    service: EngineServiceLike;\n    /** Item being worked on */\n    item: T;\n    /** Form fields for item */\n    form?: any[];\n    /** Name of the type of item being worked on */\n    name?: string;\n    /** Whether parts of the form are readonly */\n    readonly?: string;\n    /** Whether saving the form details will be handled outside the modal */\n    external_save?: boolean;\n}\n\n@Component({\n    selector: 'item-modal',\n    templateUrl: './item-modal.component.html',\n    styleUrls: ['./item-modal.component.scss']\n})\nexport class ItemCreateUpdateModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether the item is being editing */\n    public edit: boolean;\n    /** Item to edit */\n    public item: EngineResource<any>;\n    /** Saved version of the item */\n    public result: any;\n    /** List of the form fields needed for the item */\n    public form: FormGroup;\n    /** Loading status for the item request is being processed */\n    public loading: string;\n\n    public get name(): string {\n        return this._data.service.name || this._data.service._name;\n    }\n\n    public get readonly(): boolean {\n        return !!this._data.readonly;\n    }\n\n    public get item_type(): string {\n        if (this.item instanceof EngineSystem) {\n            return 'system';\n        } else if (this.item instanceof EngineModule) {\n            return 'module';\n        } else if (this.item instanceof EngineZone) {\n            return 'zone';\n        } else if (this.item instanceof EngineDriver) {\n            return 'driver';\n        } else if (this.item instanceof EngineUser) {\n            return 'user';\n        } else if (this.item instanceof EngineDomain) {\n            return 'domain';\n        } else if (this.item instanceof EngineApplication) {\n            return 'application';\n        } else if (this.item instanceof EngineTrigger && this._data.external_save) {\n            return 'system-trigger';\n        } else if (this.item instanceof EngineTrigger) {\n            return 'trigger';\n        } else if (this.item instanceof EngineRepository) {\n            return 'repository';\n        } else if (this.item instanceof PlaceMQTTBroker) {\n            return 'broker';\n        }\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ItemCreateUpdateModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: CreateEditModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    /**\n     * Generate the form fields for the item being handled\n     */\n    public generateFormData(): FormGroup {\n        let details: FormDetails = null;\n        if (this.item instanceof EngineSystem) {\n            details = generateSystemsFormFields(this.item);\n        } else if (this.item instanceof EngineModule) {\n            details = generateModuleFormFields(this.item);\n        } else if (this.item instanceof EngineZone) {\n            details = generateZoneFormFields(this.item);\n        } else if (this.item instanceof EngineDriver) {\n            details = generateDriverFormFields(this.item);\n        } else if (this.item instanceof EngineUser) {\n            details = generateUserFormFields(this.item);\n        } else if (this.item instanceof EngineDomain) {\n            details = generateDomainFormFields(this.item);\n        } else if (this.item instanceof EngineApplication) {\n            details = generateApplicationFormFields(this.item);\n        } else if (this.item instanceof EngineTrigger && this._data.external_save) {\n            details = generateTriggerSettingsFormFields(this.item);\n        } else if (this.item instanceof EngineTrigger) {\n            details = generateTriggerFormFields(this.item);\n        } else if (this.item instanceof EngineRepository) {\n            details = generateRepositoryFormFields(this.item);\n        } else if (this.item instanceof PlaceMQTTBroker) {\n            details = generateBrokerFormFields(this.item);\n        }\n        if (details) {\n            details.subscriptions.forEach((sub, index) =>\n                this.subscription(`form_field_${index}`, sub)\n            );\n            return details.form;\n        }\n        return new FormGroup({});\n    }\n\n    public ngOnInit(): void {\n        this.item = this._data.item;\n        this.edit = !!this._data.item.id;\n        this.form = this.generateFormData();\n        this.subscription(\n            'delete_item',\n            this._service.Hotkeys.listen(['KeyS'], () => this.submit())\n        );\n    }\n\n    /**\n     * Save changes and create item if it does not exist\n     */\n    public submit() {\n        this.form.markAllAsTouched();\n        if (this.item && this.form.valid) {\n            this.loading = `${this.item.id ? 'Updating' : 'Creating'} ${this.name}...`;\n            this._dialog_ref.disableClose = true;\n            if (this._data.external_save) {\n                this.event.emit({ reason: 'action', metadata: this.form.value });\n                return;\n            }\n            this.item.save().then(\n                item => {\n                    this.result = item;\n                    this._dialog_ref.disableClose = false;\n                    this.event.emit({ reason: 'done', metadata: { item } });\n                    this._service.notifySuccess(\n                        `Successfully ${this.item.id ? 'updated' : 'added'} ${this.name}`\n                    );\n                    if (!this.form.value.id && this.form.controls.settings) {\n                        this.newSettings(item, this.form.controls.settings.value).then(() =>\n                            this._dialog_ref.close()\n                        );\n                    } else {\n                        this._dialog_ref.close();\n                    }\n                },\n                err => {\n                    this.loading = null;\n                    this._dialog_ref.disableClose = false;\n                    this._service.notifyError(\n                        `Error ${this.item.id ? 'editing' : 'adding new'} ${\n                            this.name\n                        }. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        }\n    }\n\n    /**\n     * Save initial settings for resources\n     */\n    private async newSettings(item: EngineResource<any>, setting_string: string) {\n        const new_settings = new EngineSettings({\n            parent_id: item.id,\n            setting_string: '',\n            encryption_level: EncryptionLevel.None\n        });\n        new_settings.storePendingChange('settings_string', setting_string);\n        const settings = await new_settings.save().catch(err => {\n            this.loading = null;\n            this._service.notifyError(\n                `Error saving settings for ${item.name || item.id}. Error: ${JSON.stringify(err.response || err.message || err)}`\n            );\n        });\n        (item as any).settings[EncryptionLevel.None] = settings;\n    }\n\n    /**\n     * Close the modal\n     */\n    public close() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nexport interface MetadataDetailsModalData {\n    form: FormGroup;\n}\n\n@Component({\n    selector: 'app-metadata-details-modal',\n    templateUrl: './metadata-details-modal.component.html',\n    styleUrls: ['./metadata-details-modal.component.scss']\n})\nexport class MetadataDetailsModalComponent implements OnInit {\n    public form: FormGroup;\n\n    constructor(\n        private _dialog_ref: MatDialogRef<MetadataDetailsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: MetadataDetailsModalData\n    ) {}\n\n    ngOnInit() {\n        this.form = new FormGroup({\n            name: new FormControl(\n                this._data.form.controls.name.value,\n                this._data.form.controls.name.validator\n            ),\n            description: new FormControl(this._data.form.controls.description.value)\n        });\n    }\n\n    public updateDetails() {\n        this._data.form.controls.name.setValue(this.form.controls.name.value);\n        this._data.form.controls.description.setValue(this.form.controls.description.value);\n        this._dialog_ref.close();\n    }\n}\n","<header>\n    <div class=\"heading\">Update metadata details</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"property-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"property-name\"\n                    placeholder=\"Property Name\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\">{{\n                    form.controls.name.errors.name\n                        ? 'Property name must be unique'\n                        : 'Property name is required'\n                }}</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button [disabled]=\"!form.controls.name.valid\" mat-button (tapped)=\"updateDetails()\">\n            Update\n        </button>\n    </footer>\n</mat-dialog-actions>\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedContentModule } from '../shared/shared.module';\n\nimport { ConfirmModalComponent } from './confirm-modal/confirm-modal.component';\nimport { ChangelogModalComponent } from './changelog-modal/changelog-modal.component';\nimport { ItemCreateUpdateModalComponent } from './item-modal/item-modal.component';\nimport { SelectItemModalComponent } from './select-item-modal/select-item-modal.component';\nimport { SystemLogModalComponent } from './system-log-modal/system-log-modal.component';\nimport { TriggerActionModalComponent } from './trigger-action-modal/trigger-action-modal.component';\nimport { TriggerConditionModalComponent } from './trigger-condition-modal/trigger-condition-modal.component';\nimport { ViewModuleStateModalComponent } from './view-module-state/view-module-state.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthSourceModalComponent } from './auth-source-modal/auth-source-modal.component';\nimport { ViewResponseModalComponent } from './view-response-modal/view-response-modal.component';\nimport { MetadataDetailsModalComponent } from './metadata-details-modal/metadata-details-modal.component';\nimport { BulkItemModalComponent } from './bulk-item-modal/bulk-item-modal.component';\nimport { CsvUploadComponent } from './bulk-item-modal/csv-upload/csv-upload.component';\nimport { MatchFieldsComponent } from './bulk-item-modal/match-fields/match-fields.component';\nimport { ListComponent } from './bulk-item-modal/list/list.component';\nimport { StatusListComponent } from './bulk-item-modal/status-list/status-list.component';\nimport { DuplicateModalComponent } from './duplicate-modal/duplicate-modal.component';\n\n\nconst OVERLAYS: Type<any>[] = [\n    ConfirmModalComponent,\n    ChangelogModalComponent,\n    ItemCreateUpdateModalComponent,\n    SelectItemModalComponent,\n    SystemLogModalComponent,\n    TriggerActionModalComponent,\n    TriggerConditionModalComponent,\n    ViewModuleStateModalComponent,\n    AuthSourceModalComponent,\n    ViewResponseModalComponent,\n    MetadataDetailsModalComponent,\n    BulkItemModalComponent,\n];\n\n@NgModule({\n    declarations: [\n        ...OVERLAYS,\n        CsvUploadComponent,\n        MatchFieldsComponent,\n        ListComponent,\n        StatusListComponent,\n        DuplicateModalComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SharedContentModule\n    ],\n    exports: [\n        ...OVERLAYS\n    ]\n})\nexport class SharedOverlaysModule {}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nexport interface SelectItemModalData {\n    service_name: string;\n}\n\n@Component({\n    selector: 'select-item-modal',\n    templateUrl: './select-item-modal.component.html',\n    styleUrls: ['./select-item-modal.component.scss']\n})\nexport class SelectItemModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether the item is being editing */\n    public edit: boolean;\n    /** Item to edit */\n    public item: any;\n    /** Whether the item request is being processed */\n    public loading: boolean;\n\n    constructor(\n        private _dialog: MatDialogRef<SelectItemModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: SelectItemModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public get name(): string {\n        return this.service.name || this.service._name;\n    }\n\n    public get service() {\n        return this._service[this._data.service_name];\n    }\n\n    public ngOnInit(): void {\n        if (!this.service) {\n            this._dialog.close();\n        }\n    }\n\n    public submit() {\n        this.loading = true;\n        this.event.emit({ reason: 'action', metadata: this.item });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>Add {{ name }}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"content\">\n            <item-search-field [service]=\"service\" [(ngModel)]=\"item\"></item-search-field>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"submit()\" [disabled]=\"!item\">Add</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"rgba(0,0,0, .54)\"></a-spinner>\n        </div>\n        <div class=\"text\">Processing request...</div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { IEngineLogEntry } from 'src/app/services/data/logs.service';\n\nexport interface SystemLogModalData {\n    /** ID of the system to show the logs for */\n    sys_id: string;\n}\n\n@Component({\n    selector: 'system-log-modal',\n    templateUrl: './system-log-modal.component.html',\n    styleUrls: ['./system-log-modal.component.scss']\n})\nexport class SystemLogModalComponent extends BaseDirective implements OnInit {\n    /** ID of the system to get logs for */\n    public id: string;\n    /** List of the available log entries for the set system */\n    public logs: IEngineLogEntry[];\n    /** Whether the system's logs are loading */\n    public loading: boolean;\n    /**  */\n    public name: string;\n    /** Whether the modal is closing */\n    public closing: boolean;\n\n    constructor(\n        private _dialog: MatDialogRef<SystemLogModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: SystemLogModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.id = this._data.sys_id;\n        if (this.id) {\n            this.loading = true;\n            this._service.SystemLogs.query({ limit: 500, id: this.id }).then(\n                (list: IEngineLogEntry[]) => {\n                    this.logs = list.sort((a, b) => b.created - a.created);\n                },\n                () => {\n                    this._dialog.close();\n                    this._service.notifyError('Error loading logs for system');\n                }\n            );\n        } else {\n            this._dialog.close();\n        }\n    }\n}\n","<header>\n    <h3 mat-dialog-title>System Logs</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <table>\n            <thead>\n                <td>User</td>\n                <td>Date/Time</td>\n                <td></td>\n            </thead>\n            <tbody>\n                <tr class=\"item\" *ngFor=\"let item of logs\">\n                    <td>{{ item?.user?.name }}</td>\n                    <td>{{ item?.created_at | date }}</td>\n                    <td>{{ item?.installed_device }}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</mat-dialog-content>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { generateTriggerActionForm } from 'src/app/shared/utilities/data/triggers.utilities';\nimport { EngineTrigger, EngineSystem, TriggerMailer, TriggerFunction } from '@placeos/ts-client';\nimport { FormGroup } from '@angular/forms';\n\nexport interface TriggerActionModalData {\n    /** Item to add/update the trigger on */\n    system: EngineSystem;\n    /** Trigger to add/update */\n    trigger: EngineTrigger;\n    /** Trigger Condition to edit */\n    action?: TriggerMailer | TriggerFunction;\n}\n\n@Component({\n    selector: 'trigger-action-modal',\n    templateUrl: './trigger-action-modal.template.html',\n    styleUrls: ['./trigger-action-modal.styles.scss']\n})\nexport class TriggerActionModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether actions are loading */\n    public loading: boolean;\n    /** Form fields for trigger condition */\n    public form: FormGroup;\n\n    /** Whether the triggers is new or not */\n    public get is_new(): boolean {\n        return !!this._data.action;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get system(): EngineSystem {\n        return this._data.system;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get trigger(): EngineTrigger {\n        return this._data.trigger;\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<TriggerActionModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: TriggerActionModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.form = generateTriggerActionForm(this._data.action).form;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (\n            (this.form.controls.action_type.value === 'emails' && !this.form.valid) ||\n            (this.form.controls.action_type.value === 'function' && !this.form.value.method_call)\n        ) {\n            return;\n        }\n        this.loading = true;\n        if (this.form.controls.action_type.value === 'emails') {\n            this.updateMailers();\n        } else {\n            this.updateFunctions();\n        }\n        this.trigger.save().then(\n            item => {\n                this.event.emit({ reason: 'done', metadata: { trigger: item } });\n                this._service.notifySuccess(`Successfully ${this.is_new ? 'added' : 'updated'} condition to trigger`);\n                this._dialog.close();\n            },\n            err => {\n                this.trigger.clearPendingChanges();\n                this.loading = false;\n                this._service.notifyError(\n                    `Error ${this.is_new ? 'adding' : 'updating'} condition to trigger. Error: ${JSON.stringify(err.response || err.message || err)}`\n                );\n            }\n        );\n    }\n\n    private updateMailers() {\n        const mailers = this.trigger.actions.mailers;\n        const new_mailer = {\n            emails: this.form.value.emails,\n            content: this.form.value.content\n        };\n        if (this._data.action) {\n            const old_mailer = JSON.stringify(this._data.action);\n            const index = mailers.findIndex(\n                a_mailer => JSON.stringify(a_mailer) === old_mailer\n            );\n            mailers.splice(index, 1, new_mailer);\n        } else {\n            mailers.push(new_mailer);\n        }\n        this.trigger.storePendingChange('actions', { ...this.trigger.actions, mailers });\n    }\n\n    private updateFunctions() {\n        const functions = this.trigger.actions.functions;\n        if (this._data.action) {\n            const old_function = JSON.stringify(this._data.action);\n            const index = functions.findIndex(fn => JSON.stringify(fn) === old_function);\n            functions.splice(index, 1, this.form.value.method_call);\n        } else {\n            functions.push(this.form.value.method_call);\n        }\n        this.trigger.storePendingChange('actions', { ...this.trigger.actions, functions });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{is_new ? 'Edit' : 'New'}} Trigger Action</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <trigger-action-form [form]=\"form\" [system]=\"system\"></trigger-action-form>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"save()\">\n        {{ is_new ? 'Save' : 'Add' }}\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nimport {\n    EngineSystem,\n    EngineTrigger,\n    TriggerComparison,\n    TriggerTimeCondition,\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nimport { generateTriggerConditionForm } from 'src/app/shared/utilities/data/triggers.utilities';\n\nexport interface TriggerConditionData {\n    /** Item to add/update the trigger on */\n    system: EngineSystem;\n    /** Trigger to add/update */\n    trigger: EngineTrigger;\n    /** Trigger Condition to edit */\n    condition?: TriggerComparison | TriggerTimeCondition;\n}\n\n@Component({\n    selector: 'trigger-condition-modal',\n    templateUrl: './trigger-condition-modal.template.html',\n    styleUrls: ['./trigger-condition-modal.styles.scss'],\n})\nexport class TriggerConditionModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether actions are loading */\n    public loading: boolean;\n    /** Form fields for trigger condition */\n    public form: FormGroup;\n\n    /** Whether the triggers is new or not */\n    public get is_new(): boolean {\n        return !!this._data.condition;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get system(): EngineSystem {\n        return this._data.system;\n    }\n\n    /** Template system to use for status variable bindings */\n    public get trigger(): EngineTrigger {\n        return this._data.trigger;\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<TriggerConditionModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: TriggerConditionData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.form = generateTriggerConditionForm(this._data.condition).form;\n    }\n\n    public save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return;\n        }\n        this.loading = true;\n        if (this.form.controls.condition_type.value === 'compare') {\n            this.updateComparisons();\n        } else {\n            this.updateTimeDependents();\n        }\n        this.trigger.save().then(\n            (item) => {\n                this.event.emit({ reason: 'done', metadata: { trigger: item } });\n                this._service.notifySuccess(\n                    `Successfully ${this.is_new ? 'added' : 'updated'} condition to trigger`\n                );\n                this._dialog.close();\n            },\n            (err) => {\n                this.trigger.clearPendingChanges();\n                this.loading = false;\n                this._service.notifyError(\n                    `Error ${\n                        this.is_new ? 'adding' : 'updating'\n                    } condition to trigger. Error: ${JSON.stringify(\n                        err.response || err.message || err\n                    )}`\n                );\n            }\n        );\n    }\n\n    /**\n     * Update the comparison list by replace an exisiting item or add a new item\n     */\n    private updateComparisons() {\n        const old_values = [...this.trigger.conditions.comparisons];\n        const new_value: TriggerComparison = {\n            left:\n                typeof this.form.controls.left.value === 'string'\n                    ? JSON.parse(this.form.controls.left.value)\n                    : this.form.controls.left.value,\n            operator: this.form.controls.operator.value,\n            right:\n                typeof this.form.controls.right.value === 'string'\n                    ? JSON.parse(this.form.controls.right.value)\n                    : this.form.controls.right.value,\n        };\n        if (this._data.condition) {\n            const old_value = JSON.stringify(this._data.condition);\n            const index = old_values.findIndex((cmp) => JSON.stringify(cmp) === old_value);\n            if (index >= 0) {\n                old_values.splice(index, 1, new_value);\n            }\n        } else {\n            old_values.push(new_value);\n        }\n        const updated_conditions = {\n            ...this.trigger.conditions,\n            comparisons: old_values,\n        };\n        this.trigger.storePendingChange('conditions', updated_conditions);\n    }\n\n    /**\n     * Update the time dependent list by replace an exisiting item or add a new item\n     */\n    private updateTimeDependents() {\n        const old_values = [...this.trigger.conditions.time_dependents] || [];\n        const new_value = {\n            type: this.form.controls.time_type.value,\n            time: +(this.form.controls.time.value / 1000).toFixed(0),\n            cron: this.form.controls.cron.value,\n        };\n        new_value.cron ? delete new_value.time : delete new_value.cron;\n        if (this._data.condition) {\n            const old_value = JSON.stringify(this._data.condition);\n            const index = old_values.findIndex((time) => JSON.stringify(time) === old_value);\n            if (index >= 0) {\n                old_values.splice(index, 1, new_value);\n            }\n        } else {\n            old_values.push(new_value);\n        }\n        const updated_conditions = {\n            ...this.trigger.conditions,\n            time_dependents: old_values,\n        };\n        this.trigger.storePendingChange('conditions', updated_conditions);\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{is_new ? 'Edit' : 'New'}} Trigger Condition</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <trigger-condition-form [form]=\"form\" [system]=\"system\"></trigger-condition-form>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button type=\"submit\" (tapped)=\"save()\">\n        {{ is_new ? 'Save' : 'Add' }}\n    </button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Processing request...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { HashMap, EngineModule, EngineSystem } from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nexport interface ModuleStateModalData {\n    /** System Data to show the details for */\n    system: EngineSystem;\n    /** Module to expose the state of */\n    module: EngineModule;\n    /** Modules associated with the system */\n    devices: EngineModule[];\n}\n\n@Component({\n    selector: 'view-module-state-modal',\n    templateUrl: './view-module-state.template.html',\n    styleUrls: ['./view-module-state.styles.scss'],\n})\nexport class ViewModuleStateModalComponent extends BaseDirective implements OnInit {\n    /** Current state of the selected module */\n    public state: string;\n    /** Whether the module state is being loaded */\n    public loading: boolean;\n    /** Whether the modal is closing */\n    public closing: boolean;\n    /** Mapping of devices to the module bindings */\n    public device_classes: HashMap<string> = {};\n\n    /** System of the selected module */\n    public get system(): EngineSystem {\n        return this._data.system;\n    }\n\n    /** Module to view the state of */\n    public get module(): EngineModule {\n        return this._data.module;\n    }\n\n    /** Modules associated with the system */\n    public get devices(): EngineModule[] {\n        return this._data.devices || [];\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<ViewModuleStateModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ModuleStateModalData,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.generateModuleBindings();\n        this.updateState();\n    }\n\n    /**\n     * Generate the binding modules for each device\n     */\n    private generateModuleBindings() {\n        const counter: HashMap<number> = {};\n        for (const device of this.devices) {\n            const name = device.custom_name || device.name || 'Blank';\n            if (!counter[name]) {\n                counter[name] = 0;\n            }\n            this.device_classes[device.id] = `${name}_${++counter[name]}`;\n        }\n    }\n\n    /** Update the state of the module */\n    public updateState() {\n        if (!this.system || !this.module) {\n            return;\n        }\n        const class_name = this.device_classes[this.module.id];\n        if (!class_name) {\n            return;\n        }\n        this.loading = true;\n        const class_parts = class_name.split('_');\n        this._service.Systems.state(this.system.id, class_parts[0], +class_parts[1]).then(\n            (state) => {\n                const pre_state =\n                typeof state === 'string'\n                    ? JSON.parse(state)\n                    : state;\n                Object.keys(pre_state).forEach(key => {\n                    pre_state[key] = JSON.parse(pre_state[key]);\n                });\n                this.state = JSON.stringify(pre_state, undefined, 4);\n                this.loading = false;\n            },\n            (err) => {\n                this._service.notifyError(JSON.stringify(err.response || err.message || err));\n                this.loading = false;\n            }\n        );\n    }\n\n    /**\n     * Close the modal\n     */\n    public close() {\n        this._dialog.close();\n    }\n}\n","<header>\n    <h3 mat-dialog-title>\n        Module State - {{module?.custom_name || module?.name}}</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'backoffice-cross' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <div class=\"field\">\n            <label>System:</label>\n            <div class=\"value\">{{system?.name}}</div>\n        </div>\n        <div class=\"field\">\n            <label>Module:</label>\n            <div class=\"value\">\n                {{ device_classes[module?.id] }}\n            </div>\n        </div>\n        <button mat-button (tapped)=\"updateState()\">Update state</button>\n        <div class=\"settings\">\n            <settings-form-field [ngModel]=\"state\" [readonly]=\"true\"></settings-form-field>\n        </div>\n    </div>\n</mat-dialog-content>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <a-spinner circle-ring color=\"#000\"></a-spinner>\n            </div>\n            <div class=\"text\">Loading state...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface ViewResponseModalData {\n    content: any;\n}\n\n@Component({\n    selector: 'app-view-response-modal',\n    templateUrl: './view-response-modal.component.html',\n    styleUrls: ['./view-response-modal.component.scss']\n})\nexport class ViewResponseModalComponent {\n\n    public get content_string(): string {\n        return typeof this._data.content === 'object'\n            ? JSON.stringify(this._data.content, undefined, 4)\n            : this._data.content;\n    }\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: ViewResponseModalData) {}\n}\n","<header>\n    <div class=\"text\">Exec Request Results</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <settings-form-field [ngModel]=\"content_string\" [readonly]=\"true\"></settings-form-field>\n</mat-dialog-content>\n","import { Injectable, ApplicationRef, NgZone } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { SwUpdate } from '@angular/service-worker';\nimport { first } from 'rxjs/operators';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { ComposerService } from '@placeos/composer';\nimport { PlaceOSOptions } from '@placeos/ts-client';\nimport { GoogleAnalyticsService } from '@acaprojects/ngx-google-analytics';\n\nimport { Observable, BehaviorSubject, Subject, Subscription } from 'rxjs';\n\nimport { BaseClass } from '../shared/globals/base.class';\nimport { SettingsService, ConsoleStream } from './settings.service';\nimport { HashMap } from '../shared/utilities/types.utilities';\n\nimport { HotkeysService } from './hotkeys.service';\nimport { BackofficeCommentsService } from './data/comments.service';\nimport { BackofficeLogsService } from './data/logs.service';\nimport { BackofficeSearchService } from './data/search.service';\nimport { BackofficeStatsService } from './data/stats.service';\nimport { BackofficeSystemLogsService } from './data/system_logs.service';\nimport { BackofficeUsersService } from './data/users.service';\nimport { ApplicationIcon, ComposerOptions } from '../shared/utilities/settings.interfaces';\n\nimport * as Sentry from '@sentry/browser';\n\ndeclare global {\n    interface Window {\n        application: ApplicationService;\n        mock: {\n            enabled: boolean;\n            backend: any;\n        };\n    }\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApplicationService extends BaseClass {\n    /** List of previous routes for return navigation */\n    private _route_trail: string[] = [];\n    /** Map of state variables for Service */\n    protected _subjects: HashMap<BehaviorSubject<any> | Subject<any>> = {};\n    /** Map of observables for state variables */\n    protected _observers: HashMap<Observable<any>> = {};\n    /** Whether the application has stablised */\n    private _stable: boolean;\n\n    /** Whether the application has stablised */\n    public get is_stable(): boolean {\n        return this._stable || false;\n    }\n\n    constructor(\n        private _app_ref: ApplicationRef,\n        private _zone: NgZone,\n        private _title: Title,\n        private _router: Router,\n        private _cache: SwUpdate,\n        private _settings: SettingsService,\n        private _composer: ComposerService,\n        private _analytics: GoogleAnalyticsService,\n        private _hotkeys: HotkeysService,\n        private _engine_comments: BackofficeCommentsService,\n        private _engine_logs: BackofficeLogsService,\n        private _engine_search: BackofficeSearchService,\n        private _engine_stats: BackofficeStatsService,\n        private _engine_system_logs: BackofficeSystemLogsService,\n        private _users: BackofficeUsersService,\n        private _snackbar: MatSnackBar\n    ) {\n        super();\n        this._engine_comments.parent = this._engine_logs.parent = this._engine_search.parent =\n            this._engine_stats.parent = this._engine_system_logs.parent = this._users.parent = this;\n        this.set('system', null);\n        this._app_ref.isStable.pipe(first(_ => _)).subscribe(() => {\n            this._zone.run(() => {\n                this._stable = true;\n                this.log('APP', `Application has stablised.`);\n                this.setupCache();\n                this.waitForSettings();\n            });\n        });\n    }\n\n    /** Analytics service */\n    public get Analytics() {\n        return this._analytics;\n    }\n\n    /** Hotkeys service */\n    public get Hotkeys() {\n        return this._hotkeys;\n    }\n\n    /** Users service */\n    public get Users() {\n        return this._users;\n    }\n\n    /** Engine Applications service */\n    public get Applications() {\n        return this._composer.applications;\n    }\n\n    /** Engine Auth Sources service */\n    public get OAuthSources() {\n        return this._composer.oauth_sources;\n    }\n\n    /** Engine Auth Sources service */\n    public get SAMLAuthSources() {\n        return this._composer.saml_sources;\n    }\n\n    /** Engine Auth Sources service */\n    public get LDAPAuthSources() {\n        return this._composer.ldap_sources;\n    }\n\n    /** Comments service */\n    public get Comments() {\n        return this._engine_comments;\n    }\n\n    /** Engine Domains service */\n    public get Domains() {\n        return this._composer.domains;\n    }\n\n    /** Engine Cluster service */\n    public get Clusters() {\n        return this._composer.clusters;\n    }\n\n    /** Drivers service */\n    public get Drivers() {\n        return this._composer.drivers;\n    }\n\n    /** Engine Logs service */\n    public get Logs() {\n        return this._engine_logs;\n    }\n\n    /** Modules service */\n    public get Modules() {\n        return this._composer.modules;\n    }\n\n    /** Engine Search service */\n    public get Search() {\n        return this._engine_search;\n    }\n\n    public get Repositories() {\n        return this._composer.repositories;\n    }\n\n    /** Stats service */\n    public get Stats() {\n        return this._engine_stats;\n    }\n\n    /** Engien System Logs service */\n    public get SystemLogs() {\n        return this._engine_system_logs;\n    }\n\n    /** Systems service */\n    public get Systems() {\n        return this._composer.systems;\n    }\n\n    /** Triggers service */\n    public get Triggers() {\n        return this._composer.triggers;\n    }\n\n    /** Zones service */\n    public get Zones() {\n        return this._composer.zones;\n    }\n\n    public get EngineSettings() {\n        return this._composer.settings;\n    }\n\n    /**\n     * Get a setting from the settings service\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        return this._settings.get(key);\n    }\n\n    /** Name of the application */\n    public get name() {\n        return this._settings.app_name;\n    }\n\n    /**\n     * Title of the page\n     */\n    public set title(value: string) {\n        const title_suffix = this.setting('app.title');\n        this._title.setTitle(`${value ? value + ' | ' : ''}${title_suffix || 'PlaceOS'}`);\n    }\n\n    /**\n     * Title of the page\n     */\n    public get title(): string {\n        return this._title.getTitle();\n    }\n\n    /** Root API Endpoint */\n    public get endpoint() {\n        return this._composer.auth.api_endpoint;\n    }\n\n    /** Root API Endpoint for engine */\n    public get engine_endpoint() {\n        return this._composer.auth.api_endpoint;\n    }\n\n    /**\n     * Create notification popup\n     * @param type CSS Class to add to the notification\n     * @param message Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     * @param icon Icon to render to the left of the notification message\n     */\n    public notify(\n        type: string,\n        message: string,\n        action: string = 'OK',\n        on_action?: () => void,\n        icon: ApplicationIcon = {\n            type: 'icon',\n            class: 'material-icons',\n            content: 'info'\n        },\n        duration: number = 8000\n    ): void {\n        const snackbar_ref = this._snackbar.open(message, action, {\n            panelClass: [type],\n            duration\n        });\n        this.subscription(\n            'snackbar_close',\n            snackbar_ref.afterDismissed().subscribe(() => {\n                this.unsub('snackbar_close');\n                this.unsub('notify');\n            })\n        );\n        if (action) {\n            on_action = on_action || (() => snackbar_ref.dismiss());\n            this.subscription(\n                'notify',\n                snackbar_ref.onAction().subscribe(() => on_action())\n            );\n        }\n    }\n\n    /**\n     * Create success notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifySuccess(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'done' };\n        console.debug('[APP][USER_ACTION]', msg);\n        this.notify('success', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Create success notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyError(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'error' };\n        console.error('[APP][USER_ACTION]', msg);\n        this.notify('error', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Create info notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyWarn(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'warning' };\n        console.warn('[APP][USER_ACTION]', msg);\n        this.notify('warn', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Create info notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyInfo(\n        msg: string,\n        action?: string,\n        on_action?: () => void,\n        duration: number = 8000\n    ): void {\n        const icon: ApplicationIcon = { type: 'icon', class: 'material-icons', content: 'info' };\n        console.info('[APP][USER_ACTION]', msg);\n        this.notify('info', msg, action, on_action, icon, duration);\n    }\n\n    /**\n     * Log data to the browser console\n     * @param type Type of message\n     * @param msg Message body\n     * @param args array of argments to log to the console\n     * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n     * @param force Whether to force message to be emitted when debug is disabled\n     */\n    public log(\n        type: string,\n        msg: string,\n        args?: any,\n        stream: ConsoleStream = 'debug',\n        force: boolean = false\n    ): void {\n        this._settings.log(type, msg, args, stream, force);\n    }\n\n    /**\n     * Navigate to the given path\n     * @param path Path or array of path parts\n     * @param query Key value pairs to add to the URL as query parameters\n     */\n    public navigate(path: string | string[], query?: HashMap): void {\n        const route = path instanceof Array ? [...path] : [path];\n        this._route_trail.push(this._router.url);\n        this._router.navigate(route, { queryParams: query });\n    }\n\n    /**\n     * Navigate to the previous location in the route trail\n     */\n    public navigateBack(): void {\n        if (this._route_trail && this._route_trail.length > 0) {\n            const path = this._route_trail.pop();\n            this._router.navigate([path]);\n        } else {\n            this._router.navigate(['']);\n        }\n    }\n\n    /**\n     * Get the current value of the named property\n     * @param name Property name\n     */\n    public get<U = any>(name: string): U {\n        return this._subjects[name] && this._subjects[name] instanceof BehaviorSubject\n            ? (this._subjects[name] as BehaviorSubject<U>).getValue()\n            : null;\n    }\n\n    /**\n     * Listen to value change of the named property\n     * @param name Property name\n     * @param next Callback for value changes\n     */\n    public listen<U = any>(name: string): Observable<U> {\n        return this._observers[name] ? this._observers[name] : null;\n    }\n\n    /**\n     * Update the value of the named property\n     * @param name Property name\n     * @param value New value\n     */\n    public set<U = any>(name: string, value: U): void {\n        if (!this._subjects[name]) {\n            this._subjects[name] = new BehaviorSubject<U>(value);\n            this._observers[name] = this._subjects[name].asObservable();\n        } else {\n            this._subjects[name].next(value);\n        }\n    }\n\n    /** Wait for settings to be initialised before setting up the application */\n    private waitForSettings() {\n        // Wait until the settings have loaded before initialising\n        this._settings.initialised.pipe(first(_ => _)).subscribe((setup) => {\n            if (setup) {\n                this.init();\n            }\n        });\n    }\n\n    /**\n     * Initialise application services\n     */\n    private init(): void {\n        this.setupComposer();\n        // Setup analytics\n        this._analytics.enabled = !!this.setting('app.analytics.enabled');\n        if (this._analytics.enabled) {\n            this._analytics.load(this.setting('app.analytics.tracking_id'));\n        }\n        this._composer.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.set('ready', true);\n            const dsn =\n                this._composer.auth.authority.sentry_dsn || this.setting('app.sentry_dsn');\n            if (dsn) {\n                Sentry.init({ dsn });\n            }\n            this.loadActiveUser();\n            this._initialised.next(true);\n        });\n        // Add service to window if in debug mode\n        if (window.debug) {\n            window.application = this;\n        }\n    }\n\n    /**\n     * Initialise the composer library comms\n     */\n    private setupComposer(): void {\n        this.log('SYSTEM', 'Setup up composer...');\n        // Get application settings\n        const settings: ComposerOptions = this.setting('composer') || {};\n        const protocol = settings.protocol || location.protocol;\n        const host = settings.domain || location.hostname;\n        const port = settings.port || location.port;\n        const url = settings.use_domain ? `${protocol}//${host}:${port}` : location.origin;\n        const route = settings.route || '';\n        const mock = this.setting('mock');\n        const login_locally = location.search.indexOf('login=true') >= 0;\n        // Generate configuration object\n        const config: PlaceOSOptions = {\n            scope: 'public',\n            host: `${host}:${port}`,\n            auth_uri: `${url}/auth/oauth/authorize`,\n            token_uri: `${url}/auth/token`,\n            redirect_uri: `${location.origin}${route}/oauth-resp.html`,\n            handle_login: !settings.local_login && !login_locally,\n            mock\n        };\n        this._composer.setup(config);\n    }\n\n    private loadActiveUser() {\n        this.Users.load();\n    }\n\n    /**\n     * Setup handler for cache change events\n     */\n    private setupCache() {\n        this.unsub('app_stable');\n        this.log('CACHE', `Initialising cache...`);\n        if (this._cache.isEnabled) {\n            this.log('CACHE', `Listening to cache events...`);\n            this._cache.activateUpdate();\n            this.subscription('cache_update', this._cache.available.subscribe((event) => {\n                const current = `current version is ${event.current.hash}`;\n                const available = `available version is ${event.available.hash}`;\n                this.log('CACHE', `Update available: ${current} ${available}`);\n                this.activateUpdate()\n            }));\n            setInterval(() => {\n                this.log('CACHE', `Checking for updates...`);\n                this._cache.checkForUpdate();\n            }, 5 * 60 * 1000);\n        }\n    }\n\n    /**\n     * Update the cache and reload the page\n     */\n    private activateUpdate() {\n        if (this._cache.isEnabled) {\n            this.log('CACHE', `Activating changes to the cache...`);\n            this._cache.activateUpdate().then(() => {\n                this.notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                    location.reload(true)\n                );\n            });\n        }\n    }\n}\n","import { BehaviorSubject, Observable, Subscription, Subscriber, Subject } from 'rxjs';\nimport { EngineHttpClient } from '@placeos/ts-client';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '../../shared/globals/base.class';\nimport { ApplicationService } from '../app.service';\nimport { HashMap } from '../../shared/utilities/types.utilities';\nimport { toQueryString } from '../../shared/utilities/api.utilities';\n\nexport interface IEngineResponse {\n    results: HashMap[];\n    total: number;\n}\n\nexport class BaseAPIService<T extends {}> extends BaseClass {\n    /** Application service */\n    public parent: ApplicationService;\n    /** List of available items */\n    public readonly listing = new BehaviorSubject<T[]>([]);\n    /** Display name of the service */\n    protected _name: string;\n    /** Name of a single item from the service */\n    protected _singular: string;\n    /** API Route of the service */\n    protected _api_route: string;\n    /** Map of state variables for Service */\n    protected _subjects: { [key: string]: BehaviorSubject<any> | Subject<any> } = {};\n    /** Map of observables for state variables */\n    protected _observers: { [key: string]: Observable<any> } = {};\n    /** Map of poll subscribers for API endpoints */\n    protected _subscribers: { [key: string]: Subscriber<any> } = {};\n    /** Map of promises for Service */\n    protected _promises: { [key: string]: Promise<any> } = {};\n    /** Comparison function for service items */\n    protected _compare: (a: T, b: T) => boolean = (a, b) =>\n        a === b || (a as any).id === (b as any).id;\n    /** Default filter function for list method */\n    protected _list_filter: (a: T) => boolean = a => !!a;\n\n    constructor(protected http: EngineHttpClient) {\n        super();\n        this._name = 'base';\n        this._singular = 'base';\n        this._api_route = 'base';\n        this.set('list', []);\n    }\n\n    /**\n     * Initailise service\n     */\n    public init() {\n        if (!this.parent) {\n            return this.timeout('init', () => this.init());\n        }\n        this.parent.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.load().then(_ => this._initialised.next(true));\n        });\n    }\n\n    /**\n     * Get API route for the service\n     * @param engine Whether endpoint is using the application API or engine API\n     */\n    public route(engine: boolean = false) {\n        const endpoint = this.parent\n            ? engine\n                ? this.parent.engine_endpoint\n                : this.parent.endpoint\n            : '/api';\n        return `${endpoint}${this._api_route}`;\n    }\n    /** API Route of the service */\n    public get api_route() {\n        return this._api_route;\n    }\n\n    /**\n     * Get a service related setting from the settings service\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string) {\n        return this.parent ? this.parent.setting(`app.${this._name.toLowerCase()}.${key}`) : null;\n    }\n\n    /**\n     * Get the current value of the named property\n     * @param name Property name\n     */\n    public get<U = any>(name: string): U {\n        return this._subjects[name] && this._subjects[name] instanceof BehaviorSubject\n            ? (this._subjects[name] as BehaviorSubject<U>).getValue()\n            : null;\n    }\n\n    /**\n     * Listen to value change of the named property\n     * @param name Property name\n     * @param next Callback for value changes\n     */\n    public listen<U = any>(name: string, next: (_: U) => void): Subscription {\n        return this._observers[name] ? this._observers[name].subscribe(next) : null;\n    }\n\n    /**\n     * Update the value of the named property\n     * @param name Property name\n     * @param value New value\n     */\n    protected set<U = any>(name: string, value: U): void {\n        if (!this._subjects[name]) {\n            this._subjects[name] = new BehaviorSubject<U>(value);\n            this._observers[name] = this._subjects[name].asObservable();\n        } else {\n            this._subjects[name].next(value);\n        }\n    }\n\n    /**\n     * Get list of loaded items\n     * @param filterFn Function for filtering the list\n     */\n    public list(filterFn: (a: T) => boolean = this._list_filter): T[] {\n        const list = this.get('list') || [];\n        return list.reduce((a, i) => {\n            if (filterFn(i)) {\n                a.push(i);\n            }\n            return a;\n        }, []);\n    }\n\n    /**\n     * Get item with the given id from the loaded items\n     * @param id ID of the item\n     */\n    public item(id: string): T {\n        const list = this.get('list') || [];\n        return list.find(i => i.id === id || i.email === id);\n    }\n\n    /**\n     * Query the index of the API route associated with this service\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public query(query_params: HashMap = { update_list: true }): Promise<T[] | HashMap[]> {\n        let engine = false;\n        let cache = 1000;\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n            cache = query_params.cache || 1000;\n            delete query_params.cache;\n        }\n        const query = toQueryString(query_params);\n        const key = `query|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise((resolve, reject) => {\n                const url = `${this.route(engine)}${query ? '?' + query : ''}`;\n                let result: T[] | HashMap[] = [];\n                this.http.get(url).subscribe(\n                    (d: IEngineResponse | HashMap[]) => {\n                        result =\n                            d && d instanceof Array\n                                ? d.map(i => this.process(i))\n                                : d && !(d instanceof Array) && d.results\n                                ? (d.results as HashMap[])\n                                : [];\n                    },\n                    e => {\n                        reject(e);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        if (\n                            (!query || (query_params && query_params.update_list)) &&\n                            result.length > 0 &&\n                            result[0] instanceof Object\n                        ) {\n                            this.set('list', this.updateList(this.get('list'), result as T[]));\n                            this.listing.next(this.get('list') || []);\n                        }\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), cache);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Query the API route for a sepecific item\n     * @param id ID of the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public show(id: string, query_params: HashMap = {}): Promise<T> {\n        let engine = false;\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n        }\n        const query = toQueryString(query_params);\n        const key = `show|${id}|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<T>((resolve, reject) => {\n                const url = `${this.route(engine)}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.get(url).subscribe(\n                    d => (result = this.process(d)),\n                    e => {\n                        reject(e);\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Open modal for new item\n     */\n    public openNewModal(prefill?: { [name: string]: any }): Promise<T> {\n        return new Promise((resolve, reject) => {\n            // this.parent.Overlay.open('edit-item', { data: { service: this, item: prefill } }, (e) => {\n            //     if (e.type === 'finish') {\n            //         resolve(e.data.item as T);\n            //     } else {\n            //         reject();\n            //     }\n            // });\n        });\n    }\n\n    /**\n     * Make post request for a new item to the service\n     * @param form_data Data to post to the server\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public add(form_data: HashMap, query_params: HashMap = {}): Promise<T> {\n        if (!this._promises.new_item) {\n            this._promises.new_item = new Promise<T>((resolve, reject) => {\n                const query = toQueryString(query_params);\n                const url = `${this.route(query_params.engine)}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.post(url, form_data).subscribe(\n                    d => (result = this.process(d)),\n                    e => {\n                        reject(e);\n                        this.analyticsEvent(`create-${this._name.toLowerCase()}-failed`);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.set('list', this.updateList(this.get('list'), [result]));\n                        this.analyticsEvent(`create-${this._name.toLowerCase()}-success`);\n                        this._promises.new_item = null;\n                    }\n                );\n            });\n        }\n        return this._promises.new_item;\n    }\n\n    /**\n     * Perform API task for the given item ID\n     * @param id ID of the item\n     * @param task_name Name of the task\n     * @param form_data Map of data to pass to the API\n     */\n    public task<U = any>(id: string, task_name: string, form_data: HashMap = {}): Promise<U> {\n        const query = toQueryString(form_data);\n        const key = `task|${id}|${task_name}|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<U>((resolve, reject) => {\n                const post_data = { ...form_data, id, _task: task_name };\n                const url = `${this.route(form_data.engine)}/${id}/${task_name}`;\n                let result = null;\n                this.http.post(url, post_data).subscribe(\n                    d => (result = d),\n                    e => {\n                        reject(e);\n                        this.analyticsEvent(\n                            `${this._name.toLowerCase()}-task-${task_name}-failed`,\n                            id\n                        );\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result as U);\n                        this.analyticsEvent(\n                            `${this._name.toLowerCase()}-task-${task_name}-success`,\n                            id\n                        );\n                        this.timeout(key, () => (this._promises[key] = null), 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Setup a poller for an API endpoint\n     * @param id Show request ID. Leave blank to poll on the query endpoint\n     * @param query_params Map of query paramaters to add to the polled URL\n     * @param delay Delay between each poll event\n     */\n    public poll(\n        id?: string,\n        query_params: HashMap = {},\n        delay: number = 5000\n    ): Observable<T | T[]> {\n        const key = `poll|${id || ''}|${toQueryString(query_params) || ''}`;\n        this.stopPoll(id, query_params);\n        this._subjects[key] = new Subject<T | T[]>();\n        this._observers[key] = this._subjects[key].asObservable();\n        const sub = this._subjects[key];\n        const query = { ...(query_params || {}), _poll: true };\n        if (id) {\n            this.show(id, query).then(\n                d => sub.next(d),\n                e => sub.error(e)\n            );\n            this.interval(\n                key,\n                () => {\n                    this.show(id, query).then(\n                        d => sub.next(d),\n                        e => sub.error(e)\n                    );\n                },\n                delay\n            );\n        } else {\n            this.query(query).then(\n                d => sub.next(d),\n                e => sub.error(e)\n            );\n            this.interval(\n                key,\n                () => {\n                    this.query(query).then(\n                        d => sub.next(d),\n                        e => sub.error(e)\n                    );\n                },\n                delay\n            );\n        }\n        return this._observers[key];\n    }\n\n    /**\n     * Destroy poller\n     * @param id ID of the polling event\n     * @param query_params Associtated query parameters of the poll request\n     */\n    public stopPoll(id?: string, query_params: HashMap = {}) {\n        const key = `poll|${id || ''}|${toQueryString(query_params) || ''}`;\n        if (this._subjects[key]) {\n            this._subjects[key].complete();\n            this._subjects[key] = null;\n            this._observers[key] = null;\n        }\n    }\n\n    /**\n     * Make put request for changes to the item with the given id\n     * @param id ID of the item being updated\n     * @param form_data New values for the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public update(id: string, form_data: HashMap, query_params: HashMap = {}): Promise<T> {\n        const key = `update|${id}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<T>((resolve, reject) => {\n                const query = toQueryString(query_params);\n                const url = `${this.route(query_params.engine)}/${id}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.put(url, form_data).subscribe(\n                    d => (result = this.process(d)),\n                    e => {\n                        reject(e);\n                        this.analyticsEvent(`update-${this._name.toLowerCase()}-failed`, id);\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.set(\n                            'list',\n                            this.updateList(this.removeItem(this.get('list'), { id } as any), [\n                                result\n                            ])\n                        );\n                        this.analyticsEvent(`update-${this._name.toLowerCase()}-success`, id);\n                        this._promises[key] = null;\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Make delete request for the given item\n     * @param id ID of item\n     */\n    public delete(id: string): Promise<void> {\n        const key = `delete|${id}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<void>((resolve, reject) => {\n                const url = `${this.route()}/${id}`;\n                this.http.delete(url).subscribe(\n                    _ => null,\n                    e => reject(e),\n                    () => {\n                        this.set('list', this.removeItem(this.get('list'), { id } as any));\n                        resolve();\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Add new API item from another service or API class\n     * @param id ID of the item/or service adding the new item\n     * @param data Raw API data for the new item\n     * @param type Adder type\n     */\n    public addFrom(\n        id: string,\n        data: HashMap,\n        type: 'class' | 'service' | 'other' = 'other'\n    ): string {\n        const new_item = this.process(data);\n        this.set('list', this.updateList(this.get('list'), [new_item]));\n        return (new_item as any).id;\n    }\n\n    /**\n     * Remove items with the given IDs from the list\n     * @param id ID of the item/or service remove the list of items\n     * @param remove_ids List of item IDs to remove\n     * @param type Remover type\n     */\n    public removeFrom(\n        id: string,\n        remove_ids: string[],\n        type: 'class' | 'service' | 'other' = 'other'\n    ) {}\n\n    /**\n     * Load initial data for the service\n     */\n    protected load(): Promise<void> {\n        return new Promise<void>(resolve => {\n            resolve();\n        });\n    }\n\n    /**\n     * Post analytics event for this service\n     * @param action Name of the action to post\n     */\n    protected analyticsEvent(action: string, label?: string) {\n        if (this.parent && this.parent.Analytics) {\n            this.parent.Analytics.event(\n                this._name,\n                `${this.parent.name.toLowerCase()}-${action}`,\n                label\n            );\n        }\n    }\n\n    /**\n     * Convert raw API data into a valid API Object\n     * @param raw_item Raw API data\n     */\n    protected process(raw_item: HashMap): T {\n        return raw_item as T;\n    }\n\n    /**\n     * Update recorded list of items\n     * @param old_list Old list of items\n     * @param list List of updated items\n     * @param compareFn Function to compare items to remove duplicates\n     */\n    protected updateList(\n        old_list: T[],\n        list: T[],\n        compareFn: (a: T, b: T) => boolean = this._compare\n    ): T[] {\n        if (!list || list.length === 0) {\n            return old_list;\n        }\n        const new_list: T[] = [];\n        const mixed_list = [...list, ...old_list];\n        if (!compareFn) {\n            compareFn = this._compare;\n        }\n        for (const item of mixed_list) {\n            const found = new_list.find(i => compareFn(i, item));\n            if (!found) {\n                new_list.push(item);\n            }\n        }\n        return new_list;\n    }\n\n    /**\n     * Remove the given item from the given list\n     * @param list List of items\n     * @param item Item to remove\n     * @param compareFn Function to compare items\n     */\n    protected removeItem(list: T[], item: T, compareFn?: (a: T, b: T) => boolean) {\n        const new_list = [];\n        if (!compareFn) {\n            compareFn = this._compare;\n        }\n        list.forEach(i => (compareFn(item, i) ? null : new_list.push(i)));\n        return new_list;\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { EngineUser } from '@placeos/ts-client';\n\nimport { BaseAPIService } from './base.service';\nimport { ComposerService } from '@placeos/composer';\n\nexport interface IComment {\n    id: string;\n    channel_id: string;\n    user_id: string;    // ACA User ID\n    user: EngineUser;\n    master_id: string;  // ID of master object\n    reply_to_id: string;\n    replies: IComment[];\n    name: string;       // User Staff Code\n    description: string;\n    other: any;\n    likes: string[];\n    dislikes: string[];\n    created_at: number;\n    updated_at: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeCommentsService extends BaseAPIService<IComment> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n    }\n\n    /**\n     * Task for adding the like state to comment\n     * @param id ID of the comment to like\n     * @param fields Query parameters\n     */\n    public like(id: string, fields?: { name: string, [fields: string]: any }) {\n        return this.task(id, 'like', fields);\n    }\n\n    /**\n     * Task for removing like state on the comment\n     * @param id ID of the comment to dislike\n     * @param fields Query parameters\n     */\n    public dislike(id: string, fields?: { name: string, [fields: string]: any }) {\n        return this.task(id, 'dislike', fields);\n    }\n\n    /**\n     * Task for removing like state on the comment\n     * @param id ID of the comment to dislike\n     * @param fields Query parameters\n     */\n    public removeVote(id: string, fields?: { name: string, [fields: string]: any }) {\n        return this.task(id, 'clear', fields);\n    }\n\n    /**\n     * Process list data for returned items\n     * @param list Raw item data from server\n     */\n    protected processList(list: any[]) {\n        const output_list = list.map(i => this.process(i));\n        this.processReplies(output_list);\n        return output_list;\n    }\n\n    /**\n     * Convert raw comment dat into local format\n     * @param cmt Raw comment data\n     */\n    protected process(cmt: any): IComment {\n        const comment: IComment = {\n            id: cmt.id,\n            channel_id: cmt.channel_id,\n            user_id: cmt.user_id,\n            user: null,\n            master_id: cmt.master_id,\n            reply_to_id: cmt.in_reply_to_id,\n            replies: [],\n            name: cmt.name,\n            description: cmt.description,\n            likes: cmt.likes,\n            other: {},\n            dislikes: cmt.dislikes,\n            created_at: cmt.created_at,\n            updated_at: cmt.updated_at,\n        };\n        if (comment.description[0] === '{') {\n            comment.other = JSON.parse(comment.description);\n            if (comment.other) {\n                comment.description = comment.other.comment;\n            }\n        }\n        this.parent.Users.query({ q: cmt.name }).then((list) => {\n            comment.user = list[0] || new EngineUser(cmt);\n        }, (err) => comment.user = new EngineUser(cmt));\n        return comment;\n    }\n\n    /**\n     * Link associated comments together\n     * @param cmt_list Array of comments\n     */\n    private processReplies(cmt_list: IComment[]) {\n        for (const i of cmt_list) {\n            if (i.reply_to_id) {\n                const id = i.reply_to_id;\n                for (const cmt of cmt_list) {\n                    if (cmt.id === id) {\n                        cmt.replies.push(i);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineSystem, EngineUser } from '@placeos/ts-client';\n\nimport { BaseAPIService } from './base.service';\n\nimport * as dayjs from 'dayjs';\n\nexport interface IEngineLogEntry {\n    id: string;\n    name: string;\n    notes?: string;\n    suspected?: boolean;\n    persisted?: boolean;\n    installed_device?: boolean;\n    ip?: string;\n    user_id?: string;\n    user?: EngineUser;\n    system_id?: string;\n    systems?: EngineSystem[];\n    display?: any;\n    created: number;\n    last_checked: number;\n    ended: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeLogsService extends BaseAPIService<IEngineLogEntry> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'log';\n        this._api_route = '/logs';\n    }\n\n    public process(raw_item: any) {\n        const item: IEngineLogEntry = {\n            id: raw_item.id,\n            name: raw_item.name,\n            notes: raw_item.notes,\n            suspected: raw_item.suspected,\n            persisted: raw_item.persisted,\n            installed_device: raw_item.installed_device,\n            ip: raw_item.ip,\n            user_id: raw_item.user_id,\n            system_id: raw_item.system_id,\n            systems: raw_item.systems,\n            user: raw_item.user,\n            display: {\n                started: dayjs(raw_item.created_at * 1000).format(),\n                ended: dayjs(raw_item.ended_at * 1000).format('MMM d, YYYY - hh:mm A')\n            },\n            created: raw_item.created_at * 1000,\n            last_checked: raw_item.last_checked * 1000,\n            ended: raw_item.ended_at * 1000\n        };\n        return item;\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from './base.service';\n\nimport * as dayjs from 'dayjs';\n\nexport interface IEngineSearchResult {\n    id: string;\n    name: string;\n    type: string;\n    created: number;\n    display?: any;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeSearchService extends BaseAPIService<IEngineSearchResult> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'search';\n        this._api_route = '/search';\n    }\n\n    public deleteItem() { return new Promise((rs, rj) => rj('No show for this service')); }\n    public updateItem() { return new Promise<any>((rs, rj) => rj('No show for this service')); }\n    public add() { return new Promise<any>((rs, rj) => rj('No show for this service')); }\n    public show() { return new Promise<any>((rs, rj) => rj('No show for this service')); }\n\n    protected process(raw_item: any) {\n        const item: IEngineSearchResult = {\n            id: raw_item.id,\n            name: raw_item.name,\n            type: raw_item.type,\n            created: raw_item.created_at * 1000\n        };\n        item.display = {\n            created: dayjs(item.created).format()\n        };\n        return item;\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from './base.service';\n\nexport interface IEngineStats {\n    id?: string;\n    name?: string;\n    period: string;\n    histogram?: { avg: number, count: number, max: number, min: number, sum: number }[];\n    interval?: number;\n    start?: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeStatsService extends BaseAPIService<IEngineStats> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'stats';\n        this._api_route = '/stats';\n    }\n\n    public connections(fields?: any) {\n        return this.show('connections', fields);\n    }\n\n    public panels(fields?: any) {\n        return this.show('panels', fields);\n    }\n\n    public offline(fields?: any) {\n        return this.show('offline', fields);\n    }\n\n    public triggers(fields?: any) {\n        return this.show('triggers', fields);\n    }\n\n    public ignore_list(fields?: any) {\n        return this.show('triggers', fields);\n    }\n\n    protected process(raw_item: any) {\n        const item: IEngineStats = {\n            period: raw_item.period_name,\n            interval: raw_item.interval,\n            histogram: raw_item.histogram || [],\n            start: raw_item.period_start * 1000\n        };\n        return item;\n    }\n\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from './base.service';\nimport { IEngineLogEntry } from './logs.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeSystemLogsService extends BaseAPIService<IEngineLogEntry> {\n\n    constructor(private _composer: ComposerService) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe((state) => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n            }\n        });\n        this._name = 'log';\n        this._api_route = '/system_logs';\n    }\n\n    protected process(raw_item: any) {\n        const item = this.parent.Logs.process(raw_item);\n        return item;\n    }\n\n}\n","import { ComposerService } from '@placeos/composer';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineUsersService, EngineUser, EngineUserQueryOptions } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { Md5 } from 'ts-md5/dist/md5';\n\nimport { FilterFn, DialogEvent } from '../../shared/utilities/types.utilities';\nimport { toQueryString } from 'src/app/shared/utilities/api.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from '../../overlays/confirm-modal/confirm-modal.component';\n\nimport * as dayjs from 'dayjs';\nimport * as Sentry from '@sentry/browser';\n\ntype ServiceItem = EngineUser;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackofficeUsersService extends EngineUsersService {\n    /** Name for a single user */\n    public readonly singular: string = 'user';\n    /** Behavior subject with the currently available list of users */\n    public readonly listing = new BehaviorSubject<ServiceItem[]>([]);\n    /** Active User */\n    public readonly user = new BehaviorSubject<ServiceItem>(null);\n    /** State of loading the user */\n    public readonly state = new BehaviorSubject<string>('');\n    /** Application Service */\n    public parent: any;\n    public readonly can_create: boolean = false;\n    public readonly can_edit: boolean = true;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        if (\n            !((this.user.getValue() || {}) as any).ui_theme &&\n            !localStorage.getItem('BACKOFFICE.theme') &&\n            window.matchMedia &&\n            window.matchMedia('(prefers-color-scheme: dark)').matches\n        ) {\n            return true;\n        }\n        return (\n            ((this.user.getValue() || {}) as any).ui_theme === 'dark' ||\n            localStorage.getItem('BACKOFFICE.theme') === 'dark'\n        );\n    }\n    public set dark_mode(state: boolean) {\n        if (state) {\n            localStorage.setItem('BACKOFFICE.theme', 'dark');\n            this.parent.set('dark_mode', state);\n            document.body.classList.add('dark-mode');\n        } else {\n            localStorage.setItem('BACKOFFICE.theme', 'light');\n            document.body.classList.remove('dark-mode');\n        }\n    }\n    /** Default method for filtering the available list */\n    private _filter_fn: FilterFn<ServiceItem> = _ => true;\n\n    constructor(\n        private _composer: ComposerService,\n        private http_unauth: HttpClient,\n        private _dialog: MatDialog\n    ) {\n        super(undefined);\n        const sub = this._composer.initialised.subscribe(state => {\n            if (state) {\n                this.http = this._composer.http;\n                sub.unsubscribe();\n                this.current().then(user => {\n                    this.user.next(user);\n                });\n            }\n        });\n    }\n\n    /**\n     * Get the available list of zones\n     * @param predicate Function to filter the zone list on\n     */\n    public list(predicate: FilterFn<ServiceItem> = this._filter_fn): ServiceItem[] {\n        return (this.listing.getValue() || []).filter(predicate);\n    }\n\n    public query(query_params?: EngineUserQueryOptions): Promise<ServiceItem[]> {\n        return new Promise((resolve, reject) => {\n            super.query(query_params).then(\n                list => {\n                    const old_list = this.list();\n                    const new_list = [...old_list, ...list];\n                    for (const item of new_list) {\n                        const found = new_list.findIndex(i => i.id === item.id && i !== item);\n                        if (found >= 0) {\n                            new_list.splice(new_list.indexOf(item), 1);\n                        }\n                    }\n                    this.listing.next(new_list);\n                    resolve(list);\n                },\n                e => reject(e)\n            );\n        });\n    }\n\n    public load(): Promise<void> {\n        console.log('Load user');\n        return new Promise(resolve => {\n            this.state.next('loading');\n            this.show('current').then(\n                user => {\n                    if (user) {\n                        this.user.next(user);\n                        this.parent.set('user', user);\n                        Sentry.configureScope(scope => scope.setUser({ email: user.email }));\n                        this.state.next('success');\n                        resolve();\n                        console.log('Dark mode:', this.dark_mode);\n                        this.dark_mode = this.dark_mode;\n                    } else {\n                        this.timeout('load', () => this.load().then(_ => resolve()), 600);\n                    }\n                },\n                () => this.timeout('load', () => this.load().then(_ => resolve()), 600)\n            );\n        });\n    }\n\n    /**\n     * Manually set the user access token\n     * @param token Token to set\n     * @param expiry Expiry time of the token\n     */\n    public setToken(token: string, expiry: number) {\n        if (!expiry) {\n            expiry = dayjs()\n                .add(7, 'd')\n                .valueOf();\n        }\n        const path = `${location.origin}${this.parent.setting('composer.route') ||\n            ''}/oauth-resp.html`;\n        if (localStorage) {\n            const client_id = Md5.hashStr(path);\n            localStorage.setItem(`${client_id}_access_token`, token);\n            localStorage.setItem(`${client_id}_expires_at`, `${expiry}`);\n            location.reload();\n        }\n        return path;\n    }\n\n    /**\n     * Login with given credentials\n     * @param fields Key value pairs of post parameters\n     */\n    public login(fields: any = {}) {\n        return new Promise((resolve, reject) => {\n            this.state.next('loading');\n            const query = toQueryString(fields);\n            let headers = new HttpHeaders();\n            headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n            this.http_unauth.post('/auth/signin', query, { headers }).subscribe(\n                (res: any) => {\n                    if (sessionStorage) {\n                        const clientId = Md5.hashStr(`${location.origin}/oauth-resp.html`);\n                        sessionStorage.setItem(`${clientId}_login`, 'true');\n                    }\n                    this._composer.auth.authorise().then(token => {\n                        resolve();\n                    });\n                },\n                err => {\n                    if (err.status >= 400) {\n                        this.state.next('error');\n                    } else {\n                        if (sessionStorage) {\n                            const clientId = Md5.hashStr(`${location.origin}/oauth-resp.html`);\n                            sessionStorage.setItem(`${clientId}_login`, 'true');\n                        }\n                        this._composer.auth.authorise();\n                    }\n                    reject();\n                },\n                () => this.load()\n            );\n        });\n    }\n\n    /**\n     * Logout from the application\n     */\n    public logout() {\n        this._composer.auth.logout();\n    }\n\n    /**\n     * Open modal for editing an item\n     * @param item Item to edit\n     */\n    public async openEditModal(item: EngineUser): Promise<string> {\n        return '';\n    }\n\n    /**\n     * Open confirmation modal for deleting an item\n     * @param item Item to delete\n     */\n    public askDelete(item: EngineUser): Promise<string> {\n        return new Promise((resolve, reject) => {\n            let complete = false;\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: 'Delete User?',\n                        content: `Are you sure you want to delete this user?`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'confirm_ref',\n                ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                    if (e.reason === 'done') {\n                        complete = true;\n                        item.delete().then(\n                            () => resolve(),\n                            () => reject('Request failed')\n                        );\n                    }\n                })\n            );\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineDebugEvent, EngineModule } from '@placeos/ts-client';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { BaseClass } from '../shared/globals/base.class';\nimport { HashMap } from '../shared/utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\n\nconst TERMINAL_COLOURS = {\n    debug: '\\u001b[34m',\n    verbose: '\\u001b[34m',\n    info: '\\u001b[32m',\n    warning: '\\u001b[33m',\n    error: '\\u001b[31m',\n    fatal: '\\u001b[31m',\n};\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EngineDebugService extends BaseClass {\n    /** List of the current state of events */\n    private _events = new BehaviorSubject<EngineDebugEvent[]>([]);\n    /** Observable for changes to the event listing */\n    private _event_obs = this._events.asObservable();\n    /** List of modules listening to debug events */\n    private _bound_modules: EngineModule[] = [];\n    /** Mapping of module IDs to display names */\n    private _module_names: HashMap<string> = {};\n    /** Whether debug console is enabled */\n    private _enabled: boolean;\n\n    /** Current list of debug events */\n    public get event_list(): EngineDebugEvent[] {\n        return this._events.getValue();\n    }\n\n    /** Observable for changes to the event listing */\n    public get events(): Observable<EngineDebugEvent[]> {\n        return this._event_obs;\n    }\n\n    /** Get terminal display string for all the events */\n    public get terminal_string(): string {\n        return this.event_list\n            .map(\n                (event) =>\n                    `${TERMINAL_COLOURS[event.level] || TERMINAL_COLOURS.debug}${dayjs().format(\n                        'h:mm A'\n                    )}, ${\n                        this._module_names[event.mod_id] || event.mod_id || '<UNKNOWN>'\n                    }, [${event.level.toUpperCase()}]\\u001b[0m ${event.message}`\n            )\n            .join('\\n');\n    }\n\n    /** Whether there are modules listening for debug messages */\n    public get is_listening(): boolean {\n        return this._enabled;\n    }\n\n    constructor(private _composer: ComposerService) {\n        super();\n        this._composer.realtime.debug_events.subscribe((event) => {\n            if (this._bound_modules.find((mod) => mod.id === event.mod_id)) {\n                const event_list = this.event_list;\n                event_list.push(event);\n                this._events.next(event_list);\n            }\n        });\n    }\n\n    /** Clear existing events */\n    public clearEvents() {\n        this._events.next([]);\n    }\n\n    /**\n     * Whether module is listening for debug events\n     */\n    public isListening(module: EngineModule): boolean {\n        return !!this._bound_modules.find((mod) => mod.id === module.id);\n    }\n\n    /**\n     * Start listening to debug events for the given module\n     * @param module Module to start listening to\n     * @param module_name Display name for the module\n     */\n    public bind(module: EngineModule, module_name: string) {\n        if (module) {\n            const parts = module_name.split('_');\n            const index = +parts.splice(parts.length - 1, 1);\n            const options = {\n                sys: module.system_id,\n                mod: module.id,\n                index,\n                name: 'debug',\n            };\n            this._enabled = true;\n            this._composer.realtime.debug(options).then(() => {\n                this.subscription(`debug_${module.id}`, () =>\n                    this._composer.realtime.ignore(options)\n                );\n                this._bound_modules.push(module);\n                this._module_names[module.id] = module_name;\n            });\n        }\n    }\n\n    /**\n     * Stop listening to debug events for module\n     * @param module Module to stop listening to\n     */\n    public unbind(module: EngineModule) {\n        if (module) {\n            this.unsub(`debug_${module.id}`);\n            this._bound_modules = this._bound_modules.filter((mod) => mod.id !== module.id);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from '../shared/utilities/types.utilities';\nimport { unique } from '../shared/utilities/general.utilities';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            if (\n                document.activeElement &&\n                (document.activeElement.tagName.toLowerCase() === 'input' ||\n                    document.activeElement.tagName.toLowerCase() === 'textarea')\n            ) {\n                return;\n            }\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                this.setKeyState(code, ++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.keydown_states[code]) {\n                this.keydown_states[code].next(null);\n            }\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = combo instanceof Array ? combo : combo.split('+');\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            this.setKeyState(last_key, null);\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe(count => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) {\n                                return;\n                            }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (\n            code.indexOf('alt') >= 0 ||\n            code.indexOf('shift') >= 0 ||\n            code.indexOf('control') >= 0\n        ) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            key_list.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n\n    /**\n     * Update the state of a keycode\n     * @param code Code of the key\n     * @param value New state value for key\n     */\n    private setKeyState(code: string, value: number = null) {\n        if (!this.keydown_states[code]) {\n            this.keydown_states[code] = new BehaviorSubject(null);\n            this.keydown_observers[code] = this.keydown_states[code].asObservable();\n        }\n        this.keydown_states[code].next(value);\n    }\n}\n","import { Injectable, ErrorHandler } from '@angular/core';\n\nimport * as Sentry from '@sentry/browser';\n\n@Injectable()\nexport class SentryService implements ErrorHandler {\n    /**\n     * Handle error thrown by Angular\n     * @param error Angular error\n     */\n    public handleError(error) {\n        Sentry.captureException(error.originalError || error);\n        throw error;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BaseClass } from '../shared/globals/base.class';\nimport { HashMap } from '../shared/utilities/types.utilities';\nimport { VERSION } from 'src/environments/version';\nimport { getItemWithKeys } from '../shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\n\ninterface SettingsMap {\n    api: HashMap;\n    local: HashMap;\n    session: HashMap;\n    [block: string]: HashMap;\n}\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SettingsService extends BaseClass {\n\n    /** Map of settings */\n    private _settings: SettingsMap = { api: {}, local: {}, session: {} };\n    /** Store for promises */\n    private _promises: { [name: string]: Promise<any> } = {};\n    /** Name of the application */\n    private _app_name = 'ACA';\n\n    constructor(private http: HttpClient) {\n        super();\n        const now = dayjs();\n        const build = dayjs(VERSION.time);\n        const built = now.isSame(build, 'd') ? `Today at ${build.format('h:mmA')}` : build.format('D MMM YYYY, h:mmA');\n        this.log('CORE', `${VERSION.core_version}`, null, 'debug', true);\n        this.log('APP', `${VERSION.version} - ${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        await this.loadFromFile('api');\n        this.loadStore('local', localStorage);\n        this.loadStore('session', sessionStorage);\n        if (this._settings.api.debug) {\n            window.debug = true;\n        }\n        if (this._settings.api.app && this._settings.api.app.name) {\n            this._app_name = this._settings.api.app.name;\n        }\n        this.log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() { return this._app_name; }\n\n    /**\n     * Log data to the browser console\n     * @param type Type of message\n     * @param msg Message body\n     * @param args array of argments to log to the console\n     * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n     * @param force Whether to force message to be emitted when debug is disabled\n     */\n    public log(type: string, msg: string, args?: any, stream: ConsoleStream = 'debug', force: boolean = false) {\n        if (window.debug || force) {\n            const colors: string[] = ['color: #E91E63', 'color: #3F51B5', 'color: default'];\n            if (args) {\n                console[stream](`%c[${this.app_name}]%c[${type}] %c${msg}`, ...colors, args);\n            } else {\n                console[stream](`%c[${this.app_name}]%c[${type}] %c${msg}`, ...colors);\n            }\n        }\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get(key: string): any {\n        const keys = key.split('.');\n        let value = null;\n        if (keys[0] === 'session') {\n            keys.shift();\n            value = getItemWithKeys(keys, this._settings.session);\n        } else if (keys[0] === 'local') {\n            keys.shift();\n            value = getItemWithKeys(keys, this._settings.local);\n        } else {\n            value = getItemWithKeys(keys, this._settings.api) ||\n                getItemWithKeys(keys, this._settings.session) ||\n                getItemWithKeys(keys, this._settings.local);\n        }\n        return value;\n    }\n\n    /**\n     * Load settings from the given Storage object\n     * @param name Root key for the settings\n     * @param store Storage item to add to the load into the settings\n     */\n    private loadStore(name: string, store: Storage) {\n        if (store) {\n            for (let i = 0; i < store.length; i++) {\n                const key = store.key(i);\n                const item = store.getItem(key);\n                if (item) { this._settings[name][key] = item; }\n            }\n        }\n    }\n\n    /**\n     * Load setting data from a file\n     * @param name Namespace to add file data to\n     * @param file URL to file to load setting data from\n     */\n    private async loadFromFile(name: string, file: string = 'assets/settings.json', tries: number = 0) {\n        if (file !== 'assets/settings.json' && tries > 5) {\n            return Promise.resolve();\n        }\n        const file_name = file.split('/')[file.split('/').length - 1];\n        console.log('File name:', file_name, window[file_name]);\n        // Check if data has been loaded into the global space\n        if (window[file_name] instanceof Object) {\n            this._settings[name] = { ...(this._settings[name] || {}), ...window[file_name] };\n            return Promise.resolve();\n        }\n        const key = `load|${name}|${file}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<void>((resolve, reject) => {\n                this.http.get(file).subscribe(\n                    (data) => {\n                        this._settings[name] = { ...(this._settings[name] || {}), ...(data || {}) };\n                    }, (e) => {\n                        this.log('Settings', `Failed to load settings from \"${file}\"`);\n                        this._promises[key] = null;\n                        this.timeout(`load_${file_name}`, () => {\n                            this.loadFromFile(name, file, ++tries).then(() => resolve());\n                        }, 2000);\n                    }, () => resolve()\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    EngineResource,\n    EngineSystem,\n    EngineZone,\n    EngineDriver,\n    EngineModule\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { ApplicationService } from '../../services/app.service';\nimport { EngineServiceLike } from '../utilities/types.utilities';\nimport { first } from 'rxjs/operators';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'app-base-root-component',\n    template: '',\n    styles: []\n})\nexport class BaseRootComponent<T = EngineResource<any>> extends BaseDirective implements OnInit {\n    /** Name of the API service assoicated with the  */\n    public readonly service_name: string;\n    /** ID of the item to render */\n    public id: string;\n    /** Item to render on the UI */\n    public item: T;\n    /** ID of the active tab in the item space */\n    public tab: string;\n    /** Whether the active item data is being loaded */\n    public loading_item: boolean;\n    /** Total number of items in the list */\n    public total: number;\n    /** Whether the sidebar should be shown on a mobile device */\n    public show_sidebar: boolean;\n    /** Modal Reference */\n    public modal_ref: MatDialogRef<any>;\n    /** Service to get data from */\n    public service: EngineServiceLike;\n\n    /** Service for the active module */\n    public get module(): EngineServiceLike {\n        return this.service;\n    }\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router\n    ) {\n        super();\n        this.service_name = 'Systems';\n        this.service = this._service.Systems;\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(params => {\n                if (params.has('id') && params.get('id') !== '-') {\n                    this.loading_item = true;\n                    const id = decodeURIComponent(params.get('id'));\n                    if (this._service.get('BACKOFFICE.active_item_id') !== id) {\n                        this.id = id;\n                        this.loadItem();\n                    } else {\n                        this.setActiveItem(this._service.get('BACKOFFICE.active_item'));\n                    }\n                } else if (params.has('id') && params.get('id') === '-') {\n                    this.id = '-';\n                    this.setActiveItem(null);\n                }\n                this.timeout('sidebar', () => (this.show_sidebar = !this.id));\n            })\n        );\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this._service.title = this.service_name;\n            this.init();\n        });\n\n        this.subscription(\n            'new_item',\n            this._service.Hotkeys.listen(['KeyN'], () => this.newItem())\n        );\n        this.subscription(\n            'edit_item',\n            this._service.Hotkeys.listen(['KeyE'], () => this.editItem())\n        );\n        this.subscription(\n            'delete_item',\n            this._service.Hotkeys.listen(['KeyD'], () => this.deleteItem())\n        );\n    }\n\n    public init() {}\n\n    /**\n     * Handler events from the sidebar\n     * @param event Sidebar event\n     */\n    public sidebarEvent(event: any) {\n        this.timeout(\n            'sidebar',\n            () => {\n                if (event && event.type === 'new') {\n                    this.newItem();\n                } else {\n                    this.toggleSidebar();\n                }\n            },\n            20\n        );\n    }\n\n    /**\n     * Update the state of showing the sidebar\n     * @param state New show state\n     */\n    public toggleSidebar() {\n        this.timeout('sidebar', () => (this.show_sidebar = !this.show_sidebar));\n    }\n\n    /**\n     * Handle actions on the active item\n     * @param event User action\n     */\n    public itemEvent(event: any) {\n        if (!event) {\n            return;\n        }\n        if (event.type === 'tab' && this.item && event.value) {\n            this._router.navigate([], {\n                relativeTo: this._route,\n                queryParams: { tab: event.value },\n                queryParamsHandling: 'merge'\n            });\n        } else if (event.type === 'new') {\n            this.newItem();\n        } else if (event.type === 'copy') {\n            this.newItem(true);\n        } else if (event.type === 'edit') {\n            this.editItem();\n        } else if (event.type === 'delete' && this.item) {\n            this.deleteItem();\n        }\n    }\n\n    /**\n     * Open create modal for a new item\n     */\n    protected newItem(copy: boolean = false) {}\n\n    /**\n     * Open edit modal for active item\n     */\n    protected editItem() {}\n\n    protected deleteItem() {}\n\n    protected loadValues() {}\n\n    /**\n     * Load the data for the active item\n     */\n    protected loadItem() {\n        this.timeout('loading', () => (this.loading_item = true), 10);\n        this.service.show(this.id, { complete: true }).then(\n            item => this.setActiveItem(item),\n            () => {\n                this._service.notifyError(\n                    `Failed to load data for ${this.service._name} \"${this.id}\"`\n                );\n                this.loading_item = false;\n                this._service.navigate([this.service._api_route]);\n            }\n        );\n    }\n\n    protected setActiveItem(new_item: T) {\n        this.item = new_item;\n        this._service.set('BACKOFFICE.active_item_id', this.id);\n        this._service.set('BACKOFFICE.active_item', this.item);\n        if (this.item) {\n            this.subscription(\n                'item_changes',\n                (this.item as any).changeEvents.subscribe(event => {\n                    if (event.type === 'item_saved') {\n                        this.setActiveItem(event.metadata as any);\n                    }\n                })\n            );\n            this.loadValues();\n            this.loadSettings();\n        }\n        this.timeout('item', () => (this.loading_item = false));\n    }\n\n    protected loadSettings(): void {\n        if (\n            this.item instanceof EngineSystem ||\n            this.item instanceof EngineZone ||\n            this.item instanceof EngineDriver ||\n            this.item instanceof EngineModule\n        ) {\n            this._service.set('loading_settings', true);\n            this._service.EngineSettings.query({ parent_id: this.item.id }).then(\n                list => {\n                    this._service.set('loading_settings', false);\n                    for (const settings of list) {\n                        (this.item as any).settings[settings.encryption_level] = settings;\n                    }\n                },\n                err => {\n                    this._service.set('loading_settings', false);\n                    this._service.notifyError(\n                        `Error loading settings. Error: ${JSON.stringify(err.response || err.message || err)}`\n                    );\n                }\n            );\n        }\n    }\n}\n","import {\n    Component,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    Input,\n    HostListener,\n    OnInit\n} from '@angular/core';\nimport { MatMenuTrigger, MatMenuPanel } from '@angular/material/menu';\n\nimport { BaseDirective } from '../../globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: '[context-menu]',\n    templateUrl: './context-menu.template.html',\n    styleUrls: ['./context-menu.styles.scss']\n})\nexport class ContextMenuComponent extends BaseDirective implements OnInit, AfterViewInit {\n    /** List of context menu items */\n    @Input('context-menu') public menu: MatMenuPanel;\n    /** Offset of the context menu on the x axis */\n    @Input() public offset_x = 0;\n    /** Offset of the context menu on the y axis */\n    @Input() public offset_y = 0;\n    /** Top position of the menu */\n    public top: number;\n    /** Whether menu show to the left of the cursor */\n    public right: boolean;\n    /** Whether the context menu should be shown */\n    public show: boolean;\n    /** Location of the menu */\n    public position: { top: number; left: number };\n\n    @ViewChild('container', { static: true }) private container: ElementRef<HTMLDivElement>;\n    @ViewChild(MatMenuTrigger, { static: true }) private trigger: MatMenuTrigger;\n\n    @HostListener('contextmenu', ['$event']) public onEvent(event) {\n        event.preventDefault();\n        this.position = { top: event.clientY + this.offset_y, left: event.clientX + this.offset_x };\n        if (this.trigger) {\n            this.trigger.openMenu();\n        }\n        this.timeout('update_position', () => this.updatePosition(), 50);\n    }\n\n    constructor(private _service: ApplicationService, private _element: ElementRef<HTMLElement>) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.position = { top: 0, left: 0 };\n    }\n\n    public ngAfterViewInit() {\n        setTimeout(() => this.updatePosition(), 10);\n    }\n\n    /** Update the position of the context menu */\n    public updatePosition() {\n        if (!this.container || !this.container.nativeElement) {\n            return setTimeout(() => this.updatePosition(), 50);\n        }\n        const box = this.container.nativeElement.getBoundingClientRect();\n        this.right = false;\n        this.top = 0;\n        if (window.innerHeight < box.bottom) {\n            this.top = window.innerHeight - (box.bottom + 5);\n        }\n        this.right = box.right - 5 > window.innerWidth;\n    }\n}\n","<ng-content></ng-content>\n<div\n    class=\"context-placeholder\"\n    #container\n    [style.top]=\"position.top + 'px'\"\n    [style.left]=\"position.left + 'px'\"\n    [matMenuTriggerFor]=\"menu\"\n>\n</div>\n","import { Component, OnInit, forwardRef, Input, ViewChild, LOCALE_ID, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatMenuTrigger } from '@angular/material/menu';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\nimport * as dayjs from 'dayjs';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n    selector: 'a-date-field',\n    templateUrl: './date-field.component.html',\n    styleUrls: ['./date-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateFieldComponent extends BaseDirective implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = dayjs().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: number;\n    /** Pipe for formatting date strings */\n    private date_pipe: DatePipe;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    @ViewChild(MatMenuTrigger, { static: true }) private _trigger: MatMenuTrigger;\n\n    /** First allowed date on the calendar */\n    public get from(): number {\n        return this._from || dayjs().startOf('d').valueOf();\n    }\n    /** Current date value */\n    public get until(): number {\n        return this._to || dayjs().endOf('d').add(1, 'y').valueOf();\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return this.date_pipe.transform(dayjs(this.date).toDate(), 'DD MMM YYYY');\n    }\n\n    /** Whether date picker is open */\n    public get is_open(): boolean {\n        return this._trigger.menuOpen;\n    }\n\n    constructor(@Inject(LOCALE_ID) private _locale: string) {\n        super();\n        this.date_pipe = new DatePipe(this._locale);\n    }\n\n    public ngOnInit() {\n        this.date = dayjs().valueOf();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        this.date = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value;\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /** Set the state of the tooltip to closed after delay */\n    public closeDatePicker() {\n        this._trigger.closeMenu();\n    }\n\n    /** Set the state of the tooltip to closed after delay */\n    public openDatePicker() {\n        this._trigger.openMenu();\n    }\n}\n","<div\n    class=\"date-field\"\n    role=\"button\"\n    form-field\n    tabindex=\"0\"\n    [class.active]=\"is_open\"\n    [attr.disabled]=\"disabled\"\n    (keydown.enter)=\"openDatePicker()\"\n    [matMenuTriggerFor]=\"appMenu\"\n>\n    <div class=\"display\">{{ date_string }}</div>\n    <div class=\"icon\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: is_open ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n<mat-menu #appMenu=\"matMenu\">\n    <div mat-menu-item class=\"date-picker\" (click)=\"$event.stopPropagation()\">\n        <a-date-picker\n            [ngModel]=\"date\"\n            [options]=\"{ from: from, to: until }\"\n            (ngModelChange)=\"setValue($event); closeDatePicker()\"\n        ></a-date-picker>\n    </div>\n</mat-menu>\n","import { Component, OnInit, forwardRef, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, map, catchError } from 'rxjs/operators';\n\nimport { EngineResource, EngineModule, EngineDriverRole } from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { EngineServiceLike, HashMap, Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'item-search-field',\n    templateUrl: './item-search-field.component.html',\n    styleUrls: ['./item-search-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ItemSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ItemSearchFieldComponent<T extends Identity = any> extends BaseDirective\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Limit available options to these */\n    @Input() public options: T[];\n    /** Function for filtering out options */\n    @Input() public exclude: (_: T) => boolean;\n    /** Minimum number of characters needed to start a server query */\n    @Input('minLength') public min_length = 0;\n    /** Whether item list is loading */\n    @Input() public loading: boolean;\n    /** Service used for searching items */\n    @Input() public service: EngineServiceLike;\n    /** Currently selected item */\n    public active_item: T;\n    /** Item list to display */\n    public item_list: T[];\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** List of items from an API search */\n    public search_results$: Observable<T[]>;\n    /** Subject holding the value of the search */\n    public readonly search$ = new Subject<string>();\n    /** Form control on change handler */\n    private _onChange: (_: T) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: T) => void;\n\n    /** Map of item names to their IDs */\n    public get item_name(): HashMap<string> {\n        const map = {};\n        const list = this.item_list || [];\n        for (let item of list) {\n            if (item instanceof EngineModule) {\n                const detail =\n                    item.role === EngineDriverRole.Service\n                        ? item.uri\n                        : item.role === EngineDriverRole.Logic\n                        ? item.control_system_id\n                        : item.ip;\n                map[item.id] = `${item.name || '<Unnamed>'} <span class=\"small\">${detail}<span>`;\n            } else {\n                map[item.id] = (item as any).custom_name || item.name || '<Unnamed>';\n            }\n        }\n        return map;\n    }\n\n    public ngOnInit(): void {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap((query) => {\n                this.loading = true;\n                return this.options && this.options.length > 0\n                    ? Promise.resolve(this.options)\n                    : !this.min_length || query.length >= this.min_length\n                    ? (this.service.query({ q: query || '', cache: 5 * 1000 }) as Promise<T[]>)\n                    : Promise.resolve([]);\n            }),\n            catchError((_) => of([])),\n            map((list: T[]) => {\n                this.loading = false;\n                const search = (this.search_str || '').toLowerCase();\n                console.log('List:', list);\n                return list.filter((item: any) => {\n                    const match =\n                        item.name.toLowerCase().indexOf(search) >= 0 ||\n                        (item.email || '').toLowerCase().indexOf(search) >= 0;\n                    return match && (this.exclude ? !this.exclude(item) : true);\n                });\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.item_list = list))\n        );\n        this.timeout('init', () => {\n            this.search$.next('');\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.service) {\n            this.search$.next('');\n        }\n    }\n\n    /**\n     * Reset the search string back to the name of the active item\n     */\n    public resetSearchString() {\n        this.timeout(\n            'value',\n            () => {\n                if (this.active_item) {\n                    this.search_str = this.active_item.name || this.search_str;\n                }\n            },\n            10\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: T): void {\n        this.active_item = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T) {\n        console.log('Value:', value);\n        this.active_item = value;\n        this.resetSearchString();\n    }\n\n    /**\n     * Registers a callback function that is called when the\n     * control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: T) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API\n     * on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: T) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div class=\"item-search-field\" form-field>\n    <mat-form-field appearance=\"outline\">\n        <input\n            matInput\n            name=\"item-search\"\n            [(ngModel)]=\"search_str\"\n            (ngModelChange)=\"search$.next($event)\"\n            [placeholder]=\"'Search for ' + (service?.name || service?._name || '') + '...'\"\n            i18n-placeholder\n            [matAutocomplete]=\"auto\"\n            (focus)=\"search_str = ''; search$.next(' ')\"\n            (blur)=\"resetSearchString()\"\n        />\n        <div class=\"prefix\" matPrefix>\n            <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'search' }\"></app-icon>\n        </div>\n        <div class=\"suffix\" matSuffix *ngIf=\"loading\">\n            <mat-spinner diameter=\"16\"></mat-spinner>\n        </div>\n    </mat-form-field>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"setValue($event.option.value)\">\n        <mat-option *ngFor=\"let option of item_list\" [value]=\"option\">\n            <div class=\"name\" [innerHTML]=\"item_name[option.id] | sanitize\"></div>\n            <div class=\"email\">{{ option.id }}{{ option.extra ? ' - ' + option.extra : '' }}</div>\n        </mat-option>\n    </mat-autocomplete>\n</div>\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'object-list-field',\n    templateUrl: './object-list-field.component.html',\n    styleUrls: ['./object-list-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ObjectListFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class ObjectListFieldComponent extends BaseDirective implements ControlValueAccessor {\n    /** List of fields that can be populated for each object */\n    @Input() public fields: string[];\n    /** List of objects */\n    public active_list: HashMap[] = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: HashMap[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: HashMap[]) => void;\n\n    /** Add a new item the the active list */\n    public addRow() {\n        if (!this.active_list) {\n            this.active_list = [];\n        }\n        this.active_list.push({});\n        this.setValue(this.active_list);\n    }\n\n    /**\n     * Remove item from the active list\n     * @param item Item to remove\n     */\n    public removeRow(item: HashMap) {\n        const index = this.active_list.indexOf(item);\n        if (index >= 0) {\n            this.active_list.splice(index, 1);\n        }\n        this.setValue(this.active_list);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: HashMap[]): void {\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: HashMap[]) {\n        this.active_list = value;\n    }\n\n    /**\n     * Registers a callback function that is called when the\n     * control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: HashMap[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms\n     * API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: HashMap[]) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div class=\"object-list\" *ngIf=\"fields && fields.length\">\n    <div class=\"header row\" *ngIf=\"active_list && active_list.length\">\n        <div class=\"field\" *ngFor=\"let field of fields\" [attr.name]=\"field\">\n            {{ field }}\n        </div>\n        <div class=\"gap\"></div>\n    </div>\n    <div class=\"row\" *ngFor=\"let item of active_list\">\n        <div class=\"field\" *ngFor=\"let field of fields\" [attr.name]=\"field\">\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    [name]=\"field\"\n                    [placeholder]=\"field\"\n                    i18n-placeholder\n                    [(ngModel)]=\"item[field]\"\n                    (ngModelChange)=\"setValue(active_list)\"\n                />\n            </mat-form-field>\n        </div>\n        <button mat-icon-button (tapped)=\"removeRow(item)\">\n            <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n        </button>\n    </div>\n    <div class=\"row footer\">\n        <button mat-button type=\"button\" (tapped)=\"addRow()\">\n            <div class=\"contents\">\n                <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n                <div class=\"text\" i18n=\"@@newItem\">New Item</div>\n            </div>\n        </button>\n    </div>\n</div>\n","/// <reference path=\"../../../../../../node_modules/monaco-editor/monaco.d.ts\" />\n\nimport {\n    Component,\n    forwardRef,\n    ViewChild,\n    ElementRef,\n    OnInit,\n    Input,\n    OnDestroy,\n    SimpleChanges,\n    OnChanges\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n// import * as monaco_yaml from 'monaco-editor/dev/vs/basic-languages/yaml/yaml.js';\n\n@Component({\n    selector: 'settings-form-field',\n    templateUrl: './settings-field.component.html',\n    styleUrls: ['./settings-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SettingsFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class SettingsFieldComponent extends BaseDirective\n    implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\n    /** Whether form field is readonly */\n    @Input() public readonly = true;\n    /** Resize */\n    @Input() public resize: boolean;\n    /** Input language for syntax highlighting and error checking */\n    @Input() public lang = 'yaml';\n    /** Current value for the */\n    public settings_string = ' ';\n    /** Form control on change handler */\n    private _onChange: (_: string) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: string) => void;\n\n    /** Reference to the element container the monaco editor */\n    @ViewChild('editor', { static: true }) private element: ElementRef;\n    /** API object for the monaco editor */\n    private editor: any;\n\n    public ngOnInit(): void {\n        this.createEditor();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.readonly && this.editor) {\n            this.editor.updateOptions({ readOnly: !!this.readonly });\n        }\n        if (changes.lang && this.editor) {\n            this.editor.updateOptions({ language: this.lang || 'yaml' });\n        }\n        if (changes.resize) {\n            this.resizeEditor();\n        }\n    }\n\n    public ngOnDestroy() {\n        if (this.editor) {\n            this.editor.dispose();\n            this.editor = null;\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.settings_string = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: string) {\n        this.settings_string = `${value}`;\n        if (this.editor) {\n            if (this.readonly) {\n                this.editor.updateOptions({ readOnly: false });\n                this.editor.setValue(this.settings_string);\n                this.editor.updateOptions({ readOnly: true });\n            } else {\n                this.editor.setValue(this.settings_string);\n            }\n        }\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: string) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: string) => void): void {\n        this._onTouch = fn;\n    }\n\n    /** Update sizing of the editor after window has resized */\n    public resizeEditor() {\n        this.timeout('resize', () => this.createEditor(), 100);\n    }\n\n    /**\n     * Create and render the monaco editor to the component\n     */\n    private createEditor() {\n        if (this.element && this.element.nativeElement) {\n            if (this.editor) {\n                this.editor.dispose();\n                this.editor = null;\n            }\n            // monaco.languages.register(monaco_yaml);\n            this.editor = monaco.editor.create(this.element.nativeElement, {\n                value: this.settings_string || '',\n                language: this.lang || 'yaml',\n                fontFamily: `\"Fira Code\", monospace`,\n\n                lineNumbers: 'on',\n                roundedSelection: false,\n                scrollBeyondLastLine: false,\n                readOnly: this.readonly,\n                theme: 'vs-dark'\n            });\n            this.editor.onDidChangeModelContent(() => {\n                this.setValue(this.editor.getValue());\n            });\n        }\n    }\n}\n","<div class=\"settings-field\" widget (window:resize)=\"resizeEditor()\">\n    <div class=\"editor\" #editor></div>\n</div>\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    ViewChildren,\n    ElementRef,\n    QueryList,\n    SimpleChanges,\n    forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineModuleFunction, HashMap, TriggerFunction, EngineSystem } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../../../services/app.service';\nimport { BaseDirective } from '../../../globals/base.directive';\nimport { ViewResponseModalComponent } from 'src/app/overlays/view-response-modal/view-response-modal.component';\n\ninterface EngineModuleLike {\n    id: string;\n    name: string;\n    module: string;\n    index: number;\n}\n\ninterface ModuleFunction extends EngineModuleFunction {\n    name?: string;\n}\n\n@Component({\n    selector: 'system-exec-field',\n    templateUrl: './system-exec-field.template.html',\n    styleUrls: ['./system-exec-field.styles.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => SystemExecFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class SystemExecFieldComponent extends BaseDirective\n    implements OnChanges, ControlValueAccessor {\n    /** ID of the system to execute command on */\n    @Input() public system: EngineSystem;\n    /** Whether the selected function is executable from this field */\n    @Input() public executable = true;\n    /** Toggle for activating a refresh of the module list */\n    @Input() public refresh: boolean;\n    /** Emitter for exec results */\n    @Output() public event = new EventEmitter();\n    /** List of modules of the system */\n    public devices: EngineModuleLike[] = [];\n    /** List of available functions for the active module  */\n    public methods: ModuleFunction[] = [];\n    /** Currently selected module */\n    public active_module: EngineModuleLike;\n    /** Current selected module function */\n    public active_method: ModuleFunction;\n    /** Mapping or errors to field names */\n    public error: HashMap<boolean> = {};\n    /** Whether the selected function's params are valid */\n    public fields_valid: boolean;\n    /** Mapping of function arguments to values */\n    public fields: HashMap = {};\n    /** Index of the active function param field */\n    public active_field: number;\n    /** Current location with the input fields for function params */\n    public field_pos: number;\n    /** Previous location with the input fields for function params */\n    public last_location: number;\n    /** Current value of the active input field */\n    public field_value: string;\n    /** Parameter list for the active function */\n    public param_list: [string, string, any?][] = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: TriggerFunction) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: TriggerFunction) => void;\n\n    /** List of elements containing arguments */\n    @ViewChildren('argument') private arg_list: QueryList<ElementRef>;\n\n    /** Mapping of function execution details */\n    public get function_value(): TriggerFunction {\n        if (!this.fields_valid) {\n            return null;\n        }\n        const args = this.processArguments();\n        const method = this.active_method ? this.active_method : { order: [], params: {}, name: '' };\n        return {\n            mod: `${this.active_module.module}_${this.active_module.index}`,\n            method: method.name,\n            args: args.reduce((map, arg, index) => {\n                map[method.order[index]] = arg;\n                return map;\n            }, {})\n        };\n    }\n\n    public get placeholder(): HashMap<string> {\n        const map = {};\n        for (const arg of this.param_list) {\n            map[arg[0]] = (arg[2] !== undefined ? '[' + arg[0] + (arg[2] ? '=' + arg[2] : '') + ']' : arg[0])\n        }\n        return map;\n    }\n\n    constructor(private service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.system || changes.refresh) {\n            this.devices = [];\n            this.loadModules();\n        }\n    }\n\n    /**\n     * Load the available modules for the active system\n     * @param offset Page offset of the list\n     */\n    public loadModules(offset: number = 0) {\n        if (this.system) {\n            this.service.Modules.query({ control_system_id: this.system.id, offset, limit: 500, complete: true } as any).then(\n                list => {\n                    this.devices = (list || []).filter(device => device.running).map(device => {\n                        const module_name =\n                            device.custom_name ||\n                            device.name\n                        return {\n                            id: device.id,\n                            name: device.name,\n                            module: module_name,\n                            index: 1\n                        };\n                    });\n                    this.devices.sort(\n                        (a, b) =>\n                            this.system.modules.indexOf(a.id) - this.system.modules.indexOf(b.id)\n                    );\n                    this.devices.forEach(\n                        device =>\n                            (device.index =\n                                this.devices\n                                    .filter(d => d.module === device.module)\n                                    .findIndex(mod => mod.id === device.id) + 1)\n                    );\n                    if (\n                        this.active_module &&\n                        !(this.devices || []).find(mod => mod.id === this.active_module.id)\n                    ) {\n                        this.devices.unshift(this.active_module);\n                    }\n                },\n                () => null\n            );\n        }\n    }\n\n    /**\n     * Load the available functions for the given module\n     * @param item Module to grab function list for\n     */\n    public loadFunctions(item: EngineModuleLike) {\n        this.methods = null;\n        this.fields = {};\n        this.active_module = item;\n        this.service.Systems.functionList(this.system.id, item.module, item.index).then(\n            list => {\n                if (list) {\n                    this.methods = Object.keys(list).map(i => ({ name: i, ...list[i] }));\n                    this.setMethod(this.active_method.name, this.fields);\n                }\n            },\n            () => {\n                this.service.notifyInfo('No executable methods returned.');\n            }\n        );\n    }\n\n    public selectFunction(fn: ModuleFunction) {\n        this.active_method = fn;\n        if (fn) {\n            this.param_list = Object.keys(this.active_method.params).map(\n                i => [i, ...this.active_method.params[i]] as any\n            );\n        }\n        this.checkFields();\n    }\n\n    /**\n     * Validate the arguments are valid JSON types\n     */\n    public checkFields() {\n        // Check fields\n        this.fields_valid = !!this.active_method;\n        this.error = {};\n        if (this.active_method) {\n            const params = this.param_list;\n            for (const arg of params || []) {\n                if (arg[2] === undefined && !this.fields[arg[0]]) {\n                    this.fields_valid = false;\n                    return;\n                } else {\n                    try {\n                        JSON.parse(`[${this.fields[arg[0]] || 'null'}]`);\n                    } catch (e) {\n                        this.error[arg[0]] = true;\n                        this.fields_valid = false;\n                    }\n                }\n            }\n        }\n        // Update field state\n        const args = this.arg_list.toArray();\n        if (args && args.length > 0) {\n            const current = args[this.active_field];\n            if (current) {\n                this.field_pos = current.nativeElement.selectionEnd;\n                this.timeout('field', () => (this.field_value = current.nativeElement.value));\n            }\n        }\n        this.setValue(this.function_value);\n    }\n\n    /**\n     * Move cursor to the next argument field\n     */\n    public nextField(e) {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        if (this.arg_list) {\n            const args = this.arg_list.toArray();\n            const current = args[this.active_field].nativeElement;\n            const other = e.key.toLowerCase() !== 'arrowright';\n            const right_arrow =\n                e.key.toLowerCase() === 'arrowright' &&\n                this.last_location === (current.value || '').length;\n            if ((other || right_arrow) && this.active_field < args.length - 1) {\n                const el = args[this.active_field + 1].nativeElement;\n                el.focus();\n                el.selectionStart = el.selectionEnd = 0;\n            }\n            this.last_location = current.selectionEnd;\n        }\n    }\n\n    public focused(index: number) {\n        this.active_field = index;\n        const args = this.arg_list.toArray();\n        const current = args[this.active_field];\n        this.field_pos = current.nativeElement.selectionEnd;\n        this.last_location = (current.nativeElement.value || '').length;\n    }\n\n    /**\n     * Move cursor to the previous argument field\n     */\n    public previousField(e) {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n        if (this.arg_list) {\n            const args = this.arg_list.toArray();\n            const current = args[this.active_field];\n            const backspace = e.key.toLowerCase() === 'backspace' && this.last_location === 0;\n            const left_arrow = e.key.toLowerCase() === 'arrowleft' && this.last_location === 0;\n            if (\n                (backspace || left_arrow) &&\n                current.nativeElement.selectionEnd === 0 &&\n                this.active_field > 0\n            ) {\n                const el = args[this.active_field - 1].nativeElement;\n                el.focus();\n                el.selectionStart = el.selectionEnd = (el.value || '').length;\n            }\n            this.last_location = current.nativeElement.selectionEnd;\n        }\n    }\n\n    /**\n     * Execute the selected method\n     */\n    public execute() {\n        if (!this.executable) {\n            return;\n        }\n        this.checkFields();\n        if (this.fields_valid) {\n            // Check if any optional arguments have a value\n            const args = this.processArguments();\n            // Execute function\n            const details = {\n                method: this.active_method.name,\n                module: this.active_module.module,\n                index: this.active_module.index,\n                args\n            };\n            this.service.Systems.execute(\n                this.system.id,\n                details.method,\n                details.module,\n                details.index,\n                details.args\n            ).then(\n                result => {\n                    this.service.notifySuccess(\n                        'Command successful executed.\\nView Response?',\n                        'View',\n                        () => this.viewDetails(result)\n                    );\n                },\n                err => {\n                    if (typeof err === 'string' && err.length < 64) {\n                        this.service.notifyError(err);\n                    } else {\n                        this.service.notifyError(\n                            `Executing '${this.active_method.name}' failed.\\nView Error?`,\n                            'View',\n                            () => this.viewDetails(err.response)\n                        );\n                    }\n                }\n            );\n        } else {\n            this.service.notifyError('One or more fields are invalid.');\n        }\n    }\n\n    /**\n     * Process the active list of argument values\n     */\n    private processArguments(): any[] {\n        const arg_list = [];\n        for (const arg of this.active_method.order) {\n            arg_list.push(this.fields[arg] || null);\n        }\n        if (this.active_method.arity < 0) {\n            const len = arg_list.length;\n            for (let i = len - 1; i >= Math.abs(this.active_method.arity) - 1; i--) {\n                if (arg_list[i]) {\n                    break;\n                }\n                arg_list.pop();\n            }\n        }\n        // Format arguments\n        let args = `[`;\n        for (const arg of arg_list) {\n            if (args !== '[') {\n                args += ',';\n            }\n            args += `${arg}`;\n        }\n        args += ']';\n        let argument_list = [];\n        try {\n            argument_list = JSON.parse(args);\n        } catch (e) {\n            console.error(e);\n        }\n        return argument_list;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: TriggerFunction): void {\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: TriggerFunction) {\n        if (value) {\n            if (value.mod) {\n                const parts = value.mod.split('_');\n                this.active_module = {\n                    id: value.mod,\n                    name: value.mod,\n                    module: parts[0],\n                    index: +parts[1]\n                };\n                if (!(this.devices || []).find(mod => mod.id === this.active_module.id)) {\n                    this.devices.unshift(this.active_module);\n                }\n            }\n            this.setMethod(value.method, value.args);\n            if (value.args) {\n                this.fields = value.args;\n            }\n        }\n    }\n\n    private setMethod(name: string, args: HashMap = {}) {\n        if (name) {\n            const method = (this.methods || []).find(a_method => a_method.name === name);\n            if (!method) {\n                this.active_method = {\n                    name,\n                    arity: Object.keys(args).length - 1,\n                    params: Object.keys(args).map(key => ['req', key]) as any,\n                    order: Object.keys(args)\n                };\n                this.methods.unshift(this.active_method);\n            } else {\n                this.active_method = method;\n            }\n        }\n    }\n\n    /** View Results of the execute */\n    private viewDetails(content: any) {\n        this._dialog.open<ViewResponseModalComponent>(ViewResponseModalComponent, {\n            data: { content }\n        });\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: TriggerFunction) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: TriggerFunction) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<section\n    class=\"execute\"\n    *ngIf=\"system && system.id && devices && devices.length > 0; else empty_state\"\n>\n    <div class=\"row\">\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                #select\n                [value]=\"active_module\"\n                (valueChange)=\"loadFunctions($event)\"\n                placeholder=\"Select a module\"\n                i18n-placeholder=\"@@selectModule\"\n            >\n                <mat-option *ngFor=\"let option of devices || []\" [value]=\"option\">\n                    {{ option.module || option.name || \"&lt;Unnamed&gt;\" }} {{ option.index ?\n                    option.index : '' }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <ng-container *ngIf=\"active_module\">\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"methods && methods.length; else empty_function_state\"\n            >\n                <mat-select\n                    #select\n                    [value]=\"active_method\"\n                    (valueChange)=\"selectFunction($event)\"\n                    placeholder=\"Select a function\"\n                    i18n-placeholder=\"@@selectFunction\"\n                >\n                    <mat-option *ngFor=\"let option of methods || []\" [value]=\"option\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </ng-container>\n        <button\n            *ngIf=\"active_method && executable\"\n            [class.not-mobile]=\"true\"\n            mat-button\n            [disabled]=\"!fields_valid\"\n            (tapped)=\"execute()\"\n            i18n=\"@@execute\"\n        >\n            Execute\n        </button>\n    </div>\n    <div class=\"row function\" *ngIf=\"active_method\">\n        <div class=\"fn-input\">\n            <div class=\"bracket\">{{active_method.name}}(</div>\n            <div class=\"arg\" *ngFor=\"let arg of param_list; let i = index\">\n                <span class=\"seperator\" [class.solid]=\"arg[2] !== undefined || fields[arg[0]]\"\n                    >{{(i > 0 ? ',&nbsp;' : '')}}</span\n                >\n                <input\n                    #argument\n                    [(ngModel)]=\"fields[arg[0]]\"\n                    (ngModelChange)=\"checkFields()\"\n                    [class.error]=\"error && error[arg[0]]\"\n                    [style.width]=\"(.6 * (fields[arg[0]] || placeholder[arg[0]]).length + .3) + 'em'\"\n                    [placeholder]=\"placeholder[arg[0]]\"\n                    (keyup.enter)=\"nextField($event)\"\n                    (keydown.,)=\"nextField($event)\"\n                    (keyup.arrowright)=\"nextField($event)\"\n                    (keyup.backspace)=\"previousField($event)\"\n                    (keyup.arrowleft)=\"previousField($event)\"\n                    (focus)=\"focused(i)\"\n                />\n            </div>\n            <div class=\"bracket\">)</div>\n        </div>\n    </div>\n    <button\n        *ngIf=\"active_method && executable\"\n        [class.mobile-only]=\"true\"\n        mat-button\n        [disabled]=\"!fields_valid\"\n        (tapped)=\"execute()\"\n        i18n=\"@@execute\"\n    >\n        Execute\n    </button>\n</section>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@execNoModules\">No running modules on the system</div>\n    </div>\n</ng-template>\n<ng-template #empty_function_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@execNoFunctions\">No executable methods on the selected module</div>\n    </div>\n</ng-template>\n","import {\n    Component,\n    forwardRef,\n    Input,\n    ViewChild,\n    OnInit,\n    SimpleChanges,\n    OnChanges,\n    LOCALE_ID,\n    Inject\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { timeFormatString } from 'src/app/shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n    selector: 'a-time-field',\n    templateUrl: './time-field.component.html',\n    styleUrls: ['./time-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class TimeFieldComponent extends BaseDirective\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step = 15;\n    /** Whether past times are allowed */\n    @Input() public no_past_times = true;\n    /** String representing the currently set time */\n    public date: number = dayjs().valueOf();\n    /** String representing the currently set time */\n    public time: string = dayjs().format('HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n\n    private date_pipe: DatePipe;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    constructor(@Inject(LOCALE_ID) private _locale: string) {\n        super();\n        this.date_pipe = new DatePipe(this._locale);\n    }\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n        this.timeout('hide', () => (this.show_select = false));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(\n                this.date,\n                !this.no_past_times,\n                this.step\n            );\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = (this.time || '00:00').split(':');\n        const date = dayjs(this.date)\n            .hour(+time[0])\n            .minute(+time[1]);\n        if (\n            date.minute() % 15 !== 0 &&\n            !this._time_options.find(option => option.id === date.format('HH:mm'))\n        ) {\n            this._time_options.push({\n                name: `${this.date_pipe.transform(date.toDate(), timeFormatString())}`,\n                id: date.format('HH:mm')\n            });\n            this._time_options.sort((a, b) => `${a.id}`.localeCompare(`${b.id}`));\n        }\n        return this._time_options;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        if (this._onChange) {\n            const time = (this.time || '00:00').split(':');\n            const date = dayjs(this.date)\n                .hour(+time[0])\n                .minute(+time[1]);\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value;\n        const date = dayjs(this.date);\n        this.time = date.format('HH:mm');\n        this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription(\n                    'listen_close',\n                    this.select_field.openedChange.subscribe(state => {\n                        if (!state) {\n                            this.show_select = false;\n                        }\n                    })\n                );\n            }\n        });\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(\n        datestamp: number,\n        show_past: boolean,\n        step: number = 15\n    ): Identity[] {\n        const now = dayjs();\n        let date = dayjs(datestamp);\n        const blocks: Identity[] = [];\n        if (show_past || date.isAfter(now, 'd')) {\n            date = date.startOf('d');\n        }\n        date = date.minute(Math.ceil(date.minute() / step) * step);\n        const end = date.endOf('d');\n        // Add options for the rest of the day\n        while (date.isBefore(end, 'm')) {\n            blocks.push({\n                name: `${this.date_pipe.transform(date.toDate(), timeFormatString())}`,\n                id: date.format('HH:mm')\n            });\n            date = date.add(step, 'm');\n        }\n        return blocks;\n    }\n}\n","<div class=\"time-field\" role=\"button\" form-field tabindex=\"0\" (keydown.enter)=\"showSelect()\" *ngIf=\"!show_select\">\n    <div class=\"display\">\n        <input matInput type=\"time\" [ngModel]=\"time\" (ngModelChange)=\"setValue($event)\" />\n    </div>\n    <div class=\"icon\" (tapped)=\"showSelect()\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: show_select ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n<mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n    <mat-select #select [value]=\"time\" (valueChange)=\"setValue($event)\">\n        <mat-option *ngFor=\"let option of time_options\" [value]=\"option.id\">\n            {{ option.name }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n","import { Component, OnInit, Renderer2, ViewChild, ElementRef } from '@angular/core';\n\nimport { EngineDebugService } from 'src/app/services/debug.service';\nimport { ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR } from '../../globals/angular-animations';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { eventToPoint } from '../../utilities/general.utilities';\nimport { Point } from '../../utilities/types.utilities';\n\n@Component({\n    selector: 'app-debug-output',\n    templateUrl: './debug-output.component.html',\n    styleUrls: ['./debug-output.component.scss'],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR]\n})\nexport class DebugOutputComponent extends BaseDirective implements OnInit {\n    /** Whether display output is shown */\n    public show_content: boolean = true;\n    /** Display string for debug logs */\n    public logs: string;\n    /** Height of the debug console */\n    public height: number = 384;\n    /** Width of the debug console */\n    public width: number = 768;\n    /** Toggle to resize the terminal display */\n    public resize: boolean;\n    /** Start point for resizing the console box */\n    private _resize_start: Point;\n\n    @ViewChild('content', { static: false }) private _content_el: ElementRef<HTMLDivElement>;\n\n    /** Whether user is listening for debug information */\n    public get is_enabled(): boolean {\n        return this._service.is_listening;\n    }\n    constructor(private _service: EngineDebugService, private _renderer: Renderer2) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'changes',\n            this._service.events.subscribe(_ => {\n                this.logs = this._service.terminal_string;\n            })\n        );\n    }\n\n    /** Clear all the debug logs */\n    public clearDebugMessages() {\n        this._service.clearEvents();\n    }\n\n    public startResize(event: MouseEvent | TouchEvent, dir: 'x' | 'y' | 'xy') {\n        this._resize_start = eventToPoint(event);\n        if (event instanceof MouseEvent) {\n            this.subscription(\n                'resize_move',\n                this._renderer.listen('window', 'mousemove', event => this.resizeMove(event, dir))\n            );\n            this.subscription(\n                'resize_end',\n                this._renderer.listen('window', 'mouseup', _ => {\n                    this.unsub('resize_move');\n                    this.unsub('resize_end');\n                    const box = this._content_el.nativeElement.getBoundingClientRect();\n                    this.height = box.height;\n                    this.width = box.width;\n                })\n            );\n        } else {\n            this.subscription(\n                'resize_move',\n                this._renderer.listen('window', 'touchmove', event => this.resizeMove(event, dir))\n            );\n            this.subscription(\n                'resize_end',\n                this._renderer.listen('window', 'touchend', _ => {\n                    this.unsub('resize_move');\n                    this.unsub('resize_end');\n                    const box = this._content_el.nativeElement.getBoundingClientRect();\n                    this.height = box.height;\n                    this.width = box.width;\n                })\n            );\n        }\n    }\n\n    private resizeMove(event: MouseEvent | TouchEvent, dir: 'x' | 'y' | 'xy') {\n        const point = eventToPoint(event);\n        const diff = { x: point.x - this._resize_start.x, y: point.y - this._resize_start.y };\n        if (dir.indexOf('x') >= 0) {\n            this.width = this.width - diff.x;\n        }\n        if (dir.indexOf('y') >= 0) {\n            this.height = this.height - diff.y;\n        }\n        this._resize_start = point;\n        this.timeout('resize', () => this.resize = !this.resize, 50);\n    }\n\n}\n","<ng-container *ngIf=\"is_enabled\">\n    <div class=\"debug-output\" [class.disabled]=\"!show_content\">\n        <div class=\"content\" #content [@show]=\"show_content ? 'show' : 'hide'\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n            <div class=\"header\">\n                <div class=\"text\" i18n=\"@@debugConsole\">Debug Console</div>\n                <button mat-button (tapped)=\"clearDebugMessages()\" i18n=\"@@clear\">Clear</button>\n            </div>\n            <a-terminal [content]=\"logs\" [resize]=\"resize\"></a-terminal>\n            <div\n                class=\"resize-bar top\"\n                (mousedown)=\"startResize($event, 'y')\"\n                (touchstart)=\"startResize($event, 'y')\"\n            ></div>\n            <div\n                class=\"resize-bar left\"\n                (mousedown)=\"startResize($event, 'x')\"\n                (touchstart)=\"startResize($event, 'x')\"\n            ></div>\n            <div\n                class=\"resize-bar top-left\"\n                (mousedown)=\"startResize($event, 'xy')\"\n                (touchstart)=\"startResize($event, 'xy')\"\n            ></div>\n        </div>\n        <button mat-icon-button (tapped)=\"show_content = !show_content\">\n            <app-icon\n                [icon]=\"{ class: show_content ? 'backoffice-cross' : 'backoffice-terminal' }\"\n            ></app-icon>\n        </button>\n    </div>\n</ng-container>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'application-form',\n    templateUrl: './application-form.component.html',\n    styleUrls: ['./application-form.component.scss']\n})\nexport class ApplicationFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"application form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"application-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@nameLabel\"\n                    >Name<span>*</span>:</label\n                >\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"application-name\"\n                        placeholder=\"Application Name\"\n                        i18n-placeholder=\"@@appNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@appNameError\"\n                        >Application name is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.scopes\">\n                <label for=\"scopes\" i18n=\"@@scopesLabel\">Scopes:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"scopes\"\n                        placeholder=\"Access Scopes\"\n                        i18n-placeholder=\"@@scopePlaceholder\"\n                        formControlName=\"scopes\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.skip_authorization\">\n            <mat-checkbox\n                name=\"skip-authorization\"\n                formControlName=\"skip_authorization\"\n                i18n=\"@@skipAuthLabel\"\n                >Skip Authorization</mat-checkbox\n            >\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.redirect_uri\">\n            <label for=\"redirect-uri\" i18n=\"@@redirectLabel\">Login URL:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"redirect-uri\"\n                    placeholder=\"Redirect URI e.g. http://localhost:4200/oauth-resp.html\"\n                    i18n-placeholder=\"@@redirectPlaceholder\"\n                    formControlName=\"redirect_uri\"\n                />\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\nimport { AuthType } from '@placeos/ts-client';\n\n@Component({\n  selector: 'broker-form',\n  templateUrl: './broker-form.component.html',\n  styleUrls: ['./broker-form.component.scss']\n})\nexport class BrokerFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available authentication types */\n    public auth_types = [\n        { id: AuthType.Certificate, name: 'Certificate' },\n        { id: AuthType.NoAuth, name: 'No Authentication' },\n        { id: AuthType.UserPassword, name: 'Password' },\n    ];\n    /** List of separator characters for filters */\n    public readonly separators: number[] = [ENTER, COMMA];\n    /** Whether to show password field value */\n    public show_password: boolean;\n\n    public get filters(): string[] {\n        return this.form.controls.filters.value;\n    }\n\n    /**\n     * Add a filter to the list of filters for the item\n     * @param event Input event\n     */\n    public addFilter(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.filter_list) return;\n        const input = event.input;\n        const value = event.value;\n        const filter_list = this.filters;\n        if ((value || '').trim()) {\n            filter_list.push(value);\n            this.form.controls.filters.setValue(filter_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove filter from the list\n     * @param existing_filter Filter to remove\n     */\n    public removeFilter(existing_filter: string): void {\n        if (!this.form || !this.form.controls.filter_list) return;\n        const filter_list = this.filters;\n        const index = filter_list.indexOf(existing_filter);\n\n        if (index >= 0) {\n            filter_list.splice(index, 1);\n            this.form.controls.filters.setValue(filter_list);\n        }\n    }\n}\n","<div class=\"broker form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"broker-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"broker-name\"\n                    placeholder=\"Broker Name\"\n                    i18n-placeholder=\"@@brokerNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@brokerNameError\">Broker name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"host\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@hostLabel\"\n                >Host<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"host\"\n                    placeholder=\"Host\"\n                    i18n-placeholder=\"@@hostPlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@hostError\">Host is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.port\">\n                <label\n                    for=\"port-number\"\n                    [class.error]=\"form.controls.port.invalid && form.controls.port.touched\"\n                    i18n=\"@@portLabel\"\n                >\n                    Port Number<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"port-number\"\n                        type=\"number\"\n                        placeholder=\"Port Number\"\n                        i18n-placeholder=\"@@portPlaceholder\"\n                        formControlName=\"port\"\n                    />\n                    <mat-error i18n=\"@@portError\">\n                        A valid port number between 1 - 65535 is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field checkbox\" *ngIf=\"form.controls.tls\">\n                <mat-checkbox name=\"tls\" formControlName=\"tls\" i18n=\"@@tlsLabel\">TLS</mat-checkbox>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.auth_type\">\n            <label for=\"type\">Auth Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"auth_type\">\n                    <mat-option *ngFor=\"let type of auth_types\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container *ngIf=\"form.controls.auth_type.value === 2\">\n            <div class=\"fieldset\">\n                <div class=\"field\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"host\"\n                        [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                        i18n=\"@@usernameLabel\"\n                        >Username<span>*</span>:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"username\"\n                            placeholder=\"Username\"\n                            i18n-placeholder=\"@@usernamePlaceholder\"\n                            formControlName=\"name\"\n                            required\n                        />\n                        <mat-error i18n=\"@@usernameError\">Username is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.password\">\n                    <label\n                        for=\"new-password\"\n                        [class.error]=\"\n                            form.controls.password.invalid && form.controls.password.touched\n                        \"\n                        i18n=\"@@passwordLabel\"\n                    >\n                        Password:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"new-password\"\n                            autocomplete=\"new-password\"\n                            [type]=\"show_password ? 'text' : 'password'\"\n                            placeholder=\"Password\"\n                            i18n-placeholder=\"@@passwordPlaceholder\"\n                            formControlName=\"password\"\n                        />\n                        <app-icon\n                            matSuffix\n                            [icon]=\"{ class: 'material-icons', content: 'visibility' }\"\n                            (mousedown)=\"show_password = true\"\n                            (window:mouseup)=\"show_password = false\"\n                            (touchstart)=\"show_password = true\"\n                            (window:touchend)=\"show_password = false\"\n                        ></app-icon>\n                        <mat-error i18n=\"@@passordError\">A valid password is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n        </ng-container>\n        <ng-container *ngIf=\"form.controls.auth_type.value === 0\">\n            <div class=\"field\" *ngIf=\"form.controls.certificate\">\n                <label for=\"cert\" i18n=\"@@certificateLabel\">Certificate:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"cert\"\n                        placeholder=\"Certificate\"\n                        i18n-placeholder=\"@@certificatePlaceholder\"\n                        formControlName=\"certificate\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n        </ng-container>\n        <div class=\"field\" *ngIf=\"form.controls.secret\">\n            <label for=\"secret\" i18n=\"@@secretLabel\">Secret:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"secret\"\n                    placeholder=\"Secret\"\n                    i18n-placeholder=\"@@secretPlaceholder\"\n                    formControlName=\"secret\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.filters\">\n            <label for=\"filters\" i18n=\"@@filtersLabel\">\n                Filters:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-chip-list #chipList name=\"filters\" aria-label=\"Broker Filters\">\n                    <mat-chip\n                        *ngFor=\"let filter of filters\"\n                        [selectable]=\"true\"\n                        [removable]=\"true\"\n                        (removed)=\"removeFilter(filter)\"\n                    >\n                        {{ filter }}\n                        <app-icon matChipRemove [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                    </mat-chip>\n                    <input\n                        placeholder=\"Broker filters...\"\n                        i18n-placeholder=\"@@brokerFiltersPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addFilter($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EncryptionLevel } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'domain-form',\n    templateUrl: './domain-form.component.html',\n    styleUrls: ['./domain-form.component.scss']\n})\nexport class DomainFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"domain form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"domain-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@nameLabel\"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"domain-name\"\n                        placeholder=\"Domain Name\"\n                        i18n-placeholder=\"@@domainNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@domainNameError\">\n                        Domain name is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.domain\">\n                <label\n                    for=\"domain\"\n                    [class.error]=\"form.controls.domain.invalid && form.controls.domain.touched\"\n                    i18n=\"@@domainLabel\"\n                >\n                    Domain:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"domain\"\n                        placeholder=\"Domain e.g localhost\"\n                        i18n=\"@@domainPlaceholder\"\n                        formControlName=\"domain\"\n                    />\n                    <mat-error i18n=\"@@domainError\">\n                        A valid Domain is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.login_url\">\n            <label\n                for=\"login-url\"\n                [class.error]=\"form.controls.login_url.invalid && form.controls.login_url.touched\"\n                i18n=\"@@loginUrlLabel\"\n            >\n                Login URL:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"login-url\"\n                    placeholder=\"Login URL\"\n                    i18n=\"@@loginUrlPlaceholder\"\n                    formControlName=\"login_url\"\n                />\n                <mat-error *ngIf=\"form.controls.login_url.invalid\" i18n=\"@@loginUrlError\">\n                    A valid Login URL is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.logout_url\">\n            <label\n                for=\"logout-url\"\n                [class.error]=\"form.controls.logout_url.invalid && form.controls.logout_url.touched\"\n                i18n=\"@@logoutUrlLabel\"\n            >\n                Logout URL:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"logout-url\"\n                    placeholder=\"Logout URL\"\n                    i18n-placeholder=\"@@logoutUrlPlaceholder\"\n                    formControlName=\"logout_url\"\n                />\n                <mat-error *ngIf=\"form.controls.logout_url.invalid\" i18n=\"@@logoutUrlError\">\n                    A valid Logout URL is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","<div class=\"driver form\" *ngIf=\"form\">\n    <div class=\"fieldset\">\n        <div class=\"field discovery\" *ngIf=\"form.controls.repository_id && !editing\">\n            <label for=\"repo\" i18n=\"@@repoLabel\">Repository: </label>\n            <item-search-field\n                name=\"repo\"\n                [service]=\"discovery_service\"\n                [ngModel]=\"base_repo\"\n                [exclude]=\"exclude_fn\"\n                (ngModelChange)=\"updateDriverList($event)\"\n            ></item-search-field>\n        </div>\n        <div\n            class=\"field discovery\"\n            *ngIf=\"form.controls.file_name && driver_list && driver_list.length && !editing\"\n        >\n            <label for=\"driver\" i18n=\"@@driverLabel\">Driver Base: </label>\n            <item-search-field\n                name=\"driver\"\n                [options]=\"driver_list\"\n                [loading]=\"loading_drivers\"\n                [ngModel]=\"base_driver\"\n                (ngModelChange)=\"updateCommitList($event)\"\n            ></item-search-field>\n        </div>\n        <div\n            class=\"field discovery\"\n            *ngIf=\"form.controls.commit && commit_list && commit_list.length\"\n        >\n            <label for=\"commit\" i18n=\"@@driverCommitLabel\">Driver Commit: </label>\n            <item-search-field\n                name=\"commit\"\n                [options]=\"commit_list\"\n                [loading]=\"loading_commits\"\n                [ngModel]=\"base_commit\"\n                (ngModelChange)=\"setDriverBase($event)\"\n            ></item-search-field>\n        </div>\n    </div>\n    <ng-container *ngIf=\"!loading; else load_state\">\n        <form [formGroup]=\"form\">\n            <ng-container\n                *ngIf=\"(form.controls.commit && form.controls.commit.value) || base_commit\"\n            >\n                <div class=\"field\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"driver-name\"\n                        [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                        i18n=\"@@nameLabel\"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"driver-name\"\n                            placeholder=\"Driver Name\"\n                            i18n-placeholder=\"@@driverNamePlaceholder\"\n                            formControlName=\"name\"\n                            required\n                        />\n                        <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@driverNameError\">\n                            Driver name is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.role\">\n                    <label for=\"role\" i18n=\"@@roleLabel\">Role: </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select name=\"role\" formControlName=\"role\">\n                            <mat-option *ngFor=\"let type of role_types\" [value]=\"type.id\">\n                                {{ type.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.description\">\n                    <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"description\"\n                            placeholder=\"Description\"\n                            i18n-placeholder=\"@@descriptionPlaceholder\"\n                            formControlName=\"description\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.module_name\">\n                    <label\n                        for=\"module-name\"\n                        [class.error]=\"\n                            form.controls.module_name.invalid && form.controls.module_name.touched\n                        \"\n                        i18n=\"@@moduleNameLabel\"\n                    >\n                        Module Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"module-name\"\n                            placeholder=\"Module Name\"\n                            i18n=\"@@moduleNamePlaceholder\"\n                            formControlName=\"module_name\"\n                            required\n                        />\n                        <mat-error\n                            *ngIf=\"form.controls.module_name.invalid\"\n                            i18n=\"@@moduleNameError\"\n                        >\n                            Module name is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.default_uri\">\n                    <label for=\"default-uri\" i18n=\"@@defaultUriLabel\">Default URI:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"default-uri\"\n                            placeholder=\"Default URI\"\n                            i18n=\"@@defaultUriPlaceholder\"\n                            formControlName=\"default_uri\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"fieldset\">\n                    <div class=\"field\" *ngIf=\"form.controls.default_port\">\n                        <label\n                            for=\"default-port\"\n                            [class.error]=\"\n                                form.controls.default_port.invalid &&\n                                form.controls.default_port.touched\n                            \"\n                            i18n=\"@@defaultPortLabel\"\n                        >\n                            Default Port Number:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"default-port\"\n                                type=\"number\"\n                                placeholder=\"Port Number\"\n                                i18n=\"@@defaultPortPlaceholder\"\n                                formControlName=\"default_port\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.default_port.invalid\"\n                                i18n=\"@@portError\"\n                            >\n                                A valid port number between 1 - 65535 is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"field\" *ngIf=\"form.controls.ignore_connected\">\n                        <mat-checkbox\n                            name=\"ignore-connected\"\n                            formControlName=\"ignore_connected\"\n                            i18n=\"@@ignoreConnectedLabel\"\n                        >\n                            Ignore Connected\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </ng-container>\n        </form>\n    </ng-container>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@driverCommitLoading\">Loading driver details for commit...</div>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    EngineRepositoryCommit,\n    EngineRepository,\n    EngineRepositoryType,\n    EngineRepositoriesService,\n    EngineDriverRole,\n} from '@placeos/ts-client';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\nimport { of, Subject, Observable } from 'rxjs';\n\nimport * as dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\ndayjs.extend(relativeTime);\n\n@Component({\n    selector: 'driver-form',\n    templateUrl: './driver-form.component.html',\n    styleUrls: ['./driver-form.component.scss'],\n})\nexport class DriverFormComponent extends BaseDirective implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of driver roles */\n    public role_types: Identity[] = [\n        { id: EngineDriverRole.SSH, name: 'SSH' },\n        { id: EngineDriverRole.Device, name: 'Device' },\n        { id: EngineDriverRole.Service, name: 'Service' },\n        { id: EngineDriverRole.Websocket, name: 'Websocket' },\n        { id: EngineDriverRole.Logic, name: 'Logic' },\n    ];\n\n    /** Driver used as a template for the new driver being created */\n    public base_repo: EngineRepository;\n    /** Driver used as a template for the new driver being created */\n    public base_commit: EngineRepositoryCommit;\n    /** Driver used as a template for the new driver being created */\n    public base_driver: Identity;\n    /** List of available drivers for the active repository */\n    public driver_list: Identity[] = [];\n    /** List of available commits for the active driver */\n    public commit_list: Identity[] = [];\n    /** List of items from an API search */\n    public driver_list$: Observable<Identity[]>;\n    /** List of items from an API search */\n    public commit_list$: Observable<Identity[]>;\n    /** Subject holding the value of the search */\n    public readonly repo$ = new Subject<string>();\n    /** Subject holding the value of the search */\n    public readonly driver$ = new Subject<string>();\n    /** Whether driver details are being loaded */\n    public loading: boolean;\n    /** Whether driver listings are being loaded */\n    public loading_drivers: boolean;\n    /** Whether driver commits are being loaded */\n    public loading_commits: boolean;\n    /** Function to check repo that are excluded from being listed */\n    public readonly exclude_fn = (repo: EngineRepository) => repo.type === EngineRepositoryType.Interface\n\n    public get editing(): boolean {\n        return this.form.controls.id && this.form.controls.id.value;\n    }\n\n    /** Service for handling driver discovery */\n    public get discovery_service(): EngineRepositoriesService {\n        return this._service.Repositories;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.driver_list$ = this.repo$.pipe(\n            debounceTime(100),\n            distinctUntilChanged(),\n            switchMap((repo_id) => {\n                this.loading_drivers = true;\n                this.driver_list = [];\n                return this._service.Repositories.listDrivers(repo_id);\n            }),\n            catchError((_) => {\n                this._service.notifyError(`Error loading driver list. Error: ${_.message || _}`);\n                return of([]);\n            }),\n            map((list: any[]) => {\n                this.loading_drivers = false;\n                this.commit_list = [];\n                return (list || []).map((driver) => ({\n                    id: driver,\n                    name: driver.replace(/\\//g, ' > '),\n                }));\n            })\n        );\n        this.subscription(\n            'driver_list',\n            this.driver_list$.subscribe((list) => (this.driver_list = list))\n        );\n        this.commit_list$ = this.driver$.pipe(\n            debounceTime(100),\n            distinctUntilChanged(),\n            switchMap((driver_id) => {\n                this.loading_commits = true;\n                this.commit_list = [];\n                return this._service.Repositories.listCommits(this.base_repo.id, {\n                    driver: `${driver_id}`,\n                });\n            }),\n            catchError((_) => {\n                this._service.notifyError(\n                    `Error loading driver's commit list. Error: ${_.message || _}`\n                );\n                return of([]);\n            }),\n            map((list: any[]) => {\n                this.loading_commits = false;\n                if (this.form.controls.commit) {\n                    this.base_commit = this.commit_list.find(\n                        (commit) => commit.id === this.form.controls.commit.value\n                    ) as any;\n                }\n                return (list || []).map((commit: EngineRepositoryCommit) => {\n                    const date = dayjs(commit.date);\n                    return {\n                        id: commit.commit,\n                        name: `${commit.subject}`,\n                        extra: date.isAfter(dayjs().subtract(1, 'm'))\n                            ? date.fromNow()\n                            : date.format('DD MMM YYYY'),\n                    };\n                });\n            })\n        );\n        this.subscription(\n            'commit_list',\n            this.commit_list$.subscribe((list) => (this.commit_list = list))\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.initDriver();\n        }\n    }\n\n    /**\n     * Update the list of available drivers\n     * @param repo Repository to grab the drivers for\n     */\n    public async updateDriverList(repo: EngineRepository) {\n        this.form.controls.repository_id.setValue(repo.id);\n        this.base_repo = repo;\n        const promise = this.driver_list$.toPromise();\n        this.repo$.next(repo.id);\n        return await promise;\n    }\n\n    /**\n     * Update the list of available commits\n     * @param driver Driver to grab commits for\n     */\n    public updateCommitList(driver: Identity) {\n        this.form.controls.file_name.setValue(driver.id);\n        this.base_driver = driver;\n        const promise = this.commit_list$.toPromise();\n        this.driver$.next(`${driver.id}`);\n        return promise;\n    }\n\n    /**\n     *\n     * @param event Details of the driver selected\n     */\n    public setDriverBase(event: Identity) {\n        this.form.controls.commit.setValue(event.id);\n        this.base_commit = event as any;\n        this.loading = true;\n        this._service.Repositories.driverDetails(this.base_repo.id, {\n            driver: `${this.base_driver.id}`,\n            commit: `${event.id}`,\n        }).then(\n            (driver) => {\n                this.loading = false;\n                if (!this.form.controls.id.value) {\n                    this.form.controls.name.setValue(driver.descriptive_name || '');\n                    this.form.controls.module_name.setValue(driver.generic_name || '');\n                    this.form.controls.class_name.setValue(this.base_driver.id || '');\n                    this.form.controls.default_port.setValue(\n                        driver.tcp_port || driver.udp_port || ''\n                    );\n                    this.form.controls.default_uri.setValue(driver.uri_base || '');\n                    this.form.controls.role.setValue(\n                        driver.tcp_port || driver.udp_port\n                            ? EngineDriverRole.Device\n                            : driver.uri_base\n                            ? EngineDriverRole.Service\n                            : EngineDriverRole.Logic\n                    );\n                    this.form.controls.settings.setValue(driver.default_settings || '');\n                    this.form.controls.description.setValue(driver.description || '');\n                }\n            },\n            () => (this.loading = false)\n        );\n    }\n\n    /**\n     * Initialise the driver details if set\n     */\n    private async initDriver() {\n        if (this.form.controls.repository_id && this.form.controls.repository_id.value) {\n            const value = this.form.controls.repository_id.value;\n            const repo = await this.discovery_service.show(value);\n            this.base_repo = repo;\n            this.updateDriverList(this.base_repo);\n            const driver = this.form.controls.file_name.value;\n            this.base_driver =\n                typeof driver === 'string'\n                    ? { id: driver, name: driver.split('/').join(' > ') }\n                    : driver;\n            this.updateCommitList(this.base_driver);\n        }\n    }\n}\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'ldap-source-form',\n    templateUrl: './ldap-source-form.component.html',\n    styleUrls: ['./ldap-source-form.component.scss']\n})\nexport class LdapSourceFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available authentication schemes */\n    public auth_methods: Identity[] = [\n        { id: 'plain', name: 'Plain' },\n        { id: 'ssl', name: 'SSL' },\n        { id: 'tls', name: 'TLS' }\n    ];\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"auth-source-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@authSourceNameLabel\"\n            >\n                Name<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"auth-source-name\"\n                    placeholder=\"Auth Source Name\"\n                    i18n-placeholder=\"@@authSourceNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@authSourceNameError\">\n                    Auth source name is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.host\">\n                <label\n                    for=\"host\"\n                    [class.error]=\"form.controls.host.invalid && form.controls.host.touched\"\n                    i18n=\"@@authSourceHostLabel\"\n                >\n                    Host<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"host\"\n                        placeholder=\"Host\"\n                        formControlName=\"host\"\n                        i18n-placeholder=\"@@authSourceHostPlaceholder\"\n                    />\n                    <mat-error *ngIf=\"form.controls.host.invalid\" i18n=\"@@authSourceNameError\">\n                        Host is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.port\">\n                <label for=\"port\" i18n=\"@@portLabel\">Port:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        type=\"number\"\n                        name=\"port\"\n                        placeholder=\"Port number\"\n                        i18n=\"@@portPlaceholder\"\n                        formControlName=\"port\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.uid\">\n                <label for=\"uid\" i18n=\"@@authSourceUidLabel\">User ID Key:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"uid\"\n                        placeholder=\"User ID Key\"\n                        i18n-placeholder=\"@@authSourceUidPlaceholder\"\n                        formControlName=\"uid\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field type\" *ngIf=\"form.controls.auth_method\">\n                <label for=\"auth-method\" i18n=\"@@authSourceMethodLabel\"\n                    >Authentication Method:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"auth-method\" formControlName=\"auth_method\">\n                        <mat-option\n                            *ngFor=\"let type of auth_methods\"\n                            [value]=\"type.id\"\n                            i18n=\"@@authSourceMethodOptions\"\n                        >\n                            {type.name, select, Plain { Plain } SSL { SSL } TLS { TLS } other {\n                            Other }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.base\">\n                <label\n                    for=\"base\"\n                    [class.error]=\"form.controls.base.invalid && form.controls.base.touched\"\n                    i18n=\"@@authSourceBaseLabel\"\n                >\n                    Base<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"base\"\n                        placeholder=\"Base\"\n                        i18n-placeholder=\"@@authSourceBasePlaceholder\"\n                        formControlName=\"base\"\n                    />\n                    <mat-error *ngIf=\"form.controls.base.invalid\" i18n=\"@@authSourceBaseError\">\n                        Base is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.bind_dn\">\n                <label for=\"bind-dn\" i18n=\"@@authSourceBindDnLabel\">Bind DN:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"bind-dn\"\n                        placeholder=\"Bind DN\"\n                        i18n=\"@@authSourceBindDnPlaceholder\"\n                        formControlName=\"bind_dn\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.password\">\n                <label for=\"password\" i18n=\"@@passwordLabel\">Password:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        i18n-placeholder=\"@@passwordPlaceholder\"\n                        formControlName=\"password\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.filter\">\n                <label for=\"filter\" i18n=\"@@authSourceFilterLabel\">Filter:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"filter\"\n                        placeholder=\"Filter\"\n                        i18n-placeholder=\"@@authSourceFilterPlaceholder\"\n                        formControlName=\"filter\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n</div>\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EncryptionLevel, EngineDriverRole } from '@placeos/ts-client';\n\nimport { Identity, EngineServiceLike } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n@Component({\n    selector: 'module-form',\n    templateUrl: './module-form.component.html',\n    styleUrls: ['./module-form.component.scss']\n})\nexport class ModuleFormComponent extends BaseDirective implements OnDestroy {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Whether system is readonly */\n    @Input() public readonly: boolean;\n\n    /** Service for handling system */\n    public get system_service(): EngineServiceLike {\n        return this._service.Systems;\n    }\n\n    /** Service for handling drivers */\n    public get driver_service(): EngineServiceLike {\n        return this._service.Drivers;\n    }\n\n    /** Role of the selected driver */\n    public get role(): string {\n        if (!this.form.controls.driver) {\n            return 'service';\n        }\n        const driver = this.form.controls.driver.value;\n        if (!driver) {\n            return 'logic';\n        }\n        switch (driver.role) {\n            case EngineDriverRole.SSH:\n                return 'ssh';\n            case EngineDriverRole.Device:\n                return 'device';\n            case EngineDriverRole.Service:\n                return 'service';\n            case EngineDriverRole.Websocket:\n                return 'websocket';\n        }\n        return 'logic';\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.driver\">\n            <label\n                for=\"driver\"\n                [class.error]=\"form.controls.driver.invalid && form.controls.driver.touched\"\n                i18n=\"@@driverLabel\"\n            >\n                Driver<span>*</span>:\n            </label>\n            <item-search-field\n                name=\"driver\"\n                [service]=\"driver_service\"\n                formControlName=\"driver\"\n            ></item-search-field>\n            <div\n                class=\"error\"\n                *ngIf=\"form.controls.driver.invalid && form.controls.driver.touched\"\n                i18n=\"@@driverError\"\n            >\n                Driver is required\n            </div>\n        </div>\n        <ng-container *ngIf=\"!form.controls.driver || form.controls.driver.value\">\n            <div class=\"field\" *ngIf=\"form.controls.system && role === 'logic'\">\n                <label\n                    for=\"system\"\n                    [class.error]=\"form.controls.system.invalid && form.controls.system.touched\"\n                    i18n=\"@@systemLabel\"\n                    >Control System<span *ngIf=\"role === 'logic'\">*</span>:\n                </label>\n                <ng-container *ngIf=\"!readonly; else readonly_system\">\n                    <item-search-field\n                        name=\"system\"\n                        [service]=\"system_service\"\n                        formControlName=\"system\"\n                    ></item-search-field>\n                    <div\n                        class=\"error\"\n                        *ngIf=\"form.controls.system.invalid && form.controls.system.touched\"\n                        i18n=\"@@systemError\"\n                    >\n                        Control System is required\n                    </div>\n                </ng-container>\n                <ng-template #readonly_system>\n                    <div class=\"value\">\n                        {{ form.controls.system.value?.name }}\n                        <span>{{ form.controls.system.value?.id }}</span>\n                    </div>\n                </ng-template>\n            </div>\n            <div class=\"fieldset\">\n                <div class=\"field\" *ngIf=\"form.controls.ip && role !== 'logic'\">\n                    <label\n                        for=\"ip\"\n                        [class.error]=\"form.controls.ip.invalid && form.controls.ip.touched\"\n                        i18n=\"@@ipAddressLabel\"\n                    >\n                        IP Address<span *ngIf=\"role === 'ssh' || role === 'device'\">*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"ip\"\n                            placeholder=\"IP Address\"\n                            i18n-placeholder=\"@@ipAddressPlaceholder\"\n                            formControlName=\"ip\"\n                        />\n                        <mat-error *ngIf=\"form.controls.ip.invalid\" i18n=\"@@ipAddressError\">\n                            A valid IP address is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.port && role !== 'logic'\">\n                    <label\n                        for=\"port-number\"\n                        [class.error]=\"form.controls.port.invalid && form.controls.port.touched\"\n                        i18n=\"@@portLabel\"\n                    >\n                        Port Number<span *ngIf=\"role === 'ssh' || role === 'device'\">*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"port-number\"\n                            type=\"number\"\n                            placeholder=\"Port Number\"\n                            i18n-placeholder=\"@@portPlaceholder\"\n                            formControlName=\"port\"\n                        />\n                        <mat-error *ngIf=\"form.controls.port.invalid\" i18n=\"@@portError\">\n                            A valid port number between 1 - 65535 is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tls && role !== 'logic'\">\n                <mat-checkbox name=\"tls\" formControlName=\"tls\" i18n=\"@@tlsLabel\">TLS</mat-checkbox>\n            </div>\n            <div\n                class=\"field\"\n                *ngIf=\"form.controls.udp && role !== 'logic' && role !== 'websocket'\"\n            >\n                <mat-checkbox name=\"udp\" formControlName=\"udp\" i18n=\"@@udpLabel\">UDP</mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.makebreak && role !== 'logic'\">\n                <mat-checkbox name=\"makebreak\" formControlName=\"makebreak\" i18n=\"@@makebreakLabel\"\n                    >Makebreak</mat-checkbox\n                >\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.ignore_connected && role !== 'logic'\">\n                <mat-checkbox\n                    name=\"ignore-connected\"\n                    i18n=\"@@ignoreConnectedLabel\"\n                    formControlName=\"ignore_connected\"\n                >\n                    Ignore Connected\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.uri && role !== 'logic'\">\n                <label\n                    for=\"uri\"\n                    [class.error]=\"form.controls.uri.invalid && form.controls.uri.touched\"\n                    i18n=\"@@uriLabel\"\n                >\n                    URI<span *ngIf=\"role === 'websocket' || role === 'service'\">*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"uri\"\n                        placeholder=\"Module URI\"\n                        i18n-placeholder=\"@@uriPlaceholder\"\n                        formControlName=\"uri\"\n                    />\n                    <mat-error *ngIf=\"form.controls.uri.invalid\" i18n=\"@@uriError\"\n                        >A valid URI is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.notes\">\n                <label for=\"notes\" i18n=\"@@notesLabel\">Notes:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        placeholder=\"Module Notes\"\n                        i18n-placholder=\"@@notePlaceholder\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.custom_name\">\n                <label for=\"custom-name\" i18n=\"@@customNameLabel\">Custom Name:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"custom-name\"\n                        placeholder=\"Custom Name\"\n                        i18n-placholder=\"@@customNamePlaceholder\"\n                        formControlName=\"custom_name\"\n                    />\n                </mat-form-field>\n            </div>\n        </ng-container>\n    </form>\n</div>\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Identity, HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n@Component({\n  selector: 'oauth-source-form',\n  templateUrl: './oauth-source-form.component.html',\n  styleUrls: ['./oauth-source-form.component.scss']\n})\nexport class OauthSourceFormComponent extends BaseDirective implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available token request methods */\n    public token_methods: Identity[] = [\n        { id: 'get', name: 'GET' },\n        { id: 'post', name: 'POST' },\n        { id: 'put', name: 'PUT' },\n    ];\n    /** List of available authentication schemes */\n    public auth_schemes: Identity[] = [\n        { id: 'request_body', name: 'Request Body' },\n        { id: 'basic_auth', name: 'Basic Auth' },\n    ];\n    /** List of info mapping pairs */\n    public info_mapping_list: any[] = [];\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form && this.form) {\n            if (this.form.controls.info_mappings) {\n                const map = this.form.controls.info_mappings.value || {};\n                this.info_mapping_list = Object.keys(map).map((key) => {\n                    return { Engine: key, Remote: map[key] };\n                });\n            }\n        }\n    }\n\n    public updateMappings(mappings: { Engine: string, Remote: string }[]) {\n        this.timeout('mappings', () => {\n            const map: HashMap = {};\n            for (const pair of mappings) {\n                if (pair.Engine && pair.Remote) {\n                    map[pair.Engine] = pair.Remote;\n                }\n            }\n            this.form.controls.info_mappings.setValue(map);\n        }, 200);\n    }\n\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"auth-source-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n            >\n                Name<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"auth-source-name\"\n                    placeholder=\"Auth Source Name\"\n                    i18n-placeholder=\"@@authSourceNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@authSourceNameError\">\n                    Auth source name is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.client_id\">\n                <label for=\"client-id\" i18n=\"@@authSourceClientIdLabel\">Client ID:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"client-id\"\n                        placeholder=\"Client ID\"\n                        i18n-placeholder=\"@@authSourceClientIdPlaceholder\"\n                        formControlName=\"client_id\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.client_secret\">\n                <label for=\"client-secret\" i18n=\"@@authSourceClientSecretLabel\">\n                    Client Secret:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"client-secret\"\n                        placeholder=\"Client Secret\"\n                        i18n-placeholder=\"@@authSourceClientSecretPlaceholder\"\n                        formControlName=\"client_secret\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.site\">\n                <label for=\"site\" i18n=\"@@authSourceSiteLabel\">Site:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"site\"\n                        placeholder=\"URL of the SSO provider\"\n                        i18n-placeholder=\"@@authSourceSitePlaceholder\"\n                        formControlName=\"site\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.scope\">\n                <label for=\"scope\" i18n=\"@@scopeLabel\">Scope:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"scope\"\n                        placeholder=\"Scope\"\n                        i18n-placeholder=\"@@scopePlaceholder\"\n                        formControlName=\"scope\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field type\" *ngIf=\"form.controls.token_method\">\n                <label for=\"token-method\" i18n=\"@@authSourceTokenMethodLabel\">Token Method: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"token-method\" formControlName=\"token_method\">\n                        <mat-option *ngFor=\"let type of token_methods\" [value]=\"type.id\">\n                            {{ type.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field type\" *ngIf=\"form.controls.auth_scheme\">\n                <label for=\"auth-scheme\" i18n=\"@@authSourceSchemeLabel\">\n                    Authentication Scheme:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"auth-scheme\" formControlName=\"auth_scheme\">\n                        <mat-option *ngFor=\"let type of auth_schemes\" [value]=\"type.id\">\n                            { type.id, select, request_body { Request Body } basic_auth { Basic Auth\n                            } }\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.token_url\">\n            <label for=\"token-url\" i18n=\"@@authSourceTokenUrlLabel\">Token URL:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"token-url\"\n                    placeholder=\"Token URL\"\n                    i18n-placeholder=\"@@authSourceTokenUrlPlaceholder\"\n                    formControlName=\"token_url\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.authorize_url\">\n                <label for=\"authorize-url\" i18n=\"@@authSourceAuthorizeUrlLabel\">\n                    Authorize URL:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"authorize-url\"\n                        placeholder=\"Authorize URL\"\n                        i18n-placeholder=\"@@authSourceAuthorizeUrlPlaceholder\"\n                        formControlName=\"authorize_url\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.raw_info_url\">\n                <label for=\"info-url\" i18n=\"@@authSourceProfileUrlLabel\">User Profile URL:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"raw_info_url\"\n                        placeholder=\"User Profile URL\"\n                        i18n-placeholder=\"@@authSourceProfileUrlPlaceholder\"\n                        formControlName=\"raw_info_url\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.info_mappings\">\n            <label for=\"client-secret\" i18n=\"@@authSourceMappingsLabel\">Info Mappings:</label>\n            <object-list-field\n                [(ngModel)]=\"info_mapping_list\"\n                (ngModelChange)=\"updateMappings($event)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                [fields]=\"['Engine', 'Remote']\"\n            ></object-list-field>\n        </div>\n    </form>\n</div>\n","<div class=\"repository form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field commit\" *ngIf=\"is_edit && can_change_commit\">\n            <label for=\"commit\" i18n=\"@@repoCommitLabel\">Repository Commit: </label>\n            <item-search-field\n                name=\"commit\"\n                [options]=\"commit_list\"\n                [loading]=\"loading_commits\"\n                [ngModel]=\"base_commit\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                (ngModelChange)=\"form.controls.commit_hash.setValue($event.id)\"\n            ></item-search-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.commit_hash && is_edit\">\n            <label\n                for=\"repository-commit\"\n                i18n=\"@@commitLabel\"\n            >Commit Hash:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"repository-commit\"\n                    placeholder=\"Repository Commit\"\n                    i18n-placeholder=\"@@repositoryCommitPLaceholder\"\n                    formControlName=\"commit_hash\"\n                    readonly\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.branch && is_edit\">\n            <label\n                for=\"repository-name\"\n                [class.error]=\"form.controls.branch.invalid && form.controls.branch.touched\"\n                i18n=\"@@branchLabel\"\n                >Branch<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"branch-name\"\n                    placeholder=\"Branch Name\"\n                    i18n-placeholder=\"@@repositoryBranchPlaceholder\"\n                    formControlName=\"branch\"\n                    required\n                />\n                <mat-error i18n=\"@@repoBranchError\">Working branch name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"repository-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"repository-name\"\n                    placeholder=\"Repository Name\"\n                    i18n-placeholder=\"@@repositoryNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@repoNameError\">Repository name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.folder_name\">\n            <label\n                for=\"folder-name\"\n                [class.error]=\"\n                    form.controls.folder_name.invalid && form.controls.folder_name.touched\n                \"\n                i18n=\"@@folderNameLabel\"\n            >\n                Folder Name<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"folder-name\"\n                    placeholder=\"Folder Name\"\n                    i18n-placeholder=\"@@folderNamePlaceholder\"\n                    formControlName=\"folder_name\"\n                    required\n                />\n                <mat-error i18n=\"@@folderNameError\">Folder name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.uri\">\n            <label\n                for=\"uri\"\n                [class.error]=\"form.controls.uri.invalid && form.controls.uri.touched\"\n                i18n=\"@@repoUriLabel\"\n            >\n                Repository URI<span>*</span>:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"uri\"\n                    placeholder=\"Repository URI\"\n                    i18n-placeholder=\"@@repoUriPlaceholder\"\n                    formControlName=\"uri\"\n                    required\n                />\n                <mat-error i18n=\"@@repoUriError\">URI is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"!is_edit && form.controls.repo_type && form.controls.folder_name\">\n            <label for=\"type\" i18n=\"@@repoTypeLabel\">Repository Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"repo_type\">\n                    <mat-option *ngFor=\"let type of repo_types\" [value]=\"type.id\" i18n=\"@@repoType\">\n                        { type.name, select, Driver { Driver } Interface { Interface } other { Other\n                        } }\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { EngineRepositoryType } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'repository-form',\n    templateUrl: './repository-form.component.html',\n    styleUrls: ['./repository-form.component.scss'],\n})\nexport class RepositoryFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of commits available for repository */\n    public commit_list: Identity[] = [];\n    /** Whether repository's commits are being loaded */\n    public loading_commits: boolean;\n    /** Currently selected commit for the repository */\n    public base_commit: Identity;\n    /** List of available types of repositories */\n    public repo_types: Identity[] = [\n        { id: EngineRepositoryType.Driver, name: 'Driver' },\n        { id: EngineRepositoryType.Interface, name: 'Interface' },\n    ];\n\n    /** Whether item is being edited */\n    public get is_edit(): boolean {\n        return this.form && this.form.controls.id && this.form.controls.id.value;\n    }\n\n    /** Whether commit of the repo is allowed to be changed */\n    public get can_change_commit(): boolean {\n        return !!(\n            this.form &&\n            this.form.controls.commit_hash &&\n            this.form.controls.repo_type &&\n            this.form.controls.repo_type.value === EngineRepositoryType.Interface\n        );\n    }\n\n    constructor(private _service: ApplicationService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            this.loadCommits();\n        }\n    }\n\n    public async loadCommits() {\n        if (!this.is_edit || !this.can_change_commit) {\n            return;\n        }\n        const id = this.form.controls.id.value;\n        const commits: any[] = await this._service.Repositories.listCommits(id);\n        this.commit_list = (commits || []).map((commit) => {\n            const date = dayjs(commit.date);\n            return {\n                id: commit.commit,\n                name: commit.subject,\n                extra: date.isAfter(dayjs().subtract(1, 'm'))\n                    ? date.fromNow()\n                    : date.format('DD MMM YYYY'),\n            };\n        });\n        const active_commit = this.form.controls.commit_hash.value;\n        this.base_commit = this.commit_list.find((commit) => `${commit.id}` === active_commit);\n        if (!this.base_commit) {\n            this.base_commit = this.commit_list[0] || null;\n        }\n    }\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n  selector: 'saml-source-form',\n  templateUrl: './saml-source-form.component.html',\n  styleUrls: ['./saml-source-form.component.scss']\n})\nexport class SamlSourceFormComponent extends BaseDirective implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    /** List of attribute statement pairs */\n    public attribute_statement_mappings: any[] = [];\n    /** List of runtime param pairs */\n    public runtime_param_list: any[] = [];\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form && this.form) {\n            if (this.form.controls.attribute_statements) {\n                const map = this.form.controls.attribute_statements.value || {};\n                this.attribute_statement_mappings = Object.keys(map).map((key) => {\n                    return { name: key, mappings: map[key].join(',') };\n                });\n            }\n            if (this.form.controls.idp_sso_target_url_runtime_params) {\n                const map = this.form.controls.idp_sso_target_url_runtime_params.value || {};\n                this.runtime_param_list = Object.keys(map).map((key) => {\n                    return { name: key, mappings: map[key] };\n                });\n            }\n        }\n    }\n\n    /**\n     * Update the form control value for attribute statements\n     * @param mappings Mapping listing\n     */\n    public updateAttributeStatements(mappings: { name: string, mappings: string }[]) {\n        this.timeout('mappings', () => {\n            const map: HashMap = {};\n            for (const pair of mappings) {\n                if (pair.name && pair.mappings) {\n                    map[pair.name] = (pair.mappings || '').split(',');\n                }\n            }\n            this.form.controls.attribute_statements.setValue(map);\n        }, 200);\n    }\n\n    /**\n     * Update the form control value for runtime parameters\n     * @param mappings Mapping listing\n     */\n    public updateRuntimeParams(mappings: { name: string, mapping: string }[]) {\n        this.timeout('mappings', () => {\n            const map: HashMap = {};\n            for (const pair of mappings) {\n                if (pair.name && pair.mapping) {\n                    map[pair.name] = pair.mapping;\n                }\n            }\n            this.form.controls.idp_sso_target_url_runtime_params.setValue(map);\n        }, 200);\n    }\n\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"auth-source-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@authSourceNameLabel\"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"auth-source-name\"\n                        placeholder=\"Auth Source Name\"\n                        i18n-placeholder=\"@@authSourceNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@authSourceNameError\">\n                        Auth source name is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.issuer\">\n                <label\n                    for=\"issuer\"\n                    [class.error]=\"form.controls.issuer.invalid && form.controls.issuer.touched\"\n                    i18n=\"@@authSourceIssuerLabel\"\n                >\n                    Issuer<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"issuer\"\n                        placeholder=\"Issuer\"\n                        i18n-placeholder=\"@@authSourceIssuerPlaceholder\"\n                        formControlName=\"issuer\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.issuer.invalid\" i18n=\"@@authSourceIssuerError\">\n                        Issuer is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.idp_sso_target_url\">\n                <label\n                    for=\"idp-target\"\n                    [class.error]=\"\n                        form.controls.idp_sso_target_url.invalid &&\n                        form.controls.idp_sso_target_url.touched\n                    \"\n                    i18n=\"@@authSourceIdpTargetLabel\"\n                >\n                    IdP Target URL<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"idp-target\"\n                        placeholder=\"IdP Target URL\"\n                        i18n-placeholder=\"@@authSourceIdpTargetPlaceholder\"\n                        formControlName=\"idp_sso_target_url\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.idp_sso_target_url.invalid\" i18n=\"@@authSourceIdpTargetError\">\n                        IdP Target URL is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.name_identifier_format\">\n                <label\n                    for=\"name-identifier-format\"\n                    [class.error]=\"\n                        form.controls.name_identifier_format.invalid &&\n                        form.controls.name_identifier_format.touched\n                    \"\n                    i18n=\"@@authSourceNameIdFormatLabel\"\n                >\n                    Name Identifier Format<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name-identifier-format\"\n                        placeholder=\"Name Identifier Format\"\n                        i18n-placeholder=\"@@authSourceNameIdFormatPlaceholder\"\n                        formControlName=\"name_identifier_format\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name_identifier_format.invalid\" i18n=\"@@authSourceNameIdFormatError\">\n                        Name Identifier Format is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.request_attributes\">\n            <label\n                for=\"request-attributes\"\n                [class.error]=\"form.controls.request_attributes.invalid && form.controls.request_attributes.touched\"\n                i18n=\"@@authSourceRequestAttrLabel\"\n            >\n                Request Attributes<span>*</span>:\n            </label>\n            <object-list-field\n                formControlName=\"request_attributes\"\n                [fields]=\"['name', 'name_format', 'friendly_name']\"\n            ></object-list-field>\n            <div class=\"error-message\" *ngIf=\"form.controls.request_attributes.invalid && form.controls.request_attributes.touched\" i18n=\"@@authSourceRequestAttrError\">\n                Request Attributes are required\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.assertion_consumer_service_url\">\n                <label\n                    for=\"assertion-url\"\n                    [class.error]=\"\n                        form.controls.assertion_consumer_service_url.invalid &&\n                        form.controls.assertion_consumer_service_url.touched\n                    \"\n                    i18n=\"@@authSourceAssertionUrlLabel\"\n                >\n                    Assertion URL<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"assertion-url\"\n                        placeholder=\"Assertion URL\"\n                        i18n-placeholder=\"@@authSourceAssetionUrlPlaceholder\"\n                        formControlName=\"assertion_consumer_service_url\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.assertion_consumer_service_url.invalid\" i18n=\"@@authSourceAssetionUrlError\">\n                        Assertion URL is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.idp_cert_fingerprint\">\n                <label for=\"cert-fingerprint\" i18n=\"@@authSourceCertPrintLabel\">Certificate Fingerprint:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"cert-fingerprint\"\n                        placeholder=\"Certificate Fingerprint\"\n                        i18n-placeholder=\"@@authSourceCertPrintPlaceholder\"\n                        formControlName=\"idp_cert_fingerprint\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.idp_cert\">\n            <label for=\"cert\" i18n=\"@@authSourceCertLabel\">Full Certificate:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"cert\"\n                    placeholder=\"Full Certificate\"\n                    i18n-placeholder=\"@@authSourceCertPlaceholder\"\n                    formControlName=\"idp_cert\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.uid_attribute\">\n                <label for=\"uid-attribute\" i18n=\"@@authSourceUidAttrLabel\">UID Attribute:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"uid-attribute\"\n                        placeholder=\"UID Attribute\"\n                        i18n-placeholder=\"@@authSourceUidAttrPlaceholder\"\n                        formControlName=\"uid_attribute\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.attribute_service_name\">\n                <label for=\"attribute-service-name\" i18n=\"@@authSourceAttrServiceLabel\">Attribute Service Name:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"attribute-service-name\"\n                        placeholder=\"Attribute Service Name\"\n                        i18n-placeholder=\"@@authSourceAttrServicePlaceholder\"\n                        formControlName=\"attribute_service_name\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.attribute_statements\">\n            <label for=\"client-secret\" i18n=\"@@authSourceAttrStmtLabel\">Attribute Statements:</label>\n            <object-list-field\n                [(ngModel)]=\"attribute_statement_mappings\"\n                (ngModelChange)=\"updateAttributeStatements($event)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                [fields]=\"['name', 'mappings']\"\n            ></object-list-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.idp_sso_target_url_runtime_params\">\n            <label for=\"client-secret\" i18n=\"@@authSourceIdpSsoRuntimeLabel\">IdP SSO Runtime Params:</label>\n            <object-list-field\n                [(ngModel)]=\"runtime_param_list\"\n                (ngModelChange)=\"updateRuntimeParams($event)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                [fields]=\"['name', 'mapping']\"\n            ></object-list-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.idp_slo_target_url\">\n                <label for=\"slo-target\" i18n=\"@@authSourceIdpSloUriLabel\">IdP SLO Target URL:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"slo-target\"\n                        placeholder=\"IdP SLO Target URL\"\n                        i18n-placeholder=\"@@authSourceIdpSloUriPlaceholder\"\n                        formControlName=\"idp_slo_target_url\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.slo_default_relay_state\">\n                <label for=\"slo-relay\" i18n=\"@@authSourceSloRelayLabel\">SLO Default Relay State:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"slo-relay\"\n                        placeholder=\"SLO Default Relay State\"\n                        i18n-placeholder=\"@@authSourceSloRelayPlaceholder\"\n                        formControlName=\"slo_default_relay_state\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n</div>\n","import { Component, Input, SimpleChanges, OnChanges, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { EngineSettings, EngineUser, EncryptionLevel } from '@placeos/ts-client';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { validateYAML } from 'src/app/shared/utilities/data/systems.utilities';\n\nimport * as yaml from 'js-yaml';\nimport * as merge from 'deepmerge';\n\n@Component({\n    selector: 'a-settings-form',\n    templateUrl: './settings-form.component.html',\n    styleUrls: ['./settings-form.component.scss'],\n})\nexport class SettingsFormComponent extends BaseDirective implements OnChanges, OnInit {\n    /** ID of the parent object */\n    @Input() id: string;\n    /** List of settings for the  */\n    @Input() settings: [EngineSettings, EngineSettings, EngineSettings, EngineSettings];\n    /** Whether to display merged settings */\n    @Input() merge: boolean;\n    /** List of settings to merge into the main settings */\n    @Input() merge_settings: EngineSettings[];\n    /** Form fields for settings */\n    public form: FormGroup;\n    /** Whether a setting is being saved */\n    public saving: [boolean, boolean, boolean, boolean] = [false, false, false, false];\n    /** Currently displayed encryption level */\n    public encryption_level: EncryptionLevel;\n    /** Settings available to display on the UI */\n    public used_settings: EngineSettings[] = [];\n    /** List of available settings to view */\n    public available_levels = this.levels;\n    /** Index of the active settings tab */\n    public level_index: number;\n\n    /** Current user */\n    public get user(): EngineUser {\n        return this._service.Users.user.getValue();\n    }\n\n    /** Whether user is admin */\n    public get is_admin(): boolean {\n        return !!this.user.sys_admin;\n    }\n\n    /** Whether user is support */\n    public get is_support(): boolean {\n        return !!this.user.sys_admin || !!this.user.support;\n    }\n\n    /** Currently shown settings */\n    public get shown_option(): { id: EncryptionLevel; name: string; active?: boolean } {\n        return this.available_levels.find((i) => i.id === this.encryption_level);\n    }\n\n    /** Whether the currently active settings have been edited */\n    public get active_edited(): boolean {\n        return (\n            this.used_settings &&\n            this.used_settings[this.encryption_level] &&\n            this.used_settings[this.encryption_level].changes &&\n            this.used_settings[this.encryption_level].changes.settings_string !== undefined\n        );\n    }\n\n    /** Number of settings blocks edited */\n    public get edited_count(): number {\n        let count = 0;\n        for (const setting of this.used_settings) {\n            if (setting.changes.settings_string !== undefined) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    /** Whether a settings group has errors */\n    public get has_errors(): boolean {\n        for (const key in this.form.controls) {\n            if (this.form.controls[key] && this.form.controls[key].errors) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Displayable encryption levels for settings */\n    public get levels(): any[] {\n        const levels: Identity[] = [\n            { id: EncryptionLevel.None, name: 'Unencrypted', active: true },\n            {\n                id: EncryptionLevel.Support,\n                name: 'Support',\n                active: this.is_support,\n            },\n            { id: EncryptionLevel.Admin, name: 'Admin', active: this.is_admin },\n            { id: EncryptionLevel.NeverDisplay, name: 'Encrypted', active: this.is_admin },\n        ];\n        if (this.merge) {\n            levels.unshift({ id: EncryptionLevel.NeverDisplay + 1, name: 'Merged' });\n        }\n        return levels;\n    }\n\n    public type(level: EncryptionLevel) {\n        switch (level) {\n            case EncryptionLevel.None:\n                return 'Unencrypted';\n            case EncryptionLevel.Support:\n                return 'Support';\n            case EncryptionLevel.Admin:\n                return 'Admin';\n        }\n        return 'Never Display';\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'save_all',\n            this._service.Hotkeys.listen(['KeyA'], () => this.saveAll())\n        );\n        this.subscription(\n            'clear_all',\n            this._service.Hotkeys.listen(['KeyC'], () => this.clearChanges())\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.merge) {\n            this.encryption_level = this.merge\n                ? EncryptionLevel.NeverDisplay + 1\n                : EncryptionLevel.None;\n            this.available_levels = this.levels;\n        }\n        if (changes.merge_settings) {\n            this.timeout('update_merge', () => {\n                this.used_settings = this.processSettings(this.settings || []);\n                this.initForm();\n            }, 50);\n        }\n        if (changes.settings) {\n            this.used_settings = this.processSettings(this.settings || []);\n            this.initForm();\n        }\n    }\n\n    /** Save changes to the given setting level */\n    public save(level: EncryptionLevel) {\n        const item = this.used_settings[level];\n        if (\n            item &&\n            !this.saving[level] &&\n            item.changes &&\n            item.changes.settings_string !== undefined\n        ) {\n            this.saving[level] = true;\n            item.save().then(\n                (new_settings: EngineSettings) => {\n                    this.saving[level] = false;\n                    this.settings[level] = new_settings;\n                    this._service.notifySuccess(`Successfully saved ${this.type(level)} settings.`);\n                    this.used_settings = this.processSettings(this.settings || []);\n                    this.initForm();\n                },\n                (err) => {\n                    this.saving[level] = false;\n                    this._service.notifyError(\n                        `Error updating settings. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                }\n            );\n        }\n    }\n\n    /** Save all changes to settings */\n    public saveAll() {\n        if (this.has_errors) {\n            return;\n        }\n        const promises = [];\n        for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n            if (\n                this.settings[i] &&\n                !this.saving[i] &&\n                Object.keys(this.used_settings[i].changes || {}).length\n            ) {\n                this.saving[i] = true;\n                promises.push(this.used_settings[i].save());\n            }\n        }\n        if (promises.length) {\n            Promise.all(promises).then(\n                (results: EngineSettings[]) => {\n                    for (const result of results) {\n                        this.saving[result.encryption_level] = false;\n                        this.settings[result.encryption_level] = result;\n                    }\n                    this._service.notifySuccess('Successfully saved all settings.');\n                    this.used_settings = this.processSettings(this.settings || []);\n                    this.initForm();\n                },\n                (err) => {\n                    for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n                        this.saving[i] = false;\n                    }\n                    this._service.notifyError(\n                        `Error updating settings. Error: ${JSON.stringify(\n                            err.response || err.message || err\n                        )}`\n                    );\n                }\n            );\n        }\n    }\n\n    public clearChanges() {\n        if (this.edited_count < 1) {\n            return;\n        }\n        this.used_settings = this.processSettings(this.settings || []);\n        this.initForm();\n    }\n\n    private initForm() {\n        this.form = new FormGroup({\n            settings0: new FormControl(this.used_settings[0].settings_string, [validateYAML]),\n            settings1: new FormControl(this.used_settings[1].settings_string, [validateYAML]),\n            settings2: new FormControl(this.used_settings[2].settings_string, [validateYAML]),\n            settings3: new FormControl(this.used_settings[3].settings_string, [validateYAML]),\n            settings4: new FormControl(this.used_settings[4].settings_string, [validateYAML]),\n        });\n        for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n            this.subscription(\n                `setting_change_${i}`,\n                this.form.controls[`settings${i}`].valueChanges.subscribe((value) => {\n                    this.used_settings[i].storePendingChange('settings_string', value);\n                })\n            );\n        }\n    }\n\n    private processSettings(settings: EngineSettings[]): EngineSettings[] {\n        const processed_settings = [];\n        for (let i = 0; i < EncryptionLevel.NeverDisplay + 1; i++) {\n            processed_settings.push(this.processSetting(settings[i]));\n        }\n        processed_settings.push(\n            this.merge ? this.generateMergedSettings(processed_settings) : settings[3]\n        );\n        return processed_settings;\n    }\n\n    private processSetting(setting: EngineSettings): EngineSettings {\n        if (\n            (setting.encryption_level === EncryptionLevel.Admin && !this.is_admin) ||\n            (setting.encryption_level === EncryptionLevel.Support && !this.is_support) ||\n            setting.encryption_level === EncryptionLevel.NeverDisplay\n        ) {\n            const obj = {};\n            for (const key of setting.keys) {\n                obj[key] = '<MASKED>';\n            }\n            const settings_string = (setting.keys || []).length ? yaml.safeDump(obj) : '';\n            return new EngineSettings({\n                ...setting.toJSON(),\n                parent_id: this.id,\n                settings_string,\n            });\n        }\n        return new EngineSettings({ ...setting, parent_id: this.id });\n    }\n\n    /** Genereate merged settings from all available settings */\n    private generateMergedSettings(settings: EngineSettings[]): EngineSettings {\n        const local_settings = (settings || []).map((item) => {\n            let obj = {};\n            try {\n                obj = yaml.safeLoad(item.settings_string) || {};\n            } catch (err) {\n                for (const key of item.keys) {\n                    obj[key] = '<MASKED>';\n                }\n            }\n            return obj;\n        });\n        const remote_settings = (this.merge_settings || []).map((item) => {\n            let obj = {};\n            try {\n                obj = yaml.safeLoad(item.settings_string) || {};\n            } catch (err) {\n                for (const key of item.keys) {\n                    obj[key] = '<MASKED>';\n                }\n            }\n            return obj;\n        });\n        const merged_settings = merge.all(remote_settings.concat(local_settings));\n        const settings_string = Object.keys(merged_settings).length\n            ? yaml.safeDump(merged_settings, { strict: true })\n            : '';\n        return new EngineSettings({\n            id: 'merged',\n            settings_string,\n            parent_id: this.id,\n            keys: Object.keys(merged_settings),\n        });\n    }\n}\n","<form *ngIf=\"form && used_settings && used_settings.length\" [formGroup]=\"form\">\n    <div class=\"actions\">\n        <button mat-button *ngIf=\"edited_count > 0\" (tapped)=\"clearChanges()\">\n            <div class=\"text\" *ngIf=\"!saving[shown_option.id]; else spinner\"  i18n=\"@@clearLabel\">Clear Changes [C]</div>\n        </button>\n        <button\n            mat-button\n            *ngIf=\"active_edited\"\n            [disabled]=\"has_errors && !saving[shown_option.id]\"\n            (tapped)=\"save(shown_option.id)\"\n        >\n            <div class=\"text\" *ngIf=\"!saving[shown_option.id]; else spinner\"  i18n=\"@@saveLabel\">Save [S]</div>\n        </button>\n        <button\n            mat-button\n            *ngIf=\"edited_count > 1\"\n            [disabled]=\"has_errors && !saving[shown_option.id]\"\n            (tapped)=\"saveAll()\"\n        >\n            <div class=\"text\" *ngIf=\"!saving[shown_option.id]; else spinner\" i18n=\"@@saveAllLabel\">Save All [A]</div>\n        </button>\n    </div>\n    <mat-tab-group\n        [selectedIndex]=\"level_index\"\n        (selectedIndexChange)=\"encryption_level = available_levels[$event].id\"\n    >\n        <mat-tab\n            *ngFor=\"let option of available_levels\"\n            [label]=\"\n                option.name +\n                (option.id !== 4 && used_settings[option.id]?.changes?.settings_string !== undefined\n                    ? ' *'\n                    : '')\n            \"\n        >\n        </mat-tab>\n    </mat-tab-group>\n    <ng-container *ngFor=\"let option of available_levels\">\n        <ng-container\n            *ngIf=\"encryption_level === option.id && form.controls['settings' + option.id]\"\n        >\n            <div [class.error-border]=\"form.controls['settings' + option.id]?.errors\">\n                <settings-form-field\n                    [formControlName]=\"'settings' + option.id\"\n                    [readonly]=\"!option.active || this.saving[option.id]\"\n                ></settings-form-field>\n            </div>\n            <div class=\"error-display\" *ngIf=\"form.controls['settings' + option.id]?.errors\">\n                {{ form.controls['settings' + option.id].errors.yaml }}\n            </div>\n        </ng-container>\n    </ng-container>\n</form>\n<ng-template #spinner>\n    <mat-spinner diameter=\"32\"></mat-spinner>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EncryptionLevel } from '@placeos/ts-client';\nimport { SPACE, ENTER, COMMA } from '@angular/cdk/keycodes';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { EngineServiceLike, Identity } from 'src/app/shared/utilities/types.utilities';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\n@Component({\n    selector: 'system-form',\n    templateUrl: './system-form.component.html',\n    styleUrls: ['./system-form.component.scss']\n})\nexport class SystemFormComponent extends BaseDirective {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Levels of encyption available for the system's settings */\n    public encryption_levels: Identity[] = [\n        { id: EncryptionLevel.None, name: 'None' },\n        { id: EncryptionLevel.Support, name: 'Support' },\n        { id: EncryptionLevel.Admin, name: 'Admin' },\n        { id: EncryptionLevel.NeverDisplay, name: 'Never Display' }\n    ];\n\n    /** List of separator characters for features */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public get feature_list(): string[] {\n        return this.form.controls.features.value;\n    }\n\n    /** Service for handling zones */\n    public get zone_service(): EngineServiceLike {\n        return this._service.Zones;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addFeature(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.features) return;\n        const input = event.input;\n        const value = event.value;\n        const feature_list = this.feature_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.features.setValue(feature_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove feature from the list\n     * @param existing_feature Feature to remove\n     */\n    public removeFeature(existing_feature: string): void {\n        if (!this.form || !this.form.controls.features) return;\n        const feature_list = this.feature_list;\n        const index = feature_list.indexOf(existing_feature);\n\n        if (index >= 0) {\n            feature_list.splice(index, 1);\n            this.form.controls.features.setValue(feature_list);\n        }\n    }\n}\n","<div class=\"system form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.zone\">\n            <label\n                for=\"zone\"\n                [class.error]=\"form.controls.zone.invalid && form.controls.zone.touched\"\n                i18n=\"@@zoneLabel\"\n            >\n                Zone<span>*</span>:\n            </label>\n            <item-search-field [service]=\"zone_service\" formControlName=\"zone\"></item-search-field>\n            <div\n                class=\"error\"\n                *ngIf=\"form.controls.zone.invalid && form.controls.zone.touched\"\n                i18n=\"@@zoneError\"\n            >\n                Zone is required\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"system-name\"\n                    [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                    i18n=\"@@nameLabel\"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"system-name\"\n                        placeholder=\"System Name\"\n                        i18n-placeholder=\"@@systemNamePlaceholder\"\n                        formControlName=\"name\"\n                        required\n                    />\n                    <mat-error *ngIf=\"form.controls.name.invalid\" i18n=\"@@systemNameError\"\n                        >System name is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label\n                    for=\"system-email\"\n                    [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                    i18n=\"@@emailLabel\"\n                >\n                    Email:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"system-email\"\n                        placeholder=\"System Email\"\n                        i18n-placeholder=\"@@systemEmailPlaceholder\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error *ngIf=\"form.controls.email.invalid\" i18n=\"@@emailError\"\n                        >A valid email is required</mat-error\n                    >\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.display_name\">\n            <label for=\"display-name\" i18n=\"@@displayNameLabel\">Display Name: </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"display-name\"\n                    placeholder=\"Display Name\"\n                    i18n-placeholder=\"@@displayNamePlaceholder\"\n                    formControlName=\"display_name\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.support_url\">\n            <label\n                for=\"support-url\"\n                [class.error]=\"\n                    form.controls.support_url.invalid && form.controls.support_url.touched\n                \"\n                i18n=\"@@supportUrlLabel\"\n            >\n                Support URL:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"support-url\"\n                    placeholder=\"Support URL\"\n                    i18n-placeholder=\"@@suportUrlPlaceholder\"\n                    formControlName=\"support_url\"\n                />\n                <mat-error *ngIf=\"form.controls.support_url.invalid\" i18n=\"@@urlError\">\n                    A valid URL is required\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.installed_ui_devices\">\n                <label\n                    for=\"ui-devices\"\n                    [class.error]=\"\n                        form.controls.installed_ui_devices.invalid &&\n                        form.controls.installed_ui_devices.touched\n                    \"\n                    i18n=\"@@panelCountLabel\"\n                >\n                    Number of Touch Panels:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"ui-devices\"\n                        type=\"number\"\n                        placeholder=\"Number of Touch Panels\"\n                        i18n-placeholder=\"@@panelCountPlaceholder\"\n                        formControlName=\"installed_ui_devices\"\n                    />\n                    <mat-error\n                        *ngIf=\"form.controls.installed_ui_devices.invalid\"\n                        i18n=\"@@panelCountError\"\n                    >\n                        A valid positive number is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.capacity\">\n                <label\n                    for=\"capacity\"\n                    [class.error]=\"form.controls.capacity.invalid && form.controls.capacity.touched\"\n                    i18n=\"@@capacityLabel\"\n                >\n                    Capacity:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"capacity\"\n                        type=\"number\"\n                        placeholder=\"Capacity\"\n                        i18n-placeholder=\"@@capacityPlaceholder\"\n                        formControlName=\"capacity\"\n                    />\n                    <mat-error *ngIf=\"form.controls.capacity.invalid\" i18n=\"@@capacityError\">\n                        A valid positive number is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.bookable\">\n                <mat-checkbox name=\"bookable\" formControlName=\"bookable\" i18n=\"@@bookableLabel\">\n                    Bookable\n                </mat-checkbox>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.features\">\n            <label\n                [class.error]=\"form.controls.features.invalid && form.controls.features.touched\"\n                i18n=\"@@featuresLabel\"\n            >\n                Features:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-chip-list #chipList aria-label=\"System features\">\n                    <mat-chip\n                        *ngFor=\"let feature of feature_list\"\n                        [selectable]=\"true\"\n                        [removable]=\"true\"\n                        (removed)=\"removeFeature(feature)\"\n                    >\n                        {{ feature }}\n                        <app-icon matChipRemove [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                    </mat-chip>\n                    <input\n                        placeholder=\"Features...\"\n                        i18n-placeholder=\"@@featuresPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addFeature($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.map_id\">\n            <label for=\"map_id\" i18n=\"@@mapIdLabel\">Map ID:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"map_id\"\n                    i18n-placeholder=\"@@mapIdPlaceholder\"\n                    placeholder=\"Map SVG ID selector e.g. area-01.10-status\"\n                    formControlName=\"map_id\"\n                />\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'system-trigger-form',\n  templateUrl: './system-trigger-form.component.html',\n  styleUrls: ['./system-trigger-form.component.scss']\n})\nexport class SystemTriggerFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"system-trigger form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label for=\"name\" i18n=\"@@nameLabel\"> Name: </label>\n            <div class=\"value\" name=\"name\">{{ form.controls.name.value }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label for=\"triggered\" i18n=\"@@triggeredLabel\"> Currently Triggered: </label>\n            <div class=\"value\" name=\"triggered\">{{ !!form.controls.triggered.value }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.enabled\">\n            <mat-checkbox name=\"enabled\" formControlName=\"enabled\" i18n=\"@@enabledLabel\">Enabled</mat-checkbox>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.exec_enabled\">\n            <mat-checkbox name=\"enabled\" formControlName=\"exec_enabled\" i18n=\"@@execEnabledLabel\">ExecuteEnabled</mat-checkbox>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.important\">\n            <mat-checkbox name=\"important\" formControlName=\"important\" i18n=\"@@importantLabel\">Important</mat-checkbox>\n        </div>\n    </form>\n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ENTER, COMMA, SPACE } from '@angular/cdk/keycodes';\nimport { MatChipList } from '@angular/material/chips';\nimport { EngineSystem } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'trigger-action-form',\n    templateUrl: './trigger-action-form.component.html',\n    styleUrls: ['./trigger-action-form.component.scss']\n})\nexport class TriggerActionFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Systems used for templating the status variables */\n    @Input() public system: EngineSystem;\n    /** List of seperators for storing emails */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n    /** Variable to hold new email addresses */\n    public new_email = '';\n\n    @ViewChild('chipList') private chip_list: MatChipList;\n\n    /** List of available trigger action types */\n    public action_types: Identity[] = [\n        { id: 'function', name: 'Execute Method' },\n        { id: 'email', name: 'Send Email' }\n    ];\n\n    public get email_list(): string[] {\n        return (\n            (this.form && this.form.controls.emails ? this.form.controls.emails.value : null) || []\n        );\n    }\n\n    /**\n     * Add the given emails to the list\n     * @param email New email\n     */\n    public addEmail(email: string): void {\n        if (!email) {\n            return;\n        }\n        const email_list = this.email_list;\n        if (email_list.indexOf(email) < 0) {\n            email_list.push(email);\n        }\n        this.form.controls.emails.setValue(email_list);\n        this.chip_list.errorState = !this.form.controls.emails.valid;\n    }\n\n    /**\n     * Remove given email from the list\n     * @param email Exisiting email\n     */\n    public removeEmail(email: string): void {\n        const email_list = this.email_list;\n        const index = email_list.indexOf(email);\n        if (index >= 0) {\n            email_list.splice(index, 1);\n        }\n        this.form.controls.emails.setValue(email_list);\n        this.chip_list.errorState = !this.form.controls.emails.valid;\n    }\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.action_type\">\n            <label for=\"type\">Action Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"action_type\">\n                    <mat-option *ngFor=\"let type of action_types\" [value]=\"type.id\">\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container [ngSwitch]=\"form.controls.action_type.value\">\n            <ng-container *ngSwitchCase=\"'email'\">\n                <div class=\"field\" *ngIf=\"form.controls.emails\">\n                    <label\n                        for=\"description\"\n                        [class.error]=\"form.controls.emails.touched && form.controls.emails.errors\"\n                        i18n=\"@@emailAddressesLabel\"\n                    >\n                        Email Addresses<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-chip-list #chipList aria-label=\"Email addresses\">\n                            <mat-chip\n                                *ngFor=\"let email of email_list\"\n                                [selectable]=\"true\"\n                                [removable]=\"true\"\n                                (removed)=\"removeEmail(email)\"\n                            >\n                                {{ email }}\n                                <app-icon\n                                    matChipRemove\n                                    [icon]=\"{ class: 'backoffice-cross' }\"\n                                ></app-icon>\n                            </mat-chip>\n                            <input\n                                [(ngModel)]=\"new_email\"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                placeholder=\"New email...\"\n                                i18n-placeholder=\"@@addEmailPlaceholder\"\n                                [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separators\"\n                                [matChipInputAddOnBlur]=\"true\"\n                                (matChipInputTokenEnd)=\"addEmail($event.value); new_email = ''\"\n                            />\n                        </mat-chip-list>\n                        <mat-error>{{\n                            form.controls.emails.hasError('email')\n                                ? 'Email addresses need to be valid'\n                                : 'An email address is required'\n                        }}</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\" *ngIf=\"form.controls.content\">\n                    <label for=\"content\" i18n=\"@@emailBodyLabel\">Email Body:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"content\"\n                            placeholder=\"Email body contents...\"\n                            i18n-placeholder=\"@@emailBodyPlacholder\"\n                            formControlName=\"content\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <div class=\"field\" *ngIf=\"form.controls.method_call\">\n                    <label for=\"content\" i18n=\"@@selectExecLabel\">Select method to execute:</label>\n                    <system-exec-field\n                        formControlName=\"method_call\"\n                        [system]=\"system\"\n                        [executable]=\"false\"\n                    ></system-exec-field>\n                </div>\n            </ng-container>\n        </ng-container>\n    </form>\n</div>\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    EngineModule,\n    EngineSystem,\n    TriggerConditionOperator,\n    TriggerStatusVariable\n} from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { calculateModuleIndex } from 'src/app/shared/utilities/api.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: 'trigger-condition-comparison-form',\n    templateUrl: './comparison-form.component.html',\n    styleUrls: ['./comparison-form.component.scss']\n})\nexport class TriggerConditionComparisonFormComponent implements OnInit, OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Systems used for templating the status variables */\n    @Input() public system: EngineSystem;\n    /** List of modules associated with the template system */\n    public modules: EngineModule[] = [];\n    /** List of status variables associated with the selected module */\n    public module_list: Identity[] = [];\n    /** List of status variables associated with the selected module */\n    public left_status_variables: Identity[] = [];\n    /** List of status variables associated with the selected module */\n    public right_status_variables: Identity[] = [];\n    /** Type of value to compare the left hand side to */\n    public rhs_type: 'constant' | 'status_var' = 'constant';\n    /** Type of value to compare the left hand side to */\n    public rhs_value: string;\n    /** Status variable details for the left side of the comparison */\n    public left_side: TriggerStatusVariable = { mod: '', status: '', keys: [] };\n    /** Status variable details for the right side of the comparison */\n    public right_side: TriggerStatusVariable = { mod: '', status: '', keys: [] };\n\n    /** Types of trigger conditions */\n    public right_var_type: Identity[] = [\n        { id: 'constant', name: 'Constant Value' },\n        { id: 'status_var', name: 'Status Variable' }\n    ];\n\n    /** Allowed comparison operators */\n    public compare_types: Identity[] = [\n        { id: TriggerConditionOperator.EQ, name: 'equal to' },\n        { id: TriggerConditionOperator.NEQ, name: 'not equal to' },\n        { id: TriggerConditionOperator.GT, name: 'greater than' },\n        { id: TriggerConditionOperator.GTE, name: 'greater than or equal' },\n        { id: TriggerConditionOperator.LT, name: 'less than' },\n        { id: TriggerConditionOperator.LTE, name: 'less than or equal' },\n        { id: TriggerConditionOperator.AND, name: 'truthy AND' },\n        { id: TriggerConditionOperator.OR, name: 'truthy OR' },\n        { id: TriggerConditionOperator.XOR, name: 'truthy XOR' }\n    ];\n\n    public get left_keys(): string {\n        return this.left_side.keys.join(',');\n    }\n    public get right_keys(): string {\n        return this.right_side.keys.join(',');\n    }\n\n    constructor(private _service: ApplicationService) {}\n\n    public ngOnInit(): void {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.system && this.system) {\n            this.loadSystemModules();\n        }\n    }\n\n    public updateFormForSide(side: 'left' | 'right') {\n        if (this.form.controls[side]) {\n            this.form.controls[side].setValue(this[side + '_side']);\n        }\n    }\n\n    /**\n     * Load the list of status variables for the given modules\n     * @param module Module to list status variables\n     */\n    public loadSystemStatusVariables(mod_name: string, side: 'left' | 'right') {\n        const name = mod_name.split('_');\n        this._service.Systems.state(this.system.id, name[0], +name[1]).then(\n            var_map => {\n                if (Object.keys(var_map).length <= 0) {\n                    var_map.connected = true;\n                }\n                this[`${side}_status_variables`] = Object.keys(var_map).map(key => ({\n                    id: key,\n                    name: key\n                }));\n                this.addExistingStatusVariables();\n            },\n            () =>\n                this._service.notifyError(\n                    `Error loading the status variables for ${this.system.id}, ${mod_name}`\n                )\n        );\n    }\n\n    /**\n     * Load the list of modules for the active system\n     */\n    private loadSystemModules() {\n        if (!this.system) {\n            return;\n        }\n        this._service.Modules.query({ control_system_id: this.system.id }).then(module_list => {\n            this.modules = module_list;\n            const mod_list = this.system.modules;\n            this.modules.sort((a, b) => mod_list.indexOf(a.id) - mod_list.indexOf(b.id));\n            this.module_list = this.modules.map(mod => {\n                const module_class =\n                    mod.custom_name || (mod.driver ? mod.driver.class_name : 'System');\n                const index = calculateModuleIndex(this.modules, mod);\n                return {\n                    id: mod.id,\n                    name: `${module_class}_${index}`\n                };\n            });\n            this.addExistingModules();\n        });\n    }\n\n    /**\n     * Add pre-exisiting module detail to the available list\n     */\n    private addExistingModules() {\n        if (this.form.controls.left && this.form.controls.left.value) {\n            const module = this.form.controls.left.value.mod;\n            if (!this.module_list.find(mod => mod.name === module)) {\n                this.module_list.unshift({ id: 'old_left_value', name: module });\n            }\n            this.loadSystemStatusVariables(module, 'left');\n            this.left_side = this.form.controls.left.value;\n        }\n        if (\n            this.form.controls.right &&\n            this.form.controls.right.value &&\n            this.form.controls.right.value.mod\n        ) {\n            this.rhs_type = 'status_var';\n            const module = this.form.controls.right.value.mod;\n            if (!this.module_list.find(mod => mod.name === module)) {\n                this.module_list.unshift({ id: 'old_right_value', name: module });\n            }\n            this.loadSystemStatusVariables(module, 'right');\n            this.right_side = this.form.controls.right_side.value;\n        }\n    }\n\n    /**\n     * Add pre-exisiting status variables to the available list\n     */\n    private addExistingStatusVariables() {\n        if (this.left_side.status) {\n            if (!this.left_status_variables.find(status => status.name === this.left_side.status)) {\n                this.left_status_variables.unshift({\n                    id: this.left_side.status,\n                    name: this.left_side.status\n                });\n            }\n        }\n        if (this.right_side.status) {\n            if (\n                !this.right_status_variables.find(status => status.name === this.right_side.status)\n            ) {\n                this.right_status_variables.unshift({\n                    id: this.right_side.status,\n                    name: this.right_side.status\n                });\n            }\n        }\n    }\n}\n","<div class=\"trigger-condition form comparison\" *ngIf=\"form\" [formGroup]=\"form\">\n    <ng-container\n        *ngTemplateOutlet=\"status_variable_form; context: { side: 'left' }\"\n    ></ng-container>\n    <div *ngIf=\"form.controls.left.touched && form.controls.left.errors\" class=\"error\" i18n=\"@@statusVarError\">\n        A module status variable is required\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.operator\">\n        <label for=\"operator\" hidden i18n=\"@@operationLabel\">Operation:</label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select name=\"operator\" formControlName=\"operator\" placeholder=\"Select comparison operator\">\n                <mat-option *ngFor=\"let operation of compare_types\" [value]=\"operation.id\">\n                    {{ operation.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.operator\">\n        <label for=\"compared-to\" hidden i18n=\"@@comparedLabel\">Compared to:</label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"compared-to\"\n                [(ngModel)]=\"rhs_type\"\n                (ngModelChange)=\"form.controls.right.setValue(null)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n            >\n                <mat-option *ngFor=\"let type of right_var_type\" [value]=\"type.id\">\n                    {{ type.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"rhs_type === 'constant' && form.controls.right; else rhs_status_var\">\n        <label for=\"constant\" hidden i18n=\"@@comparedLabel\">Compared to:</label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"constant\"\n                formControlName=\"right\"\n                placeholder=\"true/false, 'string', 123.456\"\n                i18n-placeholder=\"@@comparedValue\"\n            />\n            <mat-error i18n=\"@@statusValueError\">Valid JSON is required</mat-error>\n        </mat-form-field>\n    </div>\n</div>\n<ng-template #rhs_status_var>\n    <ng-container\n        *ngTemplateOutlet=\"status_variable_form; context: { side: 'right' }\"\n    ></ng-container>\n</ng-template>\n<ng-template #status_variable_form let-side=\"side\">\n    <div class=\"fieldset\">\n        <div class=\"field\">\n            <label for=\"type\"  i18n=\"@@moduleLabel\">Module:</label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    name=\"type\"\n                    [(ngModel)]=\"this[side + '_side'].mod\"\n                    (ngModelChange)=\"loadSystemStatusVariables($event, side)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                    placeholder=\"Select module\"\n                >\n                    <mat-option *ngFor=\"let mod of module_list\" [value]=\"mod.name\">\n                        {{ mod.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div\n            class=\"field\"\n            *ngIf=\"this[side + '_status_variables'] && this[side + '_status_variables'].length\"\n        >\n            <label [for]=\"side + '-status-var'\" i18n=\"@@statusVarLabel\">Status Variable:</label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [name]=\"side + '-status-var'\"\n                    [(ngModel)]=\"this[side + '_side'].status\"\n                    (ngModelChange)=\"updateFormForSide(side)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                    placeholder=\"Select status variable\"\n                    i18n-placeholder=\"@@statusVarPlaceholder\"\n                >\n                    <mat-option\n                        *ngFor=\"let mod of this[side + '_status_variables']\"\n                        [value]=\"mod.name\"\n                    >\n                        {{ mod.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n    <div\n        class=\"field\"\n        *ngIf=\"this[side + '_status_variables'] && this[side + '_status_variables'].length\"\n    >\n        <label [for]=\"side + '-subkeys'\"  i18n=\"@@subkeysLabel\">Subkeys:</label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                [ngModel]=\"this[side + '_keys']\"\n                (ngModelChange)=\"this[side + '_side'].keys = $event.split(','); updateFormForSide(side);\"\n                [name]=\"side + '-subkeys'\"\n                placeholder=\"Status variable subkeys...\"\n                i18n-placeholder=\"@@subkeysPlaceholder\"\n            />\n        </mat-form-field>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { numberToPosition } from 'src/app/shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\nimport * as cron from 'cron-builder';\n\n@Component({\n    selector: 'trigger-condition-time-form',\n    templateUrl: './time-form.component.html',\n    styleUrls: ['./time-form.component.scss']\n})\nexport class TriggerConditionTimeFormComponent implements OnChanges {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of available periods for scheduled repetition */\n    public repeat_period: Identity[] = [\n        { id: 'minute', name: 'Minute' },\n        { id: 'hour', name: 'Hour' },\n        { id: 'day', name: 'Day' },\n        { id: 'week', name: 'Week' },\n        { id: 'month', name: 'Month' },\n        { id: 'year', name: 'Year' }\n    ];\n    /** Whether condition is a cron(recurring) job */\n    public is_cron: boolean;\n    /** The period which the user selects the recurrence */\n    public cron_period: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year' = 'minute';\n\n    public minutes_in_hour = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];\n    public hours_in_day = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n    public days_of_week = Array(7)\n        .fill(0)\n        .map((_, index) =>\n            dayjs()\n                .day(index)\n                .format('ddd')\n        );\n    public days_of_month: Identity[] = Array(31)\n        .fill(0)\n        .map((_, index) => ({ id: index + 1, name: `${numberToPosition(index + 1)}` }));\n    public months_of_year = Array(12)\n        .fill(0)\n        .map((_, index) =>\n            dayjs()\n                .month(index)\n                .format('MMM')\n        );\n    /** Minute of the hour to recurr on */\n    public cron_minute = 0;\n    /** Hour of the day to recurr on */\n    public cron_hour = 0;\n    /** Hour of the day to recurr on */\n    public cron_hour_period = 'AM';\n    /** Hour of the day to recurr on */\n    public cron_day = this.days_of_week[0];\n    /** Hour of the day to recurr on */\n    public cron_date = 1;\n    /** Hour of the day to recurr on */\n    public cron_month = this.months_of_year[0];\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form && this.form) {\n            this.is_cron = this.form.controls.time_type.value === 'cron';\n            if (this.is_cron) {\n                this.loadCronTab(this.form.controls.cron.value);\n            }\n        }\n    }\n\n    /**\n     * Update the output CRON string for the selected periods\n     */\n    public updateCronString() {\n        if (this.form && this.form.controls.cron) {\n            const current_cron = new cron();\n            const hour = (this.cron_hour % 12) + (this.cron_hour_period === 'AM' ? 0 : 12);\n            const day_of_week = this.days_of_week.indexOf(this.cron_day);\n            const month = this.months_of_year.indexOf(this.cron_month);\n            switch (this.cron_period) {\n                case 'minute':\n                    break;\n                case 'hour':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    break;\n                case 'day':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    break;\n                case 'week':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    current_cron.set('dayOfTheWeek', [`${day_of_week + 1}`]);\n                    break;\n                case 'month':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    current_cron.set('dayOfTheMonth', [`${this.cron_date}`]);\n                    break;\n                case 'year':\n                    current_cron.set('minute', [`${this.cron_minute}`]);\n                    current_cron.set('hour', [`${hour}`]);\n                    current_cron.set('dayOfTheMonth', [`${this.cron_date}`]);\n                    current_cron.set('month', [`${month + 1}`]);\n                    break;\n            }\n            const cron_str = current_cron.build();\n            this.form.controls.cron.setValue(cron_str);\n        }\n    }\n\n    private loadCronTab(cron_tab: string): void {\n        const cron_str = new cron(cron_tab);\n        this.cron_minute =\n            cron_str.get('minute') === '*' ? this.cron_minute : +cron_str.get('minute');\n        this.cron_hour = cron_str.get('hour') === '*' ? this.cron_minute : +cron_str.get('hour');\n        if (this.cron_hour > 12) {\n            this.cron_hour = this.cron_hour % 12;\n            this.cron_hour_period = 'PM';\n        } else {\n            this.cron_hour_period = 'AM';\n        }\n        this.cron_day =\n            cron_str.get('dayOfTheWeek') === '*'\n                ? this.cron_day\n                : this.days_of_week[+cron_str.get('dayOfTheWeek')];\n        this.cron_date =\n            cron_str.get('dayOfTheMonth') === '*' ? this.cron_date : +cron_str.get('dayOfTheMonth');\n        this.cron_month =\n            cron_str.get('month') === '*'\n                ? this.cron_month\n                : this.months_of_year[+cron_str.get('month') - 1];\n        /** Set the cron period */\n        if (cron_str.get('month') !== '*') {\n            this.cron_period = 'year';\n        } else if (cron_str.get('dayOfTheMonth') !== '*') {\n            this.cron_period = 'month';\n        } else if (cron_str.get('dayOfTheWeek') !== '*') {\n            this.cron_period = 'week';\n        } else if (cron_str.get('hour') !== '*') {\n            this.cron_period = 'day';\n        } else if (cron_str.get('minute') !== '*') {\n            this.cron_period = 'hour';\n        } else {\n            this.cron_period = 'minute';\n        }\n    }\n}\n","<div class=\"trigger-condition form time\" *ngIf=\"form\" [formGroup]=\"form\">\n    <div class=\"field\">\n        <mat-checkbox [(ngModel)]=\"is_cron\" (ngModelChange)=\"form.controls.cron.setValue(null)\" [ngModelOptions]=\"{ standalone: true }\" i18n=\"@@recurringLabel\">\n            Recurring Schedule\n        </mat-checkbox>\n    </div>\n    <div class=\"fieldset\" *ngIf=\"!is_cron; else cron_time_form\">\n        <div class=\"field\" *ngIf=\"form.controls.time\">\n            <label for=\"type\" i18n=\"@@dateLabel\">Date: </label>\n            <a-date-field name=\"date\" formControlName=\"time\"></a-date-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.time\">\n            <label for=\"type\" i18n=\"@@timeLabel\">Time: </label>\n            <a-time-field name=\"date\" formControlName=\"time\"></a-time-field>\n        </div>\n    </div>\n</div>\n<ng-template #cron_time_form>\n    <div class=\"field\">\n        <label for=\"type\" i18n=\"@@repeatLabel\">Repeat every: </label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"type\"\n                [(ngModel)]=\"cron_period\"\n                (ngModelChange)=\"updateCronString()\"\n                [ngModelOptions]=\"{ standalone: true }\"\n            >\n                <mat-option *ngFor=\"let period of repeat_period\" [value]=\"period.id\">\n                    {{ period.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period === 'month' || cron_period === 'year'\">\n        <label for=\"day\" i18n=\"@@dayLabel\">Day of Month: </label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"day\"\n                [(ngModel)]=\"cron_date\"\n                (ngModelChange)=\"updateCronString()\"\n                [ngModelOptions]=\"{ standalone: true }\"\n            >\n                <mat-option *ngFor=\"let period of days_of_month\" [value]=\"period.id\">\n                    {{ period.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period === 'year'\">\n        <label for=\"month\" i18n=\"@@monthLabel\">Month of year: </label>\n        <mat-button-toggle-group\n            name=\"month\"\n            [(ngModel)]=\"cron_month\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let month of months_of_year\" [value]=\"month\">\n                {{ month }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period === 'week'\">\n        <label for=\"weekday\" i18n=\"@@weekLabel\">Day of week: </label>\n        <mat-button-toggle-group\n            name=\"weekday\"\n            [(ngModel)]=\"cron_day\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let weekday of days_of_week\" [value]=\"weekday\">\n                {{ weekday }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period !== 'minute' && cron_period !== 'hour'\">\n        <label for=\"hour\"i18n=\"@@hourLabel\">Hour in the day: </label>\n        <mat-button-toggle-group\n            name=\"hour\"\n            [(ngModel)]=\"cron_hour\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let hour of hours_in_day\" [value]=\"hour\">\n                {{ hour }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n        <mat-button-toggle-group\n            name=\"hour\"\n            [(ngModel)]=\"cron_hour_period\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let hour of ['AM', 'PM']\" [value]=\"hour\">\n                {{ hour }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n    <div class=\"field\" *ngIf=\"cron_period !== 'minute'\">\n        <label for=\"minute\"i18n=\"@@minuteLabel\">Minute past the hour: </label>\n        <mat-button-toggle-group\n            name=\"minute\"\n            [(ngModel)]=\"cron_minute\"\n            (ngModelChange)=\"updateCronString()\"\n            [ngModelOptions]=\"{ standalone: true }\"\n        >\n            <mat-button-toggle *ngFor=\"let minute of minutes_in_hour\" [value]=\"minute\">\n                {{ minute }}\n            </mat-button-toggle>\n        </mat-button-toggle-group>\n    </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EngineSystem } from '@placeos/ts-client';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'trigger-condition-form',\n    templateUrl: './trigger-condition-form.component.html',\n    styleUrls: ['./trigger-condition-form.component.scss']\n})\nexport class TriggerConditionFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Systems used for templating the status variables */\n    @Input() public system: EngineSystem;\n\n    /** Types of trigger conditions */\n    public condition_types: Identity[] = [\n        { id: 'compare', name: 'Compare values' },\n        { id: 'time', name: 'Particular time' }\n    ];\n}\n","<div class=\"module form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.condition_type\">\n            <label for=\"type\" i18n=\"@@conditionTypeLabel\">Condition Type: </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"type\" formControlName=\"condition_type\">\n                    <mat-option *ngFor=\"let type of condition_types\" [value]=\"type.id\" i18n=\"@@triggerConditionType\">\n                        { type.id, select, compare { Compare Values } time { Particular Time } }\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <ng-container *ngIf=\"form.controls.condition_type.value === 'compare'; else time_form\">\n            <trigger-condition-comparison-form [form]=\"form\" [system]=\"system\"></trigger-condition-comparison-form>\n        </ng-container>\n    </form>\n</div>\n<ng-template #time_form>\n    <trigger-condition-time-form [form]=\"form\"></trigger-condition-time-form>\n</ng-template>\n\n\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'trigger-form',\n    templateUrl: './trigger-form.component.html',\n    styleUrls: ['./trigger-form.component.scss']\n})\nexport class TriggerFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"zone form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"trigger-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"trigger-name\"\n                    placeholder=\"Trigger Name\"\n                    i18n-placeholder=\"@@triggerNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@triggerError\">Trigger name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.enable_webhook\">\n            <mat-checkbox\n                name=\"enable-webhook\"\n                formControlName=\"enable_webhook\"\n                i18n=\"@@enableWebhooklabel\"\n            >\n                Enable Webhook\n            </mat-checkbox>\n        </div>\n        <div\n            class=\"field\"\n            *ngIf=\"form.controls.enable_webhook.value && form.controls.debounce_period\"\n        >\n            <label\n                for=\"debounce-period\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@debounceLabel\"\n            >\n                Debounce Period:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"debounce-period\"\n                    type=\"number\"\n                    placeholder=\"Debounce Period\"\n                    i18n-placeholder=\"@@debouncePlaceholder\"\n                    formControlName=\"debounce_period\"\n                    required\n                />\n                <mat-error i18n=\"@@debounceError\">Debounce period must be 0 or greater</mat-error>\n            </mat-form-field>\n        </div>\n        <div\n            class=\"field\"\n            *ngIf=\"form.controls.enable_webhook.value && form.controls.supported_methods\"\n        >\n            <label\n                for=\"methods\"\n                i18n=\"@@supportedMethodsLabel\"\n            >\n                Supported Methods:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <mat-select name=\"methods\" multiple formControlName=\"supported_methods\">\n                    <mat-option value=\"GET\">GET</mat-option>\n                    <mat-option value=\"POST\">POST</mat-option>\n                    <mat-option value=\"PUT\">PUT</mat-option>\n                    <mat-option value=\"PATCH\">PATCH</mat-option>\n                    <mat-option value=\"DELETE\">DELETE</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    templateUrl: './user-form.component.html',\n    styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** Whether password should be visible in plaintext */\n    public show_password: boolean;\n    /** Whether password confirm should be visible in plaintext */\n    public show_confirm: boolean;\n}\n","<form class=\"user form\" *ngIf=\"form\" [formGroup]=\"form\">\n    <!--  fake fields are a workaround for chrome/opera autofill getting the wrong fields -->\n    <input id=\"email\" style=\"display: none;\" type=\"text\" name=\"fakeusernameremembered\" />\n    <input id=\"password\" style=\"display: none;\" type=\"password\" name=\"fakepasswordremembered\" />\n    <div class=\"field\" *ngIf=\"form.controls.name\">\n        <label\n            for=\"system-name\"\n            [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n            i18n=\"@@nameLabel\"\n        >\n            Name<span>*</span>:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"name\"\n                placeholder=\"Name\"\n                i18n-placeholder=\"@@namePlaceholder\"\n                formControlName=\"name\"\n                required\n            />\n            <mat-error i18n=\"@@userNameError\">User's name is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.email\">\n        <label\n            for=\"useremail\"\n            [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n            i18n=\"@@emailLabel\"\n        >\n            Email<span>*</span>:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"useremail\"\n                placeholder=\"Email\"\n                i18n-placeholder=\"@@emailPlaceholder\"\n                formControlName=\"email\"\n                autocomplete=\"nope\"\n            />\n            <mat-error i18n=\"@@emailError\">A valid email is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.staff_id\">\n        <label\n            for=\"staff-id\"\n            [class.error]=\"form.controls.staff_id.invalid && form.controls.staff_id.touched\"\n            i18n=\"@@cardNumberLabel\"\n        >\n            Card Number:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"staff-id\"\n                placeholder=\"Card Number\"\n                i18n-placeholder=\"@@cardNumberPlaceholder\"\n                formControlName=\"staff_id\"\n            />\n            <mat-error i18n=\"@@cardNumberError\">A valid Card Number is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.support\">\n        <mat-checkbox name=\"support\" formControlName=\"support\" i18n=\"@@supportLabel\"\n            >Support</mat-checkbox\n        >\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.sys_admin\">\n        <mat-checkbox name=\"sys_admin\" formControlName=\"sys_admin\" i18n=\"@@adminLabel\"\n            >System Admin</mat-checkbox\n        >\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.staff_id\">\n        <label\n            for=\"new-password\"\n            [class.error]=\"form.controls.password.invalid && form.controls.password.touched\"\n            i18n=\"@@passwordLabel\"\n        >\n            Password:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                name=\"new-password\"\n                autocomplete=\"new-password\"\n                [type]=\"show_password ? 'text' : 'password'\"\n                placeholder=\"Password\"\n                i18n-placeholder=\"@@passwordPlaceholder\"\n                formControlName=\"password\"\n            />\n            <app-icon\n                matSuffix\n                [icon]=\"{ class: 'material-icons', content: 'visibility' }\"\n                (mousedown)=\"show_password = true\"\n                (window:mouseup)=\"show_password = false\"\n                (touchstart)=\"show_password = true\"\n                (window:touchend)=\"show_password = false\"\n            ></app-icon>\n            <mat-error i18n=\"@@passordError\">A valid password is required</mat-error>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.confirm_password\">\n        <label\n            for=\"confirm-password\"\n            [class.error]=\"\n                form.controls.confirm_password.invalid && form.controls.confirm_password.touched\n            \"\n            minlength=\"1\"\n            i18n=\"@@checkPasswordLabel\"\n        >\n            Confirm Pasword:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                [type]=\"show_confirm ? 'text' : 'password'\"\n                name=\"confirm-password\"\n                placeholder=\"Confirm Password\"\n                i18n-placeholder=\"@@checkPasswordPlaceholder\"\n                formControlName=\"confirm_password\"\n                minlength=\"1\"\n            />\n            <app-icon\n                matSuffix\n                [icon]=\"{ class: 'material-icons', content: 'visibility' }\"\n                (mousedown)=\"show_confirm = true\"\n                (window:mouseup)=\"show_confirm = false\"\n                (touchstart)=\"show_confirm = true\"\n                (window:touchend)=\"show_confirm = false\"\n            ></app-icon>\n            <mat-error i18n=\"@@checkPasswordError\">Passwords don't match</mat-error>\n        </mat-form-field>\n    </div>\n</form>\n","<div class=\"zone form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.parent_zone\">\n            <label for=\"parent-zone\" i18n=\"@@parentZoneLabel\">Parent Zone: </label>\n            <item-search-field\n                name=\"parent-zone\"\n                [service]=\"zone_service\"\n                [exclude]=\"exclude\"\n                formControlName=\"parent_zone\"\n            ></item-search-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"zone-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"@@nameLabel\"\n                >\n                Name<span>*</span>:\n                </label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"zone-name\"\n                    placeholder=\"Zone Name\"\n                    i18n-placeholder=\"@@zoneNamePlaceholder\"\n                    formControlName=\"name\"\n                    required\n                />\n                <mat-error i18n=\"@@zoneNameError\">Zone name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.display_name\">\n            <label\n                for=\"zone-display\"\n                [class.error]=\"form.controls.display_name.invalid && form.controls.display_name.touched\"\n            >\n                Display Name:\n            </label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"zone-display\"\n                    placeholder=\"Zone display name\"\n                    i18n-placeholder=\"@@zoneDisplayNamePlaceholder\"\n                    formControlName=\"display_name\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.tags\">\n            <label\n                for=\"system-email\"\n                [class.error]=\"form.controls.tags.invalid && form.controls.tags.touched\"\n                i18n=\"@@tagsLabel\"\n                >\n                Tags:\n                </label\n            >\n            <mat-form-field appearance=\"outline\">\n                <mat-chip-list #chipList aria-label=\"Zone Tags\">\n                    <mat-chip\n                        *ngFor=\"let tag of tag_list\"\n                        [selectable]=\"true\"\n                        [removable]=\"true\"\n                        (removed)=\"removeTag(tag)\"\n                    >\n                        {{ tag }}\n                        <app-icon matChipRemove [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n                    </mat-chip>\n                    <input\n                        placeholder=\"Zone tags...\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-chip-list>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.description\">\n            <label for=\"description\" i18n=\"@@descriptionLabel\">Description:</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    i18n-placeholder=\"@@descriptionPlaceholder\"\n                    formControlName=\"description\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.location\">\n            <label for=\"location\" i18n=\"@@locationLabel\">Location:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"location\"\n                    placeholder=\"Geo-location details for zone. <lat, long>\"\n                    i18n-placeholder=\"@@locationPlaceholder\"\n                    formControlName=\"location\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.code\">\n                <label for=\"code\" i18n=\"@@codeLabel\">Code:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"code\"\n                        placeholder=\"Organisation Code\"\n                        i18n-placeholder=\"@@codePlaceholder\"\n                        formControlName=\"code\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.location\">\n                <label for=\"type\" i18n=\"@@typeLabel\">Type:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"type\"\n                        placeholder=\"Organisational Categorisation\"\n                        i18n-placeholder=\"@@zoneTypePlaceholder\"\n                        formControlName=\"type\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"fieldset\">\n            <div class=\"field\" *ngIf=\"form.controls.count\">\n                <label for=\"count\" i18n=\"@@countLabel\">Count:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"count\"\n                        type=\"number\"\n                        placeholder=\"Resource count. Desks, Hardware, etc.\"\n                        i18n-placeholder=\"@@zoneFeatureCountPlaceholder\"\n                        formControlName=\"count\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.capacity\">\n                <label for=\"capacity\" i18n=\"@@capacityLabel\">Capacity:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"capacity\"\n                        type=\"number\"\n                        placeholder=\"Physical capacity of the zone\"\n                        i18n-placeholder=\"@@zoneCapacityPlaceholder\"\n                        formControlName=\"capacity\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.map_id\">\n            <label for=\"map\" i18n=\"@@mapUrlLabel\">Map:</label>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"map\"\n                    placeholder=\"Map ID or URL\"\n                    i18n-placeholder=\"@@mapUrlPlaceholder\"\n                    formControlName=\"map_id\"\n                />\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { EngineZone } from '@placeos/ts-client';\nimport { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\n\nimport { EngineServiceLike } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\n\n@Component({\n    selector: 'zone-form',\n    templateUrl: './zone-form.component.html',\n    styleUrls: ['./zone-form.component.scss']\n})\nexport class ZoneFormComponent extends BaseDirective {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n    /** Function to exclude zones */\n    public readonly exclude = (zone: EngineZone) => zone.id === this.form.controls.id.value;\n\n    /** Service for handling zones */\n    public get zone_service(): EngineServiceLike {\n        return this._service.Zones;\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.updateZone();\n        }\n    }\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    /** Update parent zone details if set */\n    private async updateZone() {\n        const parent_id = this.form.controls.parent_id ? this.form.controls.parent_id.value : '';\n        if (parent_id) {\n            const zone = await this._service.Zones.show(parent_id);\n            this.form.controls.parent_zone.setValue(zone);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\nimport { BaseDirective } from '../../globals/base.directive';\n\n@Component({\n    selector: 'app-icon',\n    templateUrl: './icon.component.html',\n    styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent extends BaseDirective {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n}\n","<div class=\"app-icon\" *ngIf=\"icon\">\n    <i *ngIf=\"icon.type !== 'img'\" [class]=\"icon.class\">{{ icon.content }}</i>\n    <img *ngIf=\"icon.type === 'img'\" [src]=\"icon.src | safe:'resource'\" />\n</div>","import {\n    Component,\n    Input,\n    TemplateRef,\n    Output,\n    EventEmitter,\n    OnInit,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineResource, EngineDriver, EngineDriverRole } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../../services/app.service';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { DialogEvent, Identity } from '../../utilities/types.utilities';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\nimport {\n    ItemCreateUpdateModalComponent,\n    CreateEditModalData,\n} from 'src/app/overlays/item-modal/item-modal.component';\nimport { Router } from '@angular/router';\nimport { downloadFile, jsonToCsv } from '../../utilities/general.utilities';\nimport {\n    DuplicateModalComponent,\n    DuplicateModalData,\n} from 'src/app/overlays/duplicate-modal/duplicate-modal.component';\n\nexport interface ApplicationTab {\n    id: string;\n    name: string;\n    icon: ApplicationIcon;\n    template: TemplateRef<any>;\n    count?: number;\n}\n\n@Component({\n    selector: 'item-display',\n    templateUrl: './item-display.template.html',\n    styleUrls: ['./item-display.styles.scss'],\n})\nexport class ItemDisplayComponent<T extends Identity = any> extends BaseDirective\n    implements OnInit {\n    /** Name of the type of item being shown */\n    @Input() public name: string;\n    /** Base route of parent component */\n    @Input() public route: string;\n    /** Resource to display details of */\n    @Input() public item: T;\n    /** Whether resouce data is being loaded */\n    @Input() public loading: boolean;\n    /** Whether item is allowed to be edited and deleted */\n    @Input() public has_change = true;\n    /** Tabs available to the item type */\n    @Input() public tabs: ApplicationTab[] = [];\n    /** Emitter for events on the item display */\n    @Output() public event = new EventEmitter();\n    /** ID of the active tab */\n    public active_tab: string;\n\n    @ViewChild('content') public content_el: ElementRef<HTMLDivElement>;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    public get is_scrolled() {\n        if (this.content_el) {\n            return this.content_el.nativeElement.scrollTop > 0;\n        }\n        return false;\n    }\n\n    public get driver_type(): string {\n        const item: any = this.item;\n        if (!item.role) {\n            return '';\n        }\n        const driver: EngineDriver = item || {};\n        switch (driver.role) {\n            case EngineDriverRole.Device:\n                return 'Device';\n            case EngineDriverRole.SSH:\n                return 'SSH';\n            case EngineDriverRole.Service:\n                return 'Service';\n            case EngineDriverRole.Websocket:\n                return 'Websocket';\n        }\n        return 'Logic';\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'right',\n            this._service.Hotkeys.listen(['ArrowRight'], () => this.changeTab(1))\n        );\n        this.subscription(\n            'left',\n            this._service.Hotkeys.listen(['ArrowLeft'], () => this.changeTab(-1))\n        );\n    }\n\n    public changeTab(direction) {\n        if (!this.item) {\n            return;\n        }\n        this.timeout(\n            'change_tab',\n            () => {\n                const index = this.tabs.findIndex((tab) => this._router.url.indexOf(tab.id) >= 0);\n                if (index >= 0 && this.tabs[index + direction]) {\n                    this._router.navigate([\n                        `/${this.route}`,\n                        this.item.id,\n                        this.tabs[index + direction].id,\n                    ]);\n                }\n            },\n            100\n        );\n    }\n\n    /** Copy the ID of the active item to the clipboard */\n    public copy() {\n        if (this.item && this.item.id) {\n            document.execCommand('copy');\n            this._service.notifyInfo('ID copied to clipboard');\n        }\n    }\n\n    /**\n     * Open modal to edit the active item\n     */\n    public edit() {\n        const ref = this._dialog.open<ItemCreateUpdateModalComponent, CreateEditModalData>(\n            ItemCreateUpdateModalComponent,\n            {\n                data: {\n                    service: (this.item as any)._service,\n                    item: this.item,\n                    form: [] as any,\n                    name: this.name,\n                },\n            }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.item = e.metadata.item;\n                }\n            })\n        );\n    }\n\n    /**\n     * Delete the active item\n     */\n    public delete() {\n        this.event.emit({ type: 'delete' });\n    }\n\n    /**\n     * Delete the active item\n     */\n    public duplicateItem() {\n        const ref = this._dialog.open<DuplicateModalComponent, DuplicateModalData>(\n            DuplicateModalComponent,\n            { data: { item: this.item } }\n        );\n        this.subscription(\n            'confirm_ref',\n            ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.item = e.metadata[0];\n                }\n            })\n        );\n    }\n\n    /**\n     * Delete the active item\n     */\n    public newFromItem() {\n        this.event.emit({ type: 'copy' });\n    }\n\n    /**\n     * Export the active item as a CSV\n     */\n    public exportAsTSV() {\n        const item = this.item.toJSON();\n        const filename = `${item.name.toLowerCase().split(' ').join('_')}.${this.name}.tsv`;\n        const ignore_keys = ['module_list', 'settings', '_type', 'version'];\n        console.log(\n            'TSV:',\n            Object.keys(item),\n            ignore_keys,\n            Object.keys(item).filter((key) => ignore_keys.indexOf(key) < 0)\n        );\n        const csv_data = jsonToCsv(\n            [item],\n            Object.keys(item).filter((key) => ignore_keys.indexOf(key) < 0),\n            '\\t'\n        );\n        downloadFile(filename, csv_data);\n    }\n}\n","<div class=\"container\" [class.dark-mode]=\"dark_mode\">\n    <header *ngIf=\"item && !loading\">\n        <div class=\"heading-group\">\n            <div class=\"heading\">\n                {{ item.display_name || item.custom_name || item.name || \"&lt;Unnamed&gt;\" }}\n            </div>\n            <div class=\"info\">\n                <div class=\"id\" *ngIf=\"item.id\" (click)=\"copy()\">\n                    <span>{{ item.id }}</span>\n                </div>\n                <div class=\"chip driver\" *ngIf=\"driver_type\" i18n=\"@@driverType\">\n                    { driver_type, select, Device { Device } Logic { Logic } SSH { SSH } Websocket {\n                    Websocket } Service { Service } other { Other } }\n                </div>\n                <div\n                    class=\"chip connect\"\n                    *ngIf=\"item.connected !== null && item.connected !== undefined\"\n                    [class.active]=\"item.connected\"\n                    i18n=\"@@onlineState\"\n                >\n                    { item.connected, select, true { Online } false { Offline } other { Other } }\n                </div>\n                <div class=\"chip secure\" *ngIf=\"item.tls\">\n                    <div class=\"icon\"><i class=\"backoffice-lock\"></i></div>\n                    <div class=\"text\" i18n=\"@@secure\">Secure</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"options\" *ngIf=\"has_change\">\n            <button [matMenuTriggerFor]=\"action_menu\" mat-icon-button>\n                <app-icon [icon]=\"{ class: 'backoffice-dots-three-vertical' }\"></app-icon>\n            </button>\n        </div>\n    </header>\n    <main *ngIf=\"item && !loading\">\n        <div class=\"tabs\">\n            <nav mat-tab-nav-bar [class.scroll]=\"is_scrolled\">\n                <a\n                    class=\"tab\"\n                    mat-tab-link\n                    *ngFor=\"let link of tabs\"\n                    [routerLink]=\"item.id ? ['/' + route, item.id, link.id] : ['/' + route, link.id]\"\n                    routerLinkActive\n                    #rla=\"routerLinkActive\"\n                    [active]=\"rla.isActive\"\n                >\n                    <app-icon [icon]=\"link.icon\"></app-icon>&nbsp;\n                    <div class=\"name\" i18n=\"@@tabNames\">\n                        { link.name, select, About { About } Modules { Modules } Zones { Zones }\n                        Triggers { Triggers } Systems { Systems } Metadata { Metadata } Children {\n                        Children } Drivers { Drivers } History { History } Applications {\n                        Applications } Authentication { Authentication } Users { Users } Database {\n                        Database } Clusters { Clusters } Interfaces { Interfaces } MQTT Brokers {\n                        MQTT Brokers } other { Other }} &nbsp;\n                    </div>\n                    <div class=\"count\" *ngIf=\"link.count || link.count === 0\">\n                        ({{ link.count || '0' }})\n                    </div>\n                </a>\n            </nav>\n            <div class=\"content\" #content (scroll)=\"is_scrolled\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    </main>\n</div>\n<div class=\"not-mobile center\" *ngIf=\"!item && !loading\">\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <i class=\"backoffice-arrow-left\"></i>\n        </div>\n        <div class=\"text\" i18n=\"@@selectItem\">\n            Select a { name, select, system { system } module { module } driver { driver }\n            repository { repository } zone { zone } trigger { trigger } user { user } domain {\n            domain } other { other } } from the sidebar\n        </div>\n    </div>\n</div>\n<div class=\"mobile-only center\" *ngIf=\"!item && !loading\">\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <i class=\"backoffice-arrow-up\"></i>\n        </div>\n        <div class=\"text\" i18n=\"@@selectItemMobile\">\n            Select a { name, select, system { system } module { module } driver { driver }\n            repository { repository } zone { zone } trigger { trigger } user { user } domain {\n            domain } other { other } } from the search bar\n        </div>\n    </div>\n</div>\n<div class=\"info-block center\" *ngIf=\"loading\">\n    <div class=\"icon\">\n        <a-spinner circle-ring></a-spinner>\n    </div>\n    <div class=\"text\" i18n=\"@@itemLoading\">\n        Loading { name, select, system { system } module { module } driver { driver } repository {\n        repository } zone { zone } trigger { trigger } user { user } domain { domain } other { other\n        } }...\n    </div>\n</div>\n<mat-menu #action_menu=\"matMenu\">\n    <button *ngIf=\"has_change\" mat-menu-item (click)=\"edit()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@editAction\">\n                Edit { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } } [E]\n            </div>\n        </div>\n    </button>\n    <button mat-menu-item (click)=\"newFromItem()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@copyItemAction\">\n                Create new from this { name, select, system { system } module { module } driver {\n                driver } repository { repository } zone { zone } trigger { trigger } user { user }\n                domain { domain } other { other } }\n            </div>\n        </div>\n    </button>\n    <button mat-menu-item (click)=\"duplicateItem()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-flow-branch' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@duplicateAction\">\n                Duplicate { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } }\n            </div>\n        </div>\n    </button>\n    <button mat-menu-item (click)=\"exportAsTSV()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-download' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@exporeAction\">\n                Export { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } } as TSV template\n            </div>\n        </div>\n    </button>\n    <button *ngIf=\"has_change\" mat-menu-item (click)=\"delete()\">\n        <div class=\"group\">\n            <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n            <div class=\"text\" i18n=\"@@deleteAction\">\n                Delete { name, select, system { system } module { module } driver { driver }\n                repository { repository } zone { zone } trigger { trigger } user { user } domain {\n                domain } other { other } } [D]\n            </div>\n        </div>\n    </button>\n</mat-menu>\n","\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'forgot-pass-form',\n    templateUrl: './forgot-pass-form.template.html',\n    styleUrls: ['./forgot-pass-form.styles.scss']\n})\nexport class ForgotPassFormComponent {\n\n}\n\n","\nimport { LoginComponent } from './login.component';\nimport { ForgotPassFormComponent } from './forgot-pass-form/forgot-pass-form.component';\nimport { RegisterFormComponent } from './register-form/register-form.component';\nimport { LoginFormComponent } from './login-form/login-form.component';\n\nexport const LOGIN_COMPONENTS: any[] = [\n    LoginComponent,\n    LoginFormComponent,\n    RegisterFormComponent,\n    ForgotPassFormComponent\n];\n","\nimport { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { ApplicationService } from '../../../../services/app.service';\nimport { FormGroup } from '@angular/forms';\nimport { BaseDirective } from 'src/app/shared/globals/base.directive';\nimport { LoginSettings } from 'src/app/shared/utilities/settings.interfaces';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'login-form',\n    templateUrl: './login-form.template.html',\n    styleUrls: ['./login-form.styles.scss']\n})\nexport class LoginFormComponent extends BaseDirective implements OnInit {\n    /** Form fields for logging in */\n    @Input() public form: FormGroup;\n    /** Emitter for user forgot password action */\n    @Output() public forgot = new EventEmitter<void>();\n    /** Emitter for form submission events */\n    @Output() public submitted = new EventEmitter<void>();\n    /** Settings for the login form */\n    public settings: LoginSettings;\n    /** Whether the password should be shown */\n    public show_password: boolean;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.settings = this._service.setting('app.login') || {};\n        });\n    }\n}\n\n","<div\n    class=\"container\"\n    (window:mouseup)=\"show_password = false\"\n    (window:touchend)=\"show_password = false\"\n>\n    <form name=\"login\" *ngIf=\"form\" [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.username\">\n            <label\n                for=\"username\"\n                [class.error]=\"form.controls.username.invalid && form.controls.username.touched\"\n                >Email:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <!-- <app-icon matPrefix [icon]=\"{ class: 'backoffice-user' }\"></app-icon> -->\n                <input\n                    matInput\n                    name=\"username\"\n                    placeholder=\"Email/Username\"\n                    formControlName=\"username\"\n                    autocomplete=\"username\"\n                />\n            </mat-form-field>\n        </div>\n        <div class=\"field password\" *ngIf=\"form.controls.password\">\n            <label\n                for=\"password\"\n                [class.error]=\"form.controls.password.invalid && form.controls.password.touched\"\n                >Password:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <!-- <app-icon matPrefix [icon]=\"{ class: 'backoffice-key' }\"></app-icon> -->\n                <input\n                    matInput\n                    name=\"password\"\n                    [type]=\"show_password ? 'text' : 'password'\"\n                    placeholder=\"Password\"\n                    formControlName=\"password\"\n                    autocomplete=\"current-password\"\n                />\n                <app-icon\n                    matSuffix\n                    [icon]=\"{ class: show_password ? 'backoffice-eye' : 'backoffice-eye' }\"\n                    (mousedown)=\"show_password = true\"\n                    (touchstart)=\"show_password = true\"\n                ></app-icon>\n                <mat-error *ngIf=\"form.controls.password.invalid\"\n                    >Invalid Username or Password</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <!-- <mat-checkbox formControlName=\"remember\">Remember username</mat-checkbox> -->\n        <div class=\"forgot\" *ngIf=\"settings?.forgotten_password\" (tapped)=\"forgot.emit()\">\n            Forgot?\n        </div>\n        <div class=\"options\">\n            <button mat-button type=\"submit\" (tapped)=\"submitted.emit()\">Submit</button>\n        </div>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { ApplicationService } from '../../../services/app.service';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { ApplicationImageIcon } from '../../utilities/settings.interfaces';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'login-display',\n    templateUrl: './login.template.html',\n    styleUrls: ['./login.styles.scss']\n})\nexport class LoginComponent extends BaseDirective implements OnInit {\n    public login_form: FormGroup;\n    /** Name of the component contents to show */\n    public show: 'login' | 'forgot' | 'register';\n    /** Whether a user action is being processed */\n    public loading: boolean;\n    /** Logo of the application/organisation */\n    public logo: ApplicationImageIcon;\n    /** Current work environment for the application */\n    public env: string;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.show = 'login';\n        this.loading = true;\n        const remembered_name = localStorage.getItem('BACKOFFICE.username');\n        this.login_form = new FormGroup({\n            username: new FormControl(remembered_name || ''),\n            password: new FormControl(''),\n            remember: new FormControl(!!remembered_name)\n        });\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    public init() {\n        this.env = this._service.setting('env');\n        this.logo = this._service.setting('app.logo') || {};\n        this.subscription(\n            'state',\n            this._service.Users.state.subscribe(state => {\n                this.loading = false;\n                if (state === 'invalid') {\n                    this.show = 'login';\n                } else if (state === 'loading') {\n                    this.loading = true;\n                }\n            })\n        );\n    }\n\n    public processLogin(e: any) {\n        if (e.type === 'login') {\n        } else if (e.type === 'forgot') {\n            this.show = 'forgot';\n        } else {\n            this.show = 'login';\n        }\n    }\n\n    public login() {\n        const form_values = this.login_form.value;\n        this._service.Users.login({\n            email: form_values.username,\n            password: form_values.password\n        }).then(\n            () => {\n                if (form_values.remember) {\n                    localStorage.setItem('BACKOFFICE.username', form_values.username);\n                }\n            },\n            err => {\n                console.log('Error:', err);\n                this.login_form.controls.password.setErrors({ invalid: true });\n            }\n        );\n    }\n\n    public forgottenPassword() {\n        this.show = 'forgot';\n    }\n}\n","<div class=\"container\" [class.uat]=\"env !== 'prod'\">\n    <div class=\"login-container\">\n        <header><div class=\"text\">Login</div></header>\n        <div class=\"form\" *ngIf=\"!loading; else load_state\">\n            <login-form\n                *ngIf=\"show === 'login'\"\n                [form]=\"login_form\"\n                (forgot)=\"forgottenPassword()\"\n                (submitted)=\"login()\"\n            ></login-form>\n            <register-form *ngIf=\"show === 'register'\"></register-form>\n            <forgot-pass-form *ngIf=\"show === 'forgot'\"></forgot-pass-form>\n        </div>\n    </div>\n</div>\n<ng-template #load_state>\n    <div class=\"loader\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"rgba(0,0,0, .54)\"></a-spinner>\n        </div>\n        <div class=\"text\">\n            Loading user data...\n        </div>\n    </div>\n</ng-template>\n","\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'register-form',\n    templateUrl: './register-form.template.html',\n    styleUrls: ['./register-form.styles.scss']\n})\nexport class RegisterFormComponent {\n\n}\n\n","\nimport { Component, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n\n@Component({\n    selector: 'searchbar',\n    templateUrl: './searchbar.template.html',\n    styleUrls: ['./searchbar.styles.scss']\n})\nexport class SearchbarComponent extends BaseDirective {\n    @Input() public filter: string;\n    @Input() public limit: string;\n    @Input() public dictation = true;\n    @Input() public clearable = true;\n    @Input() public placeholder = 'Search...';\n    @Output() public filterChange = new EventEmitter();\n    @Output() public focus = new EventEmitter();\n    @Output() public blur = new EventEmitter();\n\n    public model: any = {};\n\n    @ViewChild('input', { static: true }) private input: ElementRef;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n        const win = window as any;\n        this.model.speech = !!(win.SpeechRecognition || win.webkitSpeechRecognition);\n    }\n\n    /**\n     * Activate dictation search\n     */\n    public startDictation() {\n        if (!this.input) { return; }\n        if (this.model.recognition) {\n            this.model.recognition.stop();\n            this.model.dictate = false;\n            this.model.recognition = null;\n            return;\n        }\n        const win = self as any;\n        const speech: any = win.SpeechRecognition || win.webkitSpeechRecognition;\n        if (speech) {\n            this.model.recognition = new speech();\n\n            this.model.recognition.continuous = false;\n            this.model.recognition.interimResults = false;\n\n            this.model.recognition.lang = 'en-US';\n            this.model.recognition.start();\n            this.model.dictate = true;\n\n            this.model.recognition.onresult = (e: any) => {\n                    // Update search field with dictation result\n                this.input.nativeElement.value = e.results[0][0].transcript;\n                this.filter = e.results[0][0].transcript;\n                this.model.recognition.stop();\n                this.post();\n                this.model.dictate = false;\n            };\n\n            this.model.recognition.onerror = (e: any) => {\n                this.model.recognition.stop();\n                this.model.dictate = false;\n            };\n        }\n    }\n\n    public focusInput() {\n        this.model.focus = true;\n        this.timeout('focus', () => {\n            if (this.input && this.input.nativeElement) {\n                this.input.nativeElement.focus();\n                this.focus.emit();\n            }\n        }, 50);\n    }\n\n    public clear() {\n        this.filter = '';\n        this.post();\n    }\n\n    public post() {\n        this.checkLimitations();\n        this.timeout('post', () => {\n            this.filterChange.emit(this.filter);\n        });\n    }\n\n    public checkLimitations() {\n        if (!this.limit) { return; }\n        for (let i = 0; i < (this.filter || '').length; i++) {\n            if (this.limit.indexOf(this.filter[i]) >= 0) {\n                this.filter = this.filter.substr(0, i) + this.filter.substr(i + 1);\n                i--;\n            }\n        }\n    }\n}\n","<div class=\"searchbar\" [class.dark-mode]=\"dark_mode\" widget>\n    <div class=\"field\" [class.focus]=\"model.focus || filter || model.dictate\">\n        <button mat-icon-button (touchrelease)=\"focusInput()\">\n            <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n        </button>\n        <div class=\"input\">\n            <input #input [(ngModel)]=\"filter\" (ngModelChange)=\"post()\"\n                (focus)=\"model.focus = true; focus.emit($event)\"\n                (blur)=\"model.focus = false; blur.emit($event)\"\n                [placeholder]=\"placeholder\">\n        </div>\n        <button mat-icon-button *ngIf=\"model.speech && dictation\" [class.active]=\"model.dictate\" (tapped)=\"startDictation()\">\n            <app-icon [icon]=\"{ class: 'backoffice-mic' }\"></app-icon>\n        </button>\n        <button mat-icon-button class=\"close\" *ngIf=\"filter && clearable\" (tapped)=\"clear()\">\n            <app-icon [icon]=\"{ class: 'backoffice-cross' }\"></app-icon>\n        </button>\n        <ng-content></ng-content>\n    </div>\n</div>\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n    ViewChild,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    SimpleChanges\n} from '@angular/core';\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { EngineModule, EngineDriverRole } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationService } from '../../../services/app.service';\nimport { BaseDirective } from '../../globals/base.directive';\nimport { EngineServiceLike, HashMap, Identity } from '../../utilities/types.utilities';\nimport { unique } from '../../utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'sidebar',\n    templateUrl: './sidebar.template.html',\n    styleUrls: ['./sidebar.styles.scss']\n})\nexport class SidebarComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Module name to display at the top of the sidebar */\n    @Input() public heading = '';\n    /** List of items to render on the list */\n    @Input() public list: any[] = [];\n    /** Name of the active module */\n    @Input() public module: EngineServiceLike;\n    /** Whether the list is being loaded */\n    @Input() public loading: boolean;\n    /** Additional query params to add to item load requests */\n    @Input('queryParams') public query_params: HashMap = {};\n    /** Whether sidebar is closed */\n    @Input() public close = false;\n    /** Search string */\n    @Input() public search = '';\n    /** Emitter for changes to the search string */\n    @Output() public searchChange = new EventEmitter();\n    /** Emitter for user actions on the component */\n    @Output() public event = new EventEmitter();\n    /** Async list of items to render on the sidebar list */\n    public items: BehaviorSubject<Identity[]> = new BehaviorSubject([]);\n    /** Whether the application has initialised */\n    public intialised: boolean;\n    /** Last time the list was updated */\n    public last_check: number;\n    /** Last total number of items when the list was fetched */\n    public last_total: number;\n    /** Active subroute for active item */\n    public subroute: string;\n\n    /** List of elements for each associated item */\n    @ViewChildren('list_item') private item_list: QueryList<ElementRef>;\n    /** Virtual scrolling viewport */\n    @ViewChild(CdkVirtualScrollViewport)\n    private viewport: CdkVirtualScrollViewport;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    /** Whether list is has been scrolled from the top */\n    public get is_scrolled(): boolean {\n        if (this.viewport) {\n            const element = this.viewport.elementRef.nativeElement;\n            if (element) {\n                return element.scrollTop > 0;\n            }\n        }\n        return false;\n    }\n\n    /** Whether new items for the active module can be created */\n    public get new(): boolean {\n        if (this.module) {\n            return this._service.setting(`app.${this.module._api_route}.can_create`);\n        }\n        return false;\n    }\n\n    public get total(): number {\n        return this.search ? this.module.last_total : this.module.total;\n    }\n\n    public get grand_total(): number {\n        return this.module.total;\n    }\n\n    /** Heading value lower cased */\n    public get lowercase_heading() {\n        return (this.heading || '').toLowerCase();\n    }\n\n    /** Path of the active module */\n    public get route() {\n        const route = this.module._api_route;\n        return `/${route}`;\n    }\n\n    /** Maxiumum allowed items for the active module */\n    public get licenses(): number {\n        if (this.module) {\n            return this._service.setting(`app.${this.module._api_route}.licenses`);\n        }\n        return 0;\n    }\n\n    /** Map of item names to their IDs */\n    public get item_name(): HashMap<string> {\n        const map = {};\n        const list = this.items.getValue() || [];\n        for (let item of list) {\n            if (item instanceof EngineModule) {\n                const detail =\n                    item.role === EngineDriverRole.Service\n                        ? item.uri\n                        : item.role === EngineDriverRole.Logic\n                            ? item.control_system_id\n                            : item.ip;\n                map[item.id] = `${item.custom_name || item.name || '<Unnamed>'} <span class=\"small\">${detail}<span>`;\n            } else {\n                map[item.id] = item.custom_name || item.name || '<Unnamed>';\n            }\n        }\n        return map;\n    }\n\n    constructor(private _service: ApplicationService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            if (!this._service.get('BACKOFFICE.active_item')) {\n                this._service.set('BACKOFFICE.active_item', null);\n            }\n            if (!this._service.get('BACKOFFICE.removed')) {\n                this._service.set('BACKOFFICE.removed', '');\n            }\n            this.subscription(\n                'active_item',\n                this._service.listen('BACKOFFICE.active_item').subscribe(item => this.replaceActiveItem(item))\n            );\n            this.subscription(\n                'remove_item',\n                this._service.listen('BACKOFFICE.removed').subscribe(id => this.removeItem(id))\n            );\n            this.subscription(\n                'up',\n                this._service.Hotkeys.listen(['Alt', 'ArrowUp'], () => this.changeSelected(-1))\n            );\n            this.subscription(\n                'down',\n                this._service.Hotkeys.listen(['Alt', 'ArrowDown'], () => this.changeSelected(1))\n            );\n            this.items.next(this.list || []);\n            const url = this._router.url.split('/');\n            this.subroute = url[3];\n            this.subscription('router.events', this._router.events.subscribe((event) => {\n                if (event instanceof NavigationEnd) {\n                    const url = event.url.split('/');\n                    this.subroute = url[3];\n                }\n            }))\n            this.atBottom();\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (this._service.is_initialised && (changes.list || changes.close)) {\n            this.last_check = dayjs().valueOf();\n            this.items.next(this.list || []);\n            this.atBottom();\n        }\n        if (changes.module && changes.module.previousValue !== changes.module.currentValue) {\n            this.searching();\n        }\n        if (changes.query_params && this.query_params) {\n            this.searching();\n        }\n    }\n\n    /** Whether to update the list of items */\n    public get is_stale() {\n        const now = dayjs();\n        const last_check = dayjs(this.last_check);\n        return (\n            this.last_total !== this.items.getValue().length ||\n            last_check.add(1, 'm').isBefore(now, 's')\n        );\n    }\n\n    /**\n     * Check if user has scrolled to the bottom of the sidebar and emit an event to get next page of items\n     */\n    public atBottom() {\n        if (this.loading || !this.is_stale) {\n            return;\n        }\n        if (!this.viewport) {\n            return this.timeout('atBottom', () => this.atBottom());\n        }\n        const end = this.viewport.getRenderedRange().end;\n        const total = this.viewport.getDataLength();\n        if (end === total) {\n            this.last_total = total;\n            this.last_check = dayjs().valueOf();\n            if (this.last_total !== this.module.last_total) {\n                this.searching(this.list.length);\n            }\n        }\n    }\n\n    /**\n     * List item tracking function to reduce shadow dom re-rendering on changes\n     * @param item Item to check\n     * @param index Index of the item\n     */\n    public trackByFn(item: HashMap, index: number) {\n        return item.id || index;\n    }\n\n    /** Emit events to the parent element */\n    public post(type: string) {\n        this.event.emit({ type });\n    }\n\n    /**\n     * Update the list displayed on the sidebar\n     * @param offset Page offset for the list\n     */\n    public searching(offset: number = 0) {\n        this.loading = true;\n        if (this.module) {\n            this.module.query({ q: this.search, offset, ...(this.query_params || {}) }).then(\n                list => {\n                    this.list = offset ? this.list.concat(list) : list;\n                    this.list = unique(this.list, 'id');\n                    this.list.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n                    this.items.next(this.list);\n                    this.loading = false;\n                },\n                err => {\n                    this._service.notifyError(`Error updating ${this.module._name} list. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                    this.loading = false;\n                }\n            );\n        } else {\n            this.loading = false;\n        }\n    }\n\n    /**\n     * Update the selected item\n     * @param offset Offset with which to select the new item\n     */\n    public changeSelected(offset: number) {\n        const list = this.item_list.toArray();\n        const item_list = this.items.getValue();\n        if (list && list.length > 0) {\n            let index = item_list.findIndex(item => this._router.url.indexOf(`${item.id}`) >= 0);\n            index += offset;\n            if (index >= 0 && index < list.length) {\n                list[index].nativeElement.scrollIntoView(false);\n                this._service.navigate([this.module._api_route, item_list[index].id]);\n            }\n        }\n    }\n\n    /**\n     * Replaces the active item with the latest local version\n     * @param active_item New active item\n     */\n    private replaceActiveItem(active_item: Identity) {\n        if (!active_item) {\n            return;\n        }\n        console.log('Replace:', active_item);\n        const list = this.items.getValue() || [];\n        const index = list.findIndex(item => item.id === active_item.id);\n        if (index >= 0) {\n            list.splice(index, 1, active_item);\n        } else if (list.length > 0 && list[0].constructor === active_item.constructor) {\n            list.push(active_item);\n        } else {\n            list.push(active_item);\n        }\n\n        list.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this.items.next([...list]);\n        console.log('Replaced');\n    }\n\n    /**\n     * Remove item from the list\n     * @param id\n     */\n    private removeItem(id: string): void {\n        if (!id) {\n            return;\n        }\n        const list = this.items.getValue() || [];\n        const index = list.findIndex(item => item.id === id);\n        if (index >= 0) {\n            list.splice(index, 1);\n\n            this.items.next([...list]);\n        }\n    }\n}\n","<div class=\"container\" [class.dark-mode]=\"dark_mode\">\n    <header>\n        <div class=\"heading\">\n            { heading, select, Systems { Systems } Modules { Modules } Zones { Zones } Drivers {\n            Drivers } Repositories { Repositories } Triggers { Triggers } Users { Users } Domains { Domains }\n            Admin { Admin } other { Other } }\n        </div>\n        <div class=\"count\">\n            <div>\n                <div\n                    class=\"inline\"\n                    [matTooltip]=\"heading + ' count / License count'\"\n                    i18n-matTooltip\n                >\n                    {{ total || 0 }} of {{ (search ? grand_total : licenses) || '∞' }}\n                </div>\n            </div>\n        </div>\n        <div\n            class=\"add\"\n            *ngIf=\"new && (total < licenses || !licenses)\"\n            (click)=\"post('new')\"\n            [matTooltip]=\"'Add ' + heading + ' [N]'\"\n            i18n-matTooltip\n        >\n            <i class=\"backoffice-plus\"></i>\n        </div>\n        <div\n            class=\"error\"\n            *ngIf=\"new && (total >= licenses && licenses)\"\n            matTooltip=\"\n            Exceeded quota! No new item can be created\n            until the total is below you license count.\"\n            i18n-matTooltip\n        >\n            <i class=\"backoffice-warning\"></i>\n        </div>\n        <button mat-icon-button class=\"mobile-only\" (touchrelease)=\"event.emit({ type: 'toggle' })\">\n            <app-icon [icon]=\"{ class: 'backoffice-' + (close ? 'cross' : 'list') }\"></app-icon>\n        </button>\n    </header>\n    <section class=\"search\">\n        <div class=\"input\">\n            <input\n                [(ngModel)]=\"search\"\n                (ngModelChange)=\"searching()\"\n                [placeholder]=\"'Filter ' + lowercase_heading\"\n                i18n-placeholder\n            />\n        </div>\n    </section>\n    <section class=\"content\" [class.scroll]=\"is_scrolled\">\n        <ng-content></ng-content>\n    </section>\n    <section class=\"list\">\n        <ng-container *ngIf=\"list\">\n            <cdk-virtual-scroll-viewport\n                itemSize=\"48\"\n                (scroll)=\"is_scrolled\"\n                (scrolledIndexChange)=\"atBottom()\"\n            >\n                <ng-container *cdkVirtualFor=\"let item of items | async; trackBy:trackByFn\">\n                    <a [routerLink]=\"subroute ? [route, item.id, subroute]: [route, item.id]\" routerLinkActive=\"active\">\n                        <div #list_item class=\"item\" [title]=\"\">\n                            <div class=\"text\" [innerHTML]=\"item_name[item.id] | sanitize\"></div>\n                            <app-icon\n                                [icon]=\"{ type: 'icon', class: 'backoffice-check' }\"\n                            ></app-icon>\n                        </div>\n                    </a>\n                </ng-container>\n            </cdk-virtual-scroll-viewport>\n        </ng-container>\n        <div class=\"info-block center\" *ngIf=\"!loading && (!list || !list.length)\">\n            <div class=\"icon\">\n                <i class=\"backoffice-cross\"></i>\n            </div>\n            <div class=\"text\">{{ !search ? 'No ' + lowercase_heading : 'No matches found' }}</div>\n            <div class=\"btn\" *ngIf=\"new\">\n                <button mat-button (click)=\"post('new')\" i18n>\n                    Add new {{ lowercase_heading }}\n                </button>\n            </div>\n        </div>\n    </section>\n    <div class=\"loading\" *ngIf=\"loading\">\n        <a-spinner double-circle-ring color=\"#F44336\"></a-spinner>\n    </div>\n</div>\n","import {\n    Component,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ElementRef,\n    SimpleChanges,\n    OnChanges\n} from '@angular/core';\nimport { Terminal } from 'xterm';\n\nimport { BaseDirective } from '../../globals/base.directive';\n\n@Component({\n    selector: 'a-terminal',\n    templateUrl: './terminal.component.html',\n    styleUrls: ['./terminal.component.scss']\n})\nexport class TerminalComponent extends BaseDirective implements OnInit, OnChanges, OnDestroy {\n    /** Contents to display on the terminal */\n    @Input() public content: string;\n    /** Resizes terminal display on change */\n    @Input() public resize: boolean;\n    /** Local instance of an xterm terminal */\n    public terminal: Terminal;\n\n    @ViewChild('terminal', { static: true }) public terminal_element: ElementRef<HTMLDivElement>;\n    @ViewChild('container', { static: true }) public container_el: ElementRef<HTMLDivElement>;\n\n    public ngOnInit(): void {\n        if (this.terminal) {\n            this.ngOnDestroy();\n        }\n        this.terminal = new Terminal({ theme: { background: `#263238` } });\n        this.terminal.open(this.terminal_element.nativeElement);\n        this.timeout('init', () => {\n            this.resizeTerminal();\n            this.updateTerminalContents(this.content || '');\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.content) {\n            this.updateTerminalContents(this.content || '');\n        }\n        if (changes.resize) {\n            this.timeout('resize', () => this.resizeTerminal());\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.terminal.clear();\n        this.terminal.dispose();\n    }\n\n    /**\n     * Resize the terminal display to fill the container element\n     */\n    public resizeTerminal(): void {\n        if (!this.terminal || !this.container_el) {\n            return;\n        }\n        const font_size = this.terminal.getOption('fontSize');\n        const line_height = this.terminal.getOption('lineHeight');\n        const box = this.container_el.nativeElement.getBoundingClientRect();\n        const width = Math.floor(box.width / (font_size * 0.6));\n        const height = Math.floor(box.height / (line_height * font_size * 1.28));\n        this.terminal.resize(width - 2, height);\n    }\n\n    /**\n     * Update the rendered contents of the terminal view\n     * @param new_content New contents to render\n     */\n    private updateTerminalContents(new_content: string) {\n        if (!this.terminal) {\n            return;\n        }\n        this.terminal.clear();\n        const lines: string[] = new_content.split('\\n');\n        for (const line of lines) {\n            this.terminal.writeln(line);\n        }\n        this.timeout('scroll', () => this.terminal.scrollToBottom(), 50);\n    }\n}\n","<div class=\"container\" #container (window:resize)=\"resizeTerminal()\">\n    <div class=\"terminal\" #terminal></div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-unauthorised',\n  templateUrl: './unauthorised.component.html',\n  styleUrls: ['./unauthorised.component.scss']\n})\nexport class UnauthorisedComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"unauthorised\">\n    <h1>403</h1>\n    <h3 i18n=\"@@forbiddenLabel\">Access forbidden.</h3>\n    <p i18n=\"@@invalidPermissionLabel\">You do not have permission to view this page and your access attempt has been recorded.</p>\n    <p i18n=\"@@contactAdminLabel\">Contact your Administrator if you feel that you should have access.</p>\n</div>\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0 })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND_BIDIR = trigger('show', [\n    state('show', style({ opacity: 1, height: '*', width: '*' })),\n    state('hide', style({ opacity: 0, height: 0, width: 0 })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { Subscription, BehaviorSubject } from 'rxjs';\n\nexport class BaseClass {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: { [name: string]: Subscription | (() => void) } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n\n    /** Observable of the initialised state of the object */\n    public get initialised(): BehaviorSubject<boolean> {\n        return this._initialised;\n    }\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay) as any;\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = setInterval(() => fn(), delay) as any;\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name Name of the subscription to clear\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n}\n","\nimport { OnDestroy, Directive } from '@angular/core';\nimport { BaseClass } from './base.class';\n\n@Directive({\n    selector: 'a-very-basic-component-base-that-should-not-be-used'\n})\nexport class BaseDirective extends BaseClass implements OnDestroy {\n\n    public ngOnDestroy(): void {\n        // Clear local timers\n        for (const key in this._timers) {\n            if (this._timers.hasOwnProperty(key)) {\n                this.clearTimeout(key);\n            }\n        }\n        // Clear local intervals\n        for (const key in this._intervals) {\n            if (this._intervals.hasOwnProperty(key)) {\n                this.clearInterval(key);\n            }\n        }\n        // Clear local subscriptions\n        for (const key in this._subscriptions) {\n            if (this._subscriptions.hasOwnProperty(key)) {\n                this.unsub(key);\n            }\n        }\n    }\n}\n\n","import { Injectable } from '@angular/core';\nimport {\n    CanActivate,\n    CanLoad,\n    Route,\n    UrlSegment,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n    Router\n} from '@angular/router';\nimport { EngineUser } from '@placeos/ts-client';\nimport { ComposerService } from '@placeos/composer';\nimport { first } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthorisedAdminGuard implements CanActivate, CanLoad {\n\n    private _user: EngineUser;\n\n    constructor(private _composer: ComposerService, private _router: Router) {}\n\n    public async canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    ): Promise<boolean | UrlTree> {\n        await this._composer.initialised.pipe(first(_ => _)).toPromise();\n        const user: EngineUser = this._user || await this._composer.users.current();\n        const can_activate = user && user.sys_admin;\n        if (!can_activate) {\n            this._router.navigate(['/systems']);\n        }\n        this._user = user;\n        return can_activate;\n    }\n\n    public async canLoad(route: Route, segments: UrlSegment[]): Promise<boolean> {\n        await this._composer.initialised.pipe(first(_ => _)).toPromise();\n        const user: EngineUser = this._user || await this._composer.users.current();\n        const can_activate = user && user.sys_admin;\n        if (!can_activate) {\n            this._router.navigate(['/systems']);\n        }\n        this._user = user;\n        return can_activate;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    CanActivate,\n    CanLoad,\n    Route,\n    UrlSegment,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n    Router,\n} from '@angular/router';\nimport { EngineUser } from '@placeos/ts-client';\nimport { ComposerService } from '@placeos/composer';\nimport { first } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorisedUserGuard implements CanActivate, CanLoad {\n\n    private _user: EngineUser;\n\n    constructor(private _composer: ComposerService, private _router: Router) {}\n\n    public async canActivate(\n        next: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    ): Promise<boolean | UrlTree> {\n        await this._composer.initialised.pipe(first(_ => _)).toPromise();\n        const user: EngineUser = this._user || await this._composer.users.current();\n        const can_activate = user && user.sys_admin;\n        if (!can_activate) {\n            this._router.navigate(['/unauthorised']);\n        }\n        this._user = user;\n        return can_activate;\n    }\n\n    public async canLoad(route: Route, segments: UrlSegment[]): Promise<boolean> {\n        await this._composer.initialised.pipe(first(_ => _)).toPromise();\n        const user: EngineUser = this._user || await this._composer.users.current();\n        const can_activate = user && user.sys_admin;\n        if (!can_activate) {\n            this._router.navigate(['/unauthorised']);\n        }\n        this._user = user;\n        return can_activate;\n    }\n}\n","\nimport { generateBasicHandlers, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst DOMAIN_DATA = [];\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/domains`, DOMAIN_DATA, FILTER_FN);\n\n","\nimport * as DRIVER_DATA from '../data/drivers.json';\nimport { generateBasicHandlers, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/drivers`, (DRIVER_DATA as any).default, FILTER_FN);\n\nwindow.control.handlers.push({\n    path: `${API}/drivers/:id/compiled`,\n    metadata: (DRIVER_DATA as any).default,\n    method: 'GET',\n    callback: (event) => true,\n} as MockHttpRequestHandler);\n\n","\nimport './zones.mock';\nimport './repositories.mock';\nimport './drivers.mock';\nimport './modules.mock';\nimport './systems.mock';\nimport './triggers.mock';\nimport './users.mock';\nimport './domains.mock';\n\nimport './settings.mock';\n","import * as MODULE_DATA from '../data/modules.json';\nimport { generateBasicHandlers, API, endpointData } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.control_system_id) {\n        console.log('Endpoint data:', endpointData(`${API}/systems`));\n        const system = endpointData(`${API}/systems`).find((sys) => sys.id === q.control_system_id);\n        console.log('System:', system);\n        match =\n            match &&\n            (item.control_system_id === q.control_system_id ||\n                (system && system.modules.includes(item.id)));\n    }\n    if (q.driver_id) {\n        match = match && item.driver_id === q.driver_id;\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/modules`, (MODULE_DATA as any).default, FILTER_FN);\n","import { EngineRepositoryType, MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport * as DISCOVERY_DATA from '../data/discovery.json';\n\nimport { generateBasicHandlers, API, generateID } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst REPO_DATA = [\n    {\n        id: `repo-${generateID()}`,\n        name: 'PlaceOS Drivers',\n        folder_name: 'drivers/placeos',\n        uri: 'https://github.com/PlaceOS/drivers',\n        commit_hash: 'HEAD',\n        type: EngineRepositoryType.Driver,\n    },\n];\n\nconst DRIVER_LIST = (DISCOVERY_DATA as any).default.map((driver) => driver.id);\n\nconst COMMIT_LIST = [\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'feat(drivers): cleanup drivers',\n    },\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'chore(readme): update readme',\n    },\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'refactor(drivers): cleanup lighting driver',\n    },\n    {\n        commit: generateID(6, '1234567890abcdef'.split('')),\n        date: dayjs().subtract(Math.floor(Math.random() * 30 * 24 * 60), 'm').valueOf(),\n        author: 'alex@place.tech',\n        subject: 'test(drivers): update test coverage',\n    },\n];\n\nCOMMIT_LIST.sort((a, b) => b.date - a.date);\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/repositories`, REPO_DATA, FILTER_FN);\n\n/** Add handlers for getting respository drivers */\nwindow.control.handlers.push({\n    path: `${API}/repositories/:id/drivers`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return DRIVER_LIST;\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting respository driver's commits */\nwindow.control.handlers.push({\n    path: `${API}/repositories/:id/commits`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return COMMIT_LIST;\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting respository driver's details */\nwindow.control.handlers.push({\n    path: `${API}/repositories/:id/details`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return (DISCOVERY_DATA as any).default.find(\n                (driver) => driver.id === event.query_params.driver\n            );\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n","\nimport { generateBasicHandlers, API, listenToHandlerChanges, generateID } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport { EncryptionLevel } from '@placeos/ts-client';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.parent_id) {\n        match = match && item.parent_id === q.parent_id;\n    }\n    return match;\n};\n\nconst SETTINGS_DATA = [];\n\nconst handle_items_fn = (list) => {\n    list.forEach(item => {\n        if (item.settings && !SETTINGS_DATA.find(s => s.parent_id === item.id)) {\n            SETTINGS_DATA.push({\n                id: `setting-${generateID()}`,\n                parent_id: item.id,\n                encryption_level: EncryptionLevel.None,\n                settings_string: item.settings instanceof Object ? JSON.stringify(item.settings) : item.settings\n            });\n        }\n    });\n    console.log('Settings:', SETTINGS_DATA);\n};\n\nlet obs = listenToHandlerChanges(`${API}/systems`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\nobs = listenToHandlerChanges(`${API}/modules`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\nobs = listenToHandlerChanges(`${API}/zones`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\nobs = listenToHandlerChanges(`${API}/drivers`);\nif (obs) {\n    obs.subscribe(handle_items_fn);\n}\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/settings`, SETTINGS_DATA, FILTER_FN);\n\n\n","\nimport * as SYSTEM_DATA from '../data/systems.json';\nimport { generateBasicHandlers, API, endpointData } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.zone_id) {\n        match = match && (item.zones || []).includes(q.zone_id);\n    }\n    if (q.module_id) {\n        match = match && (item.modules || []).includes(q.module_id);\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/systems`, (SYSTEM_DATA as any).default, FILTER_FN);\n\n/** Add handlers for getting system's zones */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/zones`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const system = endpointData(`${API}/systems`).find(sys => sys.id === event.route_params.id);\n            if (system) {\n                const zones = endpointData(`${API}/zones`);\n                return zones.filter(\n                    (item) => system.zones.includes(item.id)\n                );\n            }\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting system's modules */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/modules`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const system = endpointData(`${API}/systems`).find(sys => sys.id === event.route_params.id);\n            if (system){\n                const modules = endpointData(`${API}/modules`);\n                return modules.filter(\n                    (item) => system.modules.includes(item.id)\n                );\n            }\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting system's triggers */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/triggers`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            return [];\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n\n/** Add handlers for getting system's inherited settings */\nwindow.control.handlers.push({\n    path: `${API}/systems/:id/settings`,\n    metadata: [],\n    method: 'GET',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const settings = endpointData(`${API}/settings`).filter(sys => sys.id === event.route_params.id);\n            return settings.reduce((map, item) => ({ ...map, ...JSON.parse(item.settings_string) }))\n        }\n        throw { status: 404, message: 'System not found' };\n    },\n} as MockHttpRequestHandler);\n","\nimport { generateBasicHandlers, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst TRIGGER_DATA = [];\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/triggers`, TRIGGER_DATA, FILTER_FN);\n\n","\nimport { generateBasicHandlers, generateID, API } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nimport * as faker from 'faker';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    return match;\n};\n\nconst PREDFINED_USERS = [\n    'Alex Sorafumo',\n    'Jonathan McFarlane',\n    'Stephen von Takach',\n    'Alexandre Chuvand',\n    'Jeremy West',\n    'Phil Kheav',\n    'Sravani Kotha'\n].map((name) => ({\n    id: `user-${generateID()}`,\n    name,\n    email: `${name.split(' ').join('.')}@place.tech`,\n    support: Math.floor(Math.random() * 999_999) % 10 === 0,\n    sys_admin: Math.floor(Math.random() * 999_999) % 10 === 0\n}));\n\nconst USER_DATA = Array(30).fill(0).map(() => {\n    const name = `${faker.name.firstName()} ${faker.name.lastName()}`;\n    return {\n        id: `user-${generateID()}`,\n        name,\n        email: `${name.split(' ').join('.')}@place.tech`,\n        support: Math.floor(Math.random() * 999_999) % 10 === 0,\n        sys_admin: Math.floor(Math.random() * 999_999) % 10 === 0\n    }\n}).concat(PREDFINED_USERS);\n\nconst CURRENT_USER = {\n    id: `current`,\n    name: 'Place Admin',\n    email: `admin@place.tech`,\n    support: Math.floor(Math.random() * 999_999) % 10 === 0,\n    sys_admin: Math.floor(Math.random() * 999_999) % 10 === 0\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/users`, [...USER_DATA, CURRENT_USER], FILTER_FN);\n","import * as ZONE_DATA from '../data/zones.json';\nimport { generateBasicHandlers, API, endpointData } from '../common.mock';\nimport { HashMap } from '../../utilities/types.utilities';\n\nconst FILTER_FN = (item: any, q: HashMap) => {\n    if (!q || Object.keys(q).length <= 0) {\n        return true;\n    }\n    let match = true;\n    if (q.q) {\n        match = match && (item.name || '').toLowerCase().indexOf((q.q || '').toLowerCase()) >= 0;\n    }\n    if (q.parent) {\n        match = match && item.parent_id === q.parent;\n    }\n    if (q.control_system_id) {\n        const system = endpointData(`${API}/systems`).find((sys) => sys.id === q.control_system_id);\n        match = match && system && system.zones.includes(item.id);\n    }\n    return match;\n};\n\n/** Add basic API handlers for systems */\ngenerateBasicHandlers(`${API}/zones`, (ZONE_DATA as any).default, FILTER_FN);\n","import { Observable, BehaviorSubject } from 'rxjs';\nimport { HashMap } from '../utilities/types.utilities';\n\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\n/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/engine/v2';\n\nconst ENDPOINT_SUBJECTS: HashMap<BehaviorSubject<any[]>> = {};\nconst ENDPOINT_OBSERVABLES: HashMap<Observable<any[]>> = {};\n/** List of available characters for IDs */\nconst AVAILABLE_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~'.split('');\n\nexport type FilterFn<T> = (item: T, query: HashMap) => boolean;\n\n/**\n * Generate an ID with length\n * @param length Length of the ID\n */\nexport function generateID(length: number = 12, chars: string[] = AVAILABLE_CHARS) {\n    let id = '';\n    while (id.length < length) {\n        id += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return id;\n}\n\n/**\n * Get obsevable for changes to data on endpoint\n * @param endpoint Endpoint to listen to\n */\nexport function listenToHandlerChanges(endpoint: string): Observable<any> {\n    return ENDPOINT_OBSERVABLES[endpoint];\n}\n\n/**\n * Get list of data from endpoint\n * @param endpoint Endpoint to grab data for\n */\nexport function endpointData(endpoint: string): any[] {\n    return (ENDPOINT_SUBJECTS[endpoint] ? ENDPOINT_SUBJECTS[endpoint].getValue() : null) || [];\n}\n\n/**\n * Function the generate the bas\n * @param endpoint\n * @param data\n */\nexport function generateBasicHandlers<T = any>(\n    endpoint: string,\n    data: T[],\n    filter: FilterFn<T> = (_: T, q: HashMap) => true\n): Observable<T[]> {\n    if (ENDPOINT_SUBJECTS[endpoint]) {\n        ENDPOINT_SUBJECTS[endpoint].complete();\n        delete ENDPOINT_SUBJECTS[endpoint];\n        delete ENDPOINT_OBSERVABLES[endpoint];\n    }\n    console.log('Data:', endpoint, data);\n    ENDPOINT_SUBJECTS[endpoint] = new BehaviorSubject<T[]>(data);\n    ENDPOINT_OBSERVABLES[endpoint] = ENDPOINT_SUBJECTS[endpoint].asObservable();\n    if (!window.control) {\n        window.control = {};\n    }\n    if (!window.control.handlers) {\n        window.control.handlers = [];\n    }\n    /** Add GET for index */\n    window.control.handlers.push({\n        path: `${endpoint}`,\n        metadata: data,\n        method: 'GET',\n        callback: (event) => {\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            list.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n            return list.filter((item) => filter(item, event.query_params));\n        },\n    } as MockHttpRequestHandler);\n    /** Add GET for show */\n    window.control.handlers.push({\n        path: `${endpoint}/:id`,\n        metadata: data,\n        method: 'GET',\n        callback: (event) => {\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            return list.find(\n                (item) => item.id === event.route_params.id && filter(item, event.query_params)\n            );\n        },\n    } as MockHttpRequestHandler);\n    /** Add POST for item */\n    window.control.handlers.push({\n        path: `${endpoint}`,\n        metadata: data,\n        method: 'POST',\n        callback: (event) => {\n            const item = event.body;\n            item.id = `item-${generateID()}`;\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            list.push(item);\n            ENDPOINT_SUBJECTS[endpoint].next(list);\n            return item;\n        },\n    } as MockHttpRequestHandler);\n    /** Add PATCH/PUT for item */\n    const action = {\n        path: `${endpoint}/:id`,\n        metadata: data,\n        method: 'POST',\n        callback: (event) => {\n            const item = event.body;\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            const index = list.find((an_item) => an_item.id === event.query_params.id);\n            if (index >= 0) {\n                const old_item = list[index];\n                list.splice(index, 1, { ...old_item, ...item });\n                ENDPOINT_SUBJECTS[endpoint].next(list);\n                return item;\n            } else {\n                throw { status: 404, message: 'Not found' };\n            }\n        },\n    } as MockHttpRequestHandler;\n    window.control.handlers.push(action);\n    window.control.handlers.push({ ...action, method: 'PUT' });\n    /** Add DELETE for item */\n    window.control.handlers.push({\n        path: `${endpoint}/:id`,\n        metadata: data,\n        method: 'DELETE',\n        callback: (event) => {\n            const item = event.body;\n            const list = ENDPOINT_SUBJECTS[endpoint].getValue() || [];\n            const index = list.find((an_item) => an_item.id === event.query_params.id);\n            if (index >= 0) {\n                list.splice(index, 1);\n                ENDPOINT_SUBJECTS[endpoint].next(list);\n                return item;\n            } else {\n                throw { status: 404, message: 'Not found' };\n            }\n        },\n    } as MockHttpRequestHandler);\n\n    return ENDPOINT_OBSERVABLES[endpoint];\n}\n","\nimport './system.mockup';\nimport './backend';\n\nexport * from './system.mockup';\n","/**\n * @Author: Alex Sorafumo <alex.sorafumo>\n * @Date:   11/01/2017 4:16 PM\n * @Email:  alex@yuion.net\n * @Filename: mock-system.ts\n * @Last modified by:   Alex Sorafumo\n * @Last modified time: 03/02/2017 2:26 PM\n */\n\nimport * as dayjs from 'dayjs';\n\nconst win = self as any;\n\nwin.systemData = win.systemData || {};\nwin.control = win.control || {};\nwin.control.systems = win.control.systems || {};\nwin.control.systems['sys-B0'] = {\n    System: [\n        {\n            name: 'Demo System'\n        }\n    ],\n    Demo: [\n        {\n            volume: 0,\n            mute: false,\n            views: 0,\n            state: 'Idle',\n\n            $play: () => {\n                win.control.systems['sys-B0'].Demo[0].state = 'Playing';\n            },\n\n            $stop: () => {\n                win.control.systems['sys-B0'].Demo[0].state = 'Stopped';\n            },\n\n            $volume: (value: number) => {\n                this.volume = value;\n                if (this.volume > 100) {\n                    this.volume = 100;\n                } else if (this.volume < 0) {\n                    this.volume = 0;\n                }\n            },\n\n            $mute: (state: boolean) => {\n                this.mute = state;\n            },\n\n            $state: (status: string) => {\n                this.state = status;\n            }\n        }\n    ]\n};\n\nsetTimeout(() => initMessages(), 500);\n\nfunction initMessages() {\n    if (win.backend && win.backend.model.user) {\n        const messages = [\n            'Testing',\n            'Response to Testing',\n            `Hello I'm ${win.backend.model.user.name}`,\n            `Hello ${win.backend.model.user.name}, this is the concierge`,\n            'Can I book a room for tomorrow at 9:30am?',\n            'Sure, how does Activity Space 31.04 sound?',\n            'That\\'s exactly what I\\'m looking for, thanks',\n            'Alright, you now have a booking for Activity Space 31.04 at 9:30am tomorrow.'\n        ];\n        const time = dayjs()\n            .add(-messages.length * 30, 'm')\n            .startOf('s');\n        let index = 0;\n        for (const msg of messages) {\n            win.control.systems['sys-B0'].Slack[0].threads.local.push({\n                text: msg,\n                username: index % 2 === 0 ? win.backend.model.user.name : '',\n                ts: time.valueOf()\n            });\n            index++;\n            time.add(30, 'm');\n        }\n    } else {\n        setTimeout(() => initMessages(), 500);\n    }\n}\n\nwin.systemData['sys-B0'] = win.control.systems['sys-B0'];\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport * as dayjs from 'dayjs';\n\n@Pipe({\n    name: 'dateFrom'\n})\nexport class DateFromPipe implements PipeTransform {\n    public transform(value: number): string {\n        const now = dayjs();\n        const date = dayjs(value);\n        let diff = now.diff(date, 'm');\n        const direction = diff < 0;\n        diff = Math.abs(diff);\n        if (diff < 1) { // Less than a minute\n            return direction ? 'In less than a minute' : 'Less than a minute ago';\n        } else if (diff === 1) { // 1 minute\n            return direction ? 'In about 1 minute' : 'About a minute ago';\n        } else if (diff < 60) { // Minutes\n            return direction ? `In ${diff} minutes` : `${diff} minutes ago`;\n        } else if (diff < 24 * 60) { // Hours\n            const hours = Math.floor(diff / 60);\n            return direction\n                ? `In ${hours} hour${hours === 1 ? '' : 's'}`\n                : `${hours} hour${hours === 1 ? '' : 's'} ago`;\n        } else if (diff < 30 * 24 * 60) { // Days\n            const days = Math.floor(diff / (24 * 60));\n            return direction\n                ? `In ${days} day${days === 1 ? '' : 's'}`\n                : `${days} day${days === 1 ? '' : 's'} ago`;\n        } else if (diff < 365 * 24 * 60) { // Months\n            const months = Math.floor(diff / (30 * 24 * 60));\n            return direction\n                ? `In ${months} month${months === 1 ? '' : 's'}`\n                : `${months} month${months === 1 ? '' : 's'} ago`;\n        } else if (diff >= 365 * 24 * 60) { // Years\n            const years = Math.floor(diff / (365 * 24 * 60));\n            return direction\n                ? `In ${years} year${years === 1 ? '' : 's'}`\n                : `${years} year${years === 1 ? '' : 's'} ago`;\n        }\n        return 'Just now';\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'driverFormat'\n})\nexport class DriverFormatPipe implements PipeTransform {\n    public transform(format: string): string {\n        if (typeof format !== 'string') return '';\n        if ((format || '').indexOf('/') >= 0) {\n            const parts = format.split('/');\n            parts.splice(0, 1);\n            return `<div class=\"formatted-driver-name\">${parts\n                .map(i => `<div class=\"name-part\">${i}</div>`)\n                .join(\n                    '<div class=\"icon\"><i class=\"material-icons\">keyboard_arrow_right</i></div>'\n                )}</div>`;\n        }\n        return format || '';\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'formatList'\n})\nexport class FormatListPipe implements PipeTransform {\n    public transform(value: string[]): any {\n        return value.join('\\n');\n    }\n}\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { RouterModule } from '@angular/router';\n\nimport { ASpinnerModule } from '@acaprojects/ngx-spinners';\nimport { APipesModule } from '@acaprojects/ngx-pipes';\nimport { ACustomEventsModule } from '@acaprojects/ngx-custom-events';\nimport { ComposerModule } from '@placeos/composer';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n// import { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { CdkTableModule } from '@angular/cdk/table';\n\nimport { BaseDirective } from './globals/base.directive';\nimport { ContextMenuComponent } from './components/context-menu/context-menu.component';\nimport { ItemDisplayComponent } from './components/item-display/item-display.component';\nimport { LOGIN_COMPONENTS } from './components/login';\nimport { SearchbarComponent } from './components/searchbar/searchbar.component';\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\nimport { BaseRootComponent } from './components/base-root.component';\nimport { IconComponent } from './components/icon/icon.component';\nimport { TerminalComponent } from './components/terminal/terminal.component';\n\nimport { SettingsFieldComponent } from './components/custom-fields/settings-field/settings-field.component';\nimport { ItemSearchFieldComponent } from './components/custom-fields/item-search-field/item-search-field.component';\nimport { DateFieldComponent } from './components/custom-fields/date-field/date-field.component';\nimport { TimeFieldComponent } from './components/custom-fields/time-field/time-field.component';\nimport { SystemExecFieldComponent } from './components/custom-fields/system-exec-field/system-exec-field.component';\n\nimport { SystemFormComponent } from './components/forms/system-form/system-form.component';\nimport { ModuleFormComponent } from './components/forms/module-form/module-form.component';\nimport { ZoneFormComponent } from './components/forms/zone-form/zone-form.component';\nimport { DriverFormComponent } from './components/forms/driver-form/driver-form.component';\nimport { UserFormComponent } from './components/forms/user-form/user-form.component';\nimport { DomainFormComponent } from './components/forms/domain-form/domain-form.component';\nimport { ApplicationFormComponent } from './components/forms/application-form/application-form.component';\nimport { RepositoryFormComponent } from './components/forms/repository-form/repository-form.component';\nimport { TriggerFormComponent } from './components/forms/trigger-form/trigger-form.component';\nimport { TriggerConditionFormComponent } from './components/forms/trigger-condition-form/trigger-condition-form.component';\nimport { TriggerConditionComparisonFormComponent } from './components/forms/trigger-condition-form/comparison-form/comparison-form.component';\nimport { TriggerConditionTimeFormComponent } from './components/forms/trigger-condition-form/time-form/time-form.component';\nimport { TriggerActionFormComponent } from './components/forms/trigger-action-form/trigger-action-form.component';\nimport { SystemTriggerFormComponent } from './components/forms/system-trigger-form/system-trigger-form.component';\n\nimport { DriverFormatPipe } from './pipes/driver-format.pipe';\nimport { DateFromPipe } from './pipes/date-from.pipe';\nimport { FormatListPipe } from './pipes/format-list.pipe';\nimport { OauthSourceFormComponent } from './components/forms/oauth-source-form/oauth-source-form.component';\nimport { LdapSourceFormComponent } from './components/forms/ldap-source-form/ldap-source-form.component';\nimport { SamlSourceFormComponent } from './components/forms/saml-source-form/saml-source-form.component';\nimport { ObjectListFieldComponent } from './components/custom-fields/object-list-field/object-list-field.component';\nimport { DebugOutputComponent } from './components/debug-output/debug-output.component';\nimport { SettingsFormComponent } from './components/forms/settings-form/settings-form.component';\nimport { ADatePickerModule } from '@acaprojects/ngx-date-picker';\nimport { BrokerFormComponent } from './components/forms/broker-form/broker-form.component';\nimport { UnauthorisedComponent } from './components/unauthorised/unauthorised.component';\n\nconst FORM_COMPONENTS: Type<any>[] = [\n    SystemFormComponent,\n    ModuleFormComponent,\n    ZoneFormComponent,\n    DriverFormComponent,\n    UserFormComponent,\n    DomainFormComponent,\n    ApplicationFormComponent,\n    TriggerFormComponent,\n    RepositoryFormComponent,\n    TriggerConditionFormComponent,\n    TriggerActionFormComponent,\n    SystemTriggerFormComponent,\n    OauthSourceFormComponent,\n    LdapSourceFormComponent,\n    SamlSourceFormComponent,\n    SettingsFormComponent,\n    BrokerFormComponent,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    BaseDirective,\n    BaseRootComponent,\n    ItemDisplayComponent,\n    SearchbarComponent,\n    SidebarComponent,\n    ...LOGIN_COMPONENTS,\n    IconComponent,\n    ...FORM_COMPONENTS,\n    TerminalComponent,\n    DebugOutputComponent,\n    UnauthorisedComponent,\n];\n\nconst PIPES: Type<any>[] = [\n    DriverFormatPipe,\n    DateFromPipe,\n    FormatListPipe,\n];\n\nconst ENTRY_COMPONENT: Type<any>[] = [\n    ItemSearchFieldComponent,\n    SettingsFieldComponent,\n    DateFieldComponent,\n    TimeFieldComponent,\n    ContextMenuComponent,\n    SystemExecFieldComponent,\n    ObjectListFieldComponent,\n];\n\nconst MATERIAL_MODULES: any[] = [\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    // MatProgressBarModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatTooltipModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatChipsModule,\n    MatTabsModule,\n    MatCardModule,\n    MatExpansionModule,\n    CdkTableModule\n];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS,\n        ...PIPES,\n        ...ENTRY_COMPONENT,\n        TriggerConditionComparisonFormComponent,\n        TriggerConditionTimeFormComponent,\n    ],\n    imports: [\n        CommonModule,\n        ASpinnerModule,\n        FormsModule,\n        APipesModule,\n        ReactiveFormsModule,\n        ACustomEventsModule,\n        ADatePickerModule,\n        ScrollingModule,\n        ComposerModule,\n        ...MATERIAL_MODULES,\n        RouterModule.forChild([])\n    ],\n    exports: [\n        ASpinnerModule,\n        APipesModule,\n        ACustomEventsModule,\n        ADatePickerModule,\n        ComposerModule,\n        ...COMPONENTS,\n        ...PIPES,\n        ...ENTRY_COMPONENT,\n        ...MATERIAL_MODULES\n    ]\n})\nexport class SharedContentModule {}\n","import { EngineModule } from '@placeos/ts-client';\n\nimport { HashMap } from './types.utilities';\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${str ? '&' : ''}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n\n/**\n * Calculate the index of the module\n * @param module_list List of modules in the parent system\n * @param module Module to work out index\n */\nexport function calculateModuleIndex(module_list: EngineModule[], module: EngineModule): number {\n    const driver = module.driver || { class_name: 'System' };\n    const module_class = module.custom_name || driver.class_name;\n    const modules_with_class = module_list.filter(mod => {\n        const d = mod.driver || { class_name: 'System' };\n        const mod_class = mod.custom_name || d.class_name;\n        return mod_class === module_class;\n    });\n    return Math.max(1, modules_with_class.findIndex(mod => mod.id === module.id) + 1);\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineApplication } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateApplicationFormFields(app: EngineApplication): FormDetails {\n    if (!app) {\n        throw Error('No domain application passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(app.name || '', [Validators.required]),\n        scopes: new FormControl(app.scopes || ''),\n        skip_authorization: new FormControl(app.skip_authorization || ''),\n        redirect_uri: new FormControl(app.redirect_uri || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    app.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { EngineOAuthSource, EngineLDAPSource, EngineSAMLSource } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\nimport { Validators, FormControl, FormGroup } from '@angular/forms';\n\n/**\n * Generate form controls for an OAuth authentication source\n * @param auth_source Auth source to apply changes to\n */\nexport function generateOAuthSourceForm(auth_source: EngineOAuthSource): FormDetails {\n    if (!auth_source) {\n        throw Error('No OAuth source passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(auth_source.name || '', [Validators.required]),\n        client_id: new FormControl(auth_source.client_id || ''),\n        client_secret: new FormControl(auth_source.client_secret || ''),\n        info_mappings: new FormControl(auth_source.info_mappings || {}),\n        site: new FormControl(auth_source.site || ''),\n        authorize_url: new FormControl(auth_source.authorize_url || ''),\n        token_method: new FormControl(auth_source.token_method || 'post'),\n        auth_scheme: new FormControl(auth_source.auth_scheme || 'request_body'),\n        token_url: new FormControl(auth_source.token_url || ''),\n        scope: new FormControl(auth_source.scope || ''),\n        raw_info_url: new FormControl(auth_source.raw_info_url || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    auth_source.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Generate form controls for an SAML authentication source\n * @param auth_source Auth source to apply changes to\n */\nexport function generateSAMLSourceForm(auth_source: EngineSAMLSource): FormDetails {\n    if (!auth_source) {\n        throw Error('No OAuth source passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(auth_source.name || '', [Validators.required]),\n        issuer: new FormControl(auth_source.issuer || '', [Validators.required]),\n        idp_sso_target_url: new FormControl(auth_source.issuer || '', [Validators.required]),\n        name_identifier_format: new FormControl(auth_source.name_identifier_format || '', [\n            Validators.required\n        ]),\n        assertion_consumer_service_url: new FormControl(\n            auth_source.assertion_consumer_service_url || '',\n            [Validators.required]\n        ),\n        request_attributes: new FormControl(auth_source.request_attributes || [], [\n            Validators.required\n        ]),\n        idp_sso_target_url_runtime_params: new FormControl(\n            auth_source.idp_sso_target_url_runtime_params || {}\n        ),\n        uid_attribute: new FormControl(auth_source.uid_attribute || ''),\n        idp_cert: new FormControl(auth_source.idp_cert || ''),\n        idp_cert_fingerprint: new FormControl(auth_source.idp_cert_fingerprint || ''),\n        attribute_service_name: new FormControl(auth_source.attribute_service_name || ''),\n        attribute_statements: new FormControl(auth_source.attribute_statements || {}),\n        idp_slo_target_url: new FormControl(auth_source.idp_slo_target_url || ''),\n        slo_default_relay_state: new FormControl(auth_source.slo_default_relay_state || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    auth_source.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Generate form controls for an LDAP authentication source\n * @param auth_source Auth source to apply changes to\n */\nexport function generateLDAPSourceForm(auth_source: EngineLDAPSource): FormDetails {\n    if (!auth_source) {\n        throw Error('No OAuth source passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(auth_source.name || '', [Validators.required]),\n        host: new FormControl(auth_source.host || '', [Validators.required]),\n        port: new FormControl(auth_source.port || '', [Validators.min(1), Validators.max(65535)]),\n        auth_method: new FormControl(auth_source.auth_method || 'plain'),\n        uid: new FormControl(auth_source.uid || ''),\n        base: new FormControl(auth_source.base || '', [Validators.required]),\n        bind_dn: new FormControl(auth_source.bind_dn || ''),\n        password: new FormControl(auth_source.password || ''),\n        filter: new FormControl(auth_source.filter || '')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    auth_source.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { PlaceMQTTBroker, AuthType } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateBrokerFormFields(broker: PlaceMQTTBroker): FormDetails {\n    if (!broker) {\n        throw Error('No MQTT Broker passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(broker.name || '', [Validators.required]),\n        description: new FormControl(broker.description),\n        auth_type: new FormControl(broker.auth_type),\n        host: new FormControl(broker.host, [Validators.required]),\n        port: new FormControl(broker.port, [Validators.required]),\n        tls: new FormControl(broker.tls),\n        username: new FormControl(\n            broker.username,\n            broker.auth_type === AuthType.UserPassword ? [Validators.required] : []\n        ),\n        password: new FormControl(\n            broker.password,\n            broker.auth_type === AuthType.UserPassword ? [Validators.required] : []\n        ),\n        certificate: new FormControl(\n            broker.certificate,\n            broker.auth_type === AuthType.Certificate ? [Validators.required] : []\n        ),\n        secret: new FormControl(broker.secret),\n        filters: new FormControl(broker.filters),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe((value) =>\n                    broker.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    subscriptions.push(\n        fields.auth_type.valueChanges.subscribe((type) => {\n            switch (type) {\n                case AuthType.Certificate:\n                    fields.username.setValidators([]);\n                    fields.password.setValidators([]);\n                    fields.certificate.setValidators([Validators.required]);\n                case AuthType.UserPassword:\n                    fields.username.setValidators([Validators.required]);\n                    fields.password.setValidators([Validators.required]);\n                    fields.certificate.setValidators([]);\n                default:\n                    fields.username.setValidators([]);\n                    fields.password.setValidators([]);\n                    fields.certificate.setValidators([]);\n            }\n        })\n    );\n    return {\n        form: new FormGroup(fields),\n        subscriptions,\n    };\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineDomain } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateDomainFormFields(domain: EngineDomain): FormDetails {\n    if (!domain) {\n        throw Error('No User passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(domain.name || '', [Validators.required]),\n        domain: new FormControl(domain.domain || '', [Validators.required]),\n        login_url: new FormControl(domain.login_url || ''),\n        logout_url: new FormControl(domain.logout_url || ''),\n        config: new FormControl(domain.config || ''),\n        internals: new FormControl(domain.internals || ''),\n        description: new FormControl(domain.description || ''),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value => domain.storePendingChange(key as any, value))\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineDriver, EngineRepository, EngineDriverRole } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\nimport { validateURI } from '../validation.utilities';\n\nexport interface DriverInitData {\n    repo: EngineRepository;\n    driver: EngineDriver;\n}\n\nexport function generateDriverFormFields(driver: EngineDriver): FormDetails {\n    if (!driver) {\n        throw Error('No Driver passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(driver.id || ''),\n        repository_id: new FormControl(driver.repository_id),\n        file_name: new FormControl(driver.file_name),\n        commit: new FormControl(driver.commit),\n        name: new FormControl(driver.name || '', [Validators.required]),\n        role: new FormControl(driver.role || EngineDriverRole.Logic),\n        module_name: new FormControl(driver.module_name || '', [Validators.required]),\n        default_uri: new FormControl(driver.default_uri || '', [validateURI]),\n        default_port: new FormControl(driver.default_port || 1, [Validators.min(1), Validators.max(65535)]),\n        class_name: new FormControl(driver.class_name || ''),\n        description: new FormControl(driver.description || ''),\n        ignore_connected: new FormControl(driver.ignore_connected || false),\n        settings: new FormControl('')\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    driver.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    if (driver.id) {\n        delete fields.class_name;\n        delete fields.role;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { EngineModule, EngineSystem, EngineDriver, EngineDriverRole } from '@placeos/ts-client';\n\nimport { FormDetails, validateYAML } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\nimport { validateURI, validateIpAddress } from '../validation.utilities';\n\nexport function generateModuleFormFields(module: EngineModule): FormDetails {\n    if (!module) {\n        throw Error('No Module passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        ip: new FormControl(module.ip || '', [validateIpAddress]),\n        port: new FormControl(module.port || null, [Validators.min(1), Validators.max(65535)]),\n        tls: new FormControl(module.tls || false),\n        udp: new FormControl(module.udp || false),\n        makebreak: new FormControl(module.makebreak || false),\n        ignore_connected: new FormControl(module.ignore_connected || false),\n        uri: new FormControl(module.uri || '', [validateURI]),\n        notes: new FormControl(module.notes || ''),\n        name: new FormControl(module.name || ''),\n        custom_name: new FormControl(module.custom_name || ''),\n        system: new FormControl(module.system),\n        driver: new FormControl('', [Validators.required])\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0 && key.indexOf('driver') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>{\n                    console.log('Change:', key, value, fields[key]);\n                    module.storePendingChange(key as any, value);\n                })\n            );\n        }\n    }\n    if (!module.id) {\n        subscriptions.push(\n            fields.system.valueChanges.subscribe((value: EngineSystem) =>\n                module.storePendingChange('control_system_id', value.id)\n            )\n        );\n        subscriptions.push(\n            fields.driver.valueChanges.subscribe((value: EngineDriver) => {\n                module.storePendingChange('driver_id', value.id);\n                fields.name.setValue(value.name || value.module_name);\n                fields.uri.setValue(value.default_uri);\n                fields.port.setValue(value.default_port || 1);\n                resetModuleFormValidators(fields);\n                switch (value.role) {\n                    case EngineDriverRole.Service:\n                    case EngineDriverRole.Websocket:\n                        fields.uri.setValidators([Validators.required, validateURI]);\n                        fields.udp.setValue(false);\n                        break;\n                    case EngineDriverRole.Device:\n                    case EngineDriverRole.SSH:\n                        fields.ip.setValidators([validateIpAddress, Validators.required]);\n                        fields.port.setValidators([Validators.min(1), Validators.max(65535), Validators.required]);\n                        break;\n                    case EngineDriverRole.Logic:\n                        fields.system.setValidators([Validators.required]);\n                        break;\n                }\n            })\n        );\n    } else {\n        delete fields.system;\n        delete fields.driver;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\nexport function resetModuleFormValidators(fields: HashMap<FormControl>) {\n    fields.ip.setValidators([validateIpAddress]);\n    fields.port.setValidators([Validators.min(1), Validators.max(65535)]);\n    fields.uri.setValidators([validateURI]);\n    // fields.settings_string.setValidators([validateYAML]);\n    fields.system.setValidators([]);\n    fields.driver.setValidators([Validators.required]);\n}\n","import { Validators, FormControl, FormGroup } from '@angular/forms';\nimport { HashMap, EngineRepository, EngineRepositoryType } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\n\n/**\n * Generate angular form controls\n * @param repository Trigger to generate the form controls for\n */\nexport function generateRepositoryFormFields(repository: EngineRepository): FormDetails {\n    if (!repository) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(repository.id || ''),\n        commit_hash: new FormControl(repository.commit_hash || ''),\n        branch: new FormControl(repository.branch || 'master', [Validators.required]),\n        name: new FormControl(repository.name || '', [Validators.required]),\n        folder_name: new FormControl(repository.folder_name || '', [Validators.required]),\n        description: new FormControl(repository.description || ''),\n        uri: new FormControl(repository.uri || '', [Validators.required]),\n        repo_type: new FormControl(repository.repo_type || EngineRepositoryType.Driver),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe((value) =>\n                    repository.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    if (!repository.id) {\n        repository.storePendingChange('commit_hash', 'HEAD');\n    } else {\n        if (repository.type === EngineRepositoryType.Driver) {\n            delete fields.branch;\n        }\n        delete fields.folder_name;\n        delete fields.uri;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions,\n    };\n}\n","import { EngineSystem, EngineZone, EncryptionLevel } from '@placeos/ts-client';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { HashMap } from '../types.utilities';\n\nimport * as yaml from 'js-yaml';\n\nexport interface FormDetails {\n    form: FormGroup;\n    subscriptions: Subscription[];\n}\n\nexport function validateYAML(control: AbstractControl) {\n    const value = control.value || '';\n    let message = '';\n    try {\n        yaml.safeLoad(value, { strict: true });\n    } catch (e) {\n        console.error(e);\n        message = e.message;\n    }\n    return message ? { yaml: message } : null;\n}\n\nexport const URL_PATTERN =\n    '^(?:(?:(?:https?|ftp|wss?):)?//)(?:S+(?::S*)?@)?(?:(?!(?:10|127)(?:.d{1,3}){3})(?!(?:169.254|192.168)(?:.d{1,3}){2})(?!172.(?:1[6-9]|2d|3[0-1])(?:.d{1,3}){2})(?:[1-9]d?|1dd|2[01]d|22[0-3])(?:.(?:1?d{1,2}|2[0-4]d|25[0-5])){2}(?:.(?:[1-9]d?|1dd|2[0-4]d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:.(?:[a-z\\u00a1-\\uffff]{2,})))(?::d{2,5})?(?:[/?#]S*)?$';\n\nexport function generateSystemsFormFields(system: EngineSystem): FormDetails {\n    if (!system) {\n        throw Error('No System passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(system.name || '', [Validators.required]),\n        display_name: new FormControl(system.display_name || ''),\n        email: new FormControl(system.email || '', [Validators.pattern('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-z]{2,10}$')]),\n        support_url: new FormControl(system.support_url || '', [Validators.pattern(URL_PATTERN)]),\n        installed_ui_devices: new FormControl(system.installed_ui_devices || 0, [\n            Validators.pattern('[0-9]*'),\n        ]),\n        features: new FormControl(\n            (typeof system.features === 'string'\n                ? (system.features as any).split(' ')\n                : system.features) || []\n        ),\n        capacity: new FormControl(system.capacity || 0, [Validators.pattern('[0-9]*')]),\n        bookable: new FormControl(system.bookable || false),\n        description: new FormControl(system.description || ''),\n        map_id: new FormControl(system.map_id || ''),\n        zone: new FormControl('', [Validators.required]),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe((value) =>\n                    system.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    if (!system.id) {\n        subscriptions.push(\n            fields.zone.valueChanges.subscribe((value: EngineZone) =>\n                system.storePendingChange('zones', [value.id])\n            )\n        );\n    } else {\n        delete fields.zone;\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions,\n    };\n}\n","import { Validators, FormControl, FormGroup, AbstractControl } from '@angular/forms';\nimport {\n    EngineTrigger,\n    HashMap,\n    TriggerStatusVariable,\n    TriggerConditionOperator,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerAtTimeCondition,\n    TriggerCronTimeCondition,\n    TriggerFunction,\n    TriggerMailer\n} from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { validateJSONString } from '../validation.utilities';\n\nimport * as dayjs from 'dayjs';\n\n/**\n * Generate angular form controls\n * @param trigger Trigger to generate the form controls for\n */\nexport function generateTriggerFormFields(trigger: EngineTrigger): FormDetails {\n    if (!trigger) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(trigger.name || '', [Validators.required]),\n        description: new FormControl(trigger.description || ''),\n        enable_webhook: new FormControl(trigger.enable_webhook || false),\n        supported_methods: new FormControl(trigger.supported_methods || []),\n        debounce_period: new FormControl(trigger.debounce_period || 0)\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    trigger.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n/**\n * Generate angular form controls\n * @param trigger Trigger to generate the form controls for\n */\nexport function generateTriggerSettingsFormFields(trigger: EngineTrigger): FormDetails {\n    if (!trigger) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(trigger.name || ''),\n        triggered: new FormControl(+trigger.activated_count > 0),\n        exec_enabled: new FormControl(!!trigger.exec_enabled),\n        enabled: new FormControl(!!trigger.enabled),\n        important: new FormControl(!!trigger.important)\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    trigger.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Validate a side of the comparison pair\n * @param control Control holding the comparison\n */\nexport function validateCompare(control: AbstractControl) {\n    const form = control.parent;\n    if (\n        form &&\n        form instanceof FormGroup &&\n        form.controls.condition_type &&\n        form.controls.condition_type.value === 'compare'\n    ) {\n        if (control.value instanceof Object) {\n            const value: TriggerStatusVariable = control.value;\n            return !value.mod ? { module: true } : !value.status ? { status: true } : null;\n        } else {\n            return validateJSONString(control);\n        }\n    }\n    return null;\n}\n\n/**\n * Generate form controls for creating a trigger condition\n */\nexport function generateTriggerConditionForm(\n    condition: TriggerComparison | TriggerTimeCondition = {} as any\n) {\n    const type = (condition as TriggerTimeCondition).type ? 'time' : 'compare';\n    const left =\n        typeof (condition as TriggerComparison).left === 'object'\n            ? { ...((condition as TriggerComparison).left as any) }\n            : (condition as TriggerComparison).left;\n    const right =\n        typeof (condition as TriggerComparison).right === 'object'\n            ? { ...((condition as TriggerComparison).right as any) }\n            : (condition as TriggerComparison).right;\n    const fields: HashMap<FormControl> = {\n        condition_type: new FormControl(type),\n        left: new FormControl({ ...(left || {}) }, [validateCompare]),\n        operator: new FormControl(\n            (condition as TriggerComparison).operator || TriggerConditionOperator.EQ\n        ),\n        right: new FormControl(right || undefined, [validateCompare]),\n        time_type: new FormControl((condition as TriggerTimeCondition).type || 'at'),\n        time: new FormControl(\n            (+(condition as TriggerAtTimeCondition).time || 0) * 1000 || dayjs().valueOf()\n        ),\n        cron: new FormControl((condition as TriggerCronTimeCondition).cron || undefined)\n    };\n    const subscriptions = [];\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n\n/**\n * Validate form control storing a list of emails\n * @param control Form control to valid\n */\nexport function validateEmailList(control: AbstractControl) {\n    if (control.value && control.value instanceof Array) {\n        const value: string[] = control.value;\n        return value.reduce(\n            (valid, email) => valid && !Validators.email({ value: email } as any),\n            true\n        )\n            ? null\n            : { email: true };\n    }\n    return null;\n}\n\n/**\n * Generate form controls for creating a trigger action\n */\nexport function generateTriggerActionForm(action: TriggerFunction | TriggerMailer = {} as any) {\n    const type = action && (action as TriggerMailer).emails ? 'email' : 'function';\n    const fields: HashMap<FormControl> = {\n        action_type: new FormControl(type),\n        emails: new FormControl((action as TriggerMailer).emails || [], [\n            Validators.min(1),\n            Validators.required,\n            validateEmailList\n        ]),\n        content: new FormControl((action as TriggerMailer).emails || '', [Validators.required]),\n        method_call: new FormControl((action as TriggerFunction) || null, [])\n    };\n    const subscriptions = [];\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { EngineUser } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function validateMatch(name: string) {\n    return (control: AbstractControl) => {\n        const group = control.parent;\n        if (group) {\n            const value = group.controls[name] ? group.controls[name].value : '';\n            return value !== control.value ? { match: true } : null;\n        }\n        return null;\n    }\n}\n\nexport function generateUserFormFields(user: EngineUser): FormDetails {\n    if (!user) {\n        throw Error('No User passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || '', [Validators.required]),\n        email: new FormControl(user.email || '', [Validators.email, Validators.required]),\n        staff_id: new FormControl(user.staff_id || ''),\n        support: new FormControl(user.support || false),\n        sys_admin: new FormControl(user.sys_admin || false),\n        password: new FormControl('', !user.id ? [Validators.required] : undefined),\n        confirm_password: new FormControl('', [validateMatch('password')]),\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && key.indexOf('confirm') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    user.storePendingChange(key as any, value)\n                )\n            );\n        }\n    }\n    subscriptions.push(fields.password.valueChanges.subscribe(() => {\n        fields.confirm_password.updateValueAndValidity();\n    }));\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { EngineZone } from '@placeos/ts-client';\n\nimport { FormDetails } from './systems.utilities';\nimport { HashMap } from '../types.utilities';\n\nexport function generateZoneFormFields(zone: EngineZone): FormDetails {\n    if (!zone) {\n        throw Error('No Zone passed to generate form fields');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(zone.id),\n        name: new FormControl(zone.name || '', [Validators.required]),\n        tags: new FormControl(zone.tags || []),\n        description: new FormControl(zone.description || ''),\n        parent_zone: new FormControl(null),\n        parent_id: new FormControl(zone.parent_id),\n        location: new FormControl(zone.location),\n        display_name: new FormControl(zone.display_name),\n        code: new FormControl(zone.display_name),\n        type: new FormControl(zone.display_name),\n        count: new FormControl(zone.count),\n        capacity: new FormControl(zone.capacity),\n        map_id: new FormControl(zone.map_id)\n    };\n    const subscriptions = [];\n    for (const key in fields) {\n        if (fields[key] && zone.hasOwnProperty(key) && key.indexOf('settings') < 0) {\n            subscriptions.push(\n                fields[key].valueChanges.subscribe(value =>\n                    {\n                        zone.storePendingChange(key as any, value)}\n                )\n            );\n        }\n    }\n    subscriptions.push(\n        fields.parent_zone.valueChanges.subscribe((zone: EngineZone) =>\n            {\n                console.log('Zone:', zone);\n                fields.parent_id.setValue(zone.id);\n            }\n        )\n    );\n    return {\n        form: new FormGroup(fields),\n        subscriptions\n    };\n}\n","import { HashMap, Point } from './types.utilities';\n\nimport * as dayjs from 'dayjs';\nimport * as merge from 'deepmerge';\nimport * as yaml from 'js-yaml';\n\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map[key]) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/* istanbul ignore next */\n/**\n * detect IE\n * returns version of IE or false, if browser is not Internet Explorer\n */\nexport function detectIE() {\n    var ua = window.navigator.userAgent;\n\n    var msie = ua.indexOf('MSIE ');\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n    }\n\n    var trident = ua.indexOf('Trident/');\n    if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n    }\n\n    var edge = ua.indexOf('Edge/');\n    if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n    }\n\n    // other browser\n    return false;\n}\n\n/**\n * Checks whether the platform is a mobile device.\n */\nexport function isMobileModule(): boolean {\n    const r = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n    return !!navigator.userAgent.match(r);\n}\n\n/**\n * Checks whether the browser is Mobile Safari.\n */\nexport function isMobileSafari(): boolean {\n    const agent = navigator.userAgent;\n    return !!(\n        agent.match(/iPhone|iPad|iPod/) &&\n        agent.match(/AppleWebKit/) &&\n        !agent.match('CriOS')\n    );\n}\n\n/**\n * Checks whether the browser is Android Chrome.\n */\nexport function isAndroidChrome(): boolean {\n    const agent = navigator.userAgent;\n    return !!(agent.match(/Android/) && agent.match(/Chrome/));\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\n/**\n * Generate string representation of a number with zeros padding the length\n * @param value Number to pad with zeros\n * @param length Length of the resulting string\n */\nexport function padZero(value: number, length: number): string {\n    let str = value.toString();\n    while (str.length < length) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique(array: any[], key: string = '') {\n    return array.filter(\n        (element, index) =>\n            (key\n                ? array.findIndex((i) => i[key] === element[key])\n                : array.findIndex((item) => item === element)) === index\n    );\n}\n\n/**\n * Convert duration to human readable string\n * @param duration Duration in minutes\n * @param short Whether to use short form of duration words e.g. hours as h\n */\nexport function humaniseDuration(duration: number, short: boolean = false) {\n    if (!duration || duration < 0) {\n        return '';\n    }\n    const h = Math.floor(duration / 60);\n    let d = `${h >= 1 ? h + (short ? 'h' : ' hour' + (h === 1 ? '' : 's')) : ''}`;\n    if (duration % 60 !== 0) {\n        if (d) {\n            d += short ? ' ' : ', ';\n        }\n        const m = duration % 60;\n        d += `${m >= 1 ? m + (short ? 'm' : ' minute' + (m === 1 ? '' : 's')) : ''}`;\n    }\n    return d;\n}\n\n/**\n * Get a filtered list of items\n * @param filter Value to filter on\n * @param items List of results to filter\n * @param fields Fields to check for matches on each item\n */\nexport function filterList<T = HashMap>(\n    filter: string,\n    items?: T[],\n    fields: string[] = ['id']\n): T[] {\n    let results: any[];\n    // Tokenise filter string\n    const filters = (filter || '').toLowerCase().split(' ');\n    const list = {};\n    for (const f of filters) {\n        if (f) {\n            if (!list[f]) {\n                list[f] = 0;\n            }\n            list[f]++;\n        }\n    }\n    // Group similar tokens\n    const parts = [];\n    for (const f in list) {\n        if (list.hasOwnProperty(f)) {\n            parts.push({ word: f, count: list[f], regex: new RegExp(f, 'gi') });\n        }\n    }\n    parts.sort((a, b) => b.word.length - a.word.length || a.word.localeCompare(b.word));\n    const item_list = JSON.parse(JSON.stringify(items || []));\n    if (filter) {\n        results = item_list.filter((item) => {\n            let match_count = 0;\n            item.match_index = 65535;\n            item.match = '';\n            const field_list = {};\n            // Initialise field match variables\n            for (const f of fields) {\n                field_list[f] = {\n                    value: (item[f] || '').toLowerCase(),\n                    index: 65536,\n                    matched: 0,\n                };\n            }\n            // Search for matches with the tokenised filter string\n            for (const i of parts) {\n                if (i.word) {\n                    // Check fields for matches\n                    for (const f of fields) {\n                        const field = field_list[f];\n                        const index = field.value.indexOf(i.word);\n                        field.index = index < field.index ? index : field.index;\n                        field.matches = (field.value.match(i.regex) || []).length;\n                        field.value = field.value.replace(i.regex, ' ');\n                    }\n                    // Update token match count\n                    for (const f of fields) {\n                        const field = field_list[f];\n                        if (field.matches >= i.count) {\n                            match_count++;\n                            // Update field matches\n                            let changed = 0;\n                            const tokens = (item[`match_${f}`] || item[f] || '').split(' ');\n                            for (const k of tokens) {\n                                if (changed >= i.count) {\n                                    break;\n                                }\n                                if (k.toLowerCase().indexOf(i.word) >= 0 && k.indexOf('`') < 0) {\n                                    tokens[tokens.indexOf(k)] = k.replace(i.regex, '`$&`');\n                                    changed++;\n                                }\n                            }\n                            item[`match_${f}`] = tokens.join(' ');\n                            break;\n                        }\n                    }\n                }\n            }\n            // Get field with the most relevent match\n            for (const f of fields) {\n                const field = field_list[f];\n                if (field.index < item.match_index && field.index >= 0) {\n                    item.match_index = field.index;\n                    item.match = f;\n                }\n            }\n            return item.match_index >= 0 && item.match && match_count >= parts.length;\n        });\n    } else {\n        results = item_list;\n    }\n    // Sort by order of relevence then name\n    results.sort((a, b) => {\n        const diff = a.match_index - b.match_index;\n        return diff === 0 ? a.name.localeCompare(b.name) : diff;\n    });\n    return results;\n}\n\n/**\n * Convert a match string from `filterList` to renderable HTML\n * @param str Match string to change\n */\nexport function matchToHighlight(str: string): string {\n    if (str) {\n        str = str.replace(/\\`[a-zA-Z0-9\\@\\.\\_]*\\`/g, '<span class=\"highlight\">$&</span>');\n        str = str.replace(/\\`/g, '');\n    }\n    return str;\n}\n\n/**\n * Convert time string to ms from UTC epoch for today\n * @param time Time string in the format `HH:mm`\n */\nexport function timeToDate(time: string): number {\n    const parts = (time || '').split(':');\n    const date = dayjs()\n        .hour(+parts[0])\n        .minute(+parts[1])\n        .startOf('m');\n    return date.valueOf();\n}\n\n/**\n * Merge two YAML objects together\n * @param dest Destination object to merge\n * @param source Source object to merge\n */\nexport function mergeYAMLSettings(dest: string = '', source: string = ''): string {\n    const dest_obj = yaml.safeLoad(dest) || {};\n    const source_obj = yaml.safeLoad(source) || {};\n    const merged_obj = merge(dest_obj, source_obj);\n    return yaml.safeDump(merged_obj, { indent: 4 });\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm A';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date.toLocaleTimeString();\n    return localeString.indexOf('AM') < 0 && localeString.indexOf('PM') < 0;\n}\n\n/**\n * Calculate the position counter for the given number e.g `1st`, `2nd`, `3rd`, `4th`...\n * @param num Number to caculate position for\n */\nexport function numberToPosition(num: number): string {\n    const mod_ten = num % 10;\n    if (num > 10 && num < 20) {\n        return `${num}th`;\n    } else if (mod_ten === 1) {\n        return `${num}st`;\n    } else if (mod_ten === 2) {\n        return `${num}nd`;\n    } else if (mod_ten === 3) {\n        return `${num}rd`;\n    }\n    return `${num}th`;\n}\n\n/**\n * Copy the given value to the OS Clipboard\n * @param value String to copy to the clipboard\n */\nexport function copyToClipboard(value: string) {\n    const el = document.createElement('textarea'); // Create a <textarea> element\n    el.value = value; // Set its value to the string that you want copied\n    el.setAttribute('readonly', ''); // Make it readonly to be tamper-proof\n    el.style.position = 'absolute';\n    el.style.left = '-9999px'; // Move outside the screen to make it invisible\n    document.body.appendChild(el); // Append the <textarea> element to the HTML document\n    // Check if there is any content selected previously\n    const selected =\n        document.getSelection().rangeCount > 0\n            ? document.getSelection().getRangeAt(0) // Store selection if found\n            : false; // Mark as false to know no selection existed before\n    // Select the <textarea> content\n    el.select();\n    // Copy - only works as a result of a user action (e.g. click events)\n    document.execCommand('copy');\n    document.body.removeChild(el); // Remove the <textarea> element\n    if (selected) {\n        // If a selection existed before copying\n        // Unselect everything on the HTML document\n        document.getSelection().removeAllRanges();\n        // Restore the original selection\n        document.getSelection().addRange(selected);\n    }\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, seperator: string = ',') {\n    const lines = csv.split('\\n');\n    let fields = lines.splice(0, 1)[0].split(seperator);\n    fields = fields.map((v) => v.replace('\\r', ''));\n    const list: any[] = [];\n    for (const line of lines) {\n        let parts = line.split(seperator);\n        parts = parts.map((v) => v.replace('\\r', ''));\n        /* istanbul ignore else */\n        if (parts.length >= fields.length) {\n            const item: any = {};\n            for (let i = 0; i <= parts.length; i++) {\n                let part = null;\n                part = parts[i];\n                /* istanbul ignore else */\n                if (part !== undefined) {\n                    console.log('Part:', fields[i], part);\n                    let value = '';\n                    try { value = JSON.parse(part) }\n                    catch (e) { value = part; }\n                    item[(fields[i] || '').split(' ').join('_').toLowerCase()] = value;\n                }\n            }\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n * @param use_keys Fields in the objects to use in the CSV output\n * @param seperator Seperator between field values in the CSV data\n */\nexport function jsonToCsv(json: HashMap[], use_keys?: string[], seperator = ',') {\n    /* istanbul ignore else */\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter(\n            (key) => (!use_keys || use_keys.includes(key)) && json[0].hasOwnProperty(key)\n        );\n        console.log('Valid Keys:', valid_keys);\n        return `\\uFEFF${valid_keys.join(seperator)}\\n${json\n            .map((item) =>\n                valid_keys\n                    .map((key) =>\n                        item[key] instanceof Object ? JSON.stringify(item[key]) : item[key]\n                    )\n                    .join(seperator)\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(contents));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\n/**\n * Grab point details from mouse or touch event\n * @param event Event to grab details from\n */\nexport function eventToPoint(event: MouseEvent | TouchEvent): Point {\n    if (!event) {\n        return { x: -1, y: -1 };\n    }\n    if (event instanceof MouseEvent) {\n        return { x: event.clientX, y: event.clientY };\n    } else {\n        return event.touches && event.touches.length > 0\n            ? { x: event.touches[0].clientX, y: event.touches[0].clientY }\n            : { x: -1, y: -1 };\n    }\n}\n","import { Validators, AbstractControl } from '@angular/forms';\n\nexport const validateIpAddress = (ctrl) =>\n    /^(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)$/g.test(\n        ctrl.value || '1.1.1.1'\n    )\n        ? null\n        : { pattern: true };\n\nexport const validateURI = (ctrl) => {\n    if (!ctrl.value) {\n        return null;\n    } else {\n        return /\\w+:(\\/?\\/?)[^\\s]+?/gm.test(ctrl.value) ? null : { pattern: true };\n    }\n}\n\nexport const validateURL = Validators.pattern(\n    /^(?:(http(s)?):\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/g\n);\n\nexport function validateJSONString(control: AbstractControl) {\n    if (!control || !control.value) {\n        return null;\n    }\n    try {\n        const json = JSON.parse(control.value);\n    } catch (e) {\n        return { json: true };\n    }\n    return null;\n}\n","import {\n    Component,\n    OnChanges,\n    Input,\n    ViewChild,\n    ElementRef,\n    SimpleChanges,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport {\n    EngineResource,\n    EngineSystem,\n    EngineModule,\n    EngineZone,\n    HashMap\n} from '@placeos/ts-client';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\nimport { Subject, Observable, of } from 'rxjs';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'global-search',\n    templateUrl: './global-search.template.html',\n    styleUrls: ['./global-search.styles.scss'],\n    animations: [\n        trigger('listAnimation', [\n            transition('* => *', [\n                // each time the binding value changes\n                query(':enter', [\n                    style({ transform: 'translateY(100%)', opacity: 0 }),\n                    stagger(50, [\n                        animate('.2s', style({ transform: 'translateY(0%)', opacity: 1 }))\n                    ])\n                ])\n            ])\n        ])\n    ]\n})\nexport class GlobalSearchComponent extends BaseDirective implements OnChanges {\n    /** Search query string */\n    @Input() public search: string;\n    /** Search query string */\n    @Output() public searchChange = new EventEmitter<string>();\n    /** Minimum number of characters needed to start a server query */\n    @Input('minLength') public min_length = 2;\n    /** Mapping of item types to routes */\n    public route_map: any = {\n        system: 'Systems',\n        device: 'Modules',\n        user: 'Users',\n        trigger: 'Triggers',\n        zone: 'Zones'\n    };\n    /** Whether search data is being loaded */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Observable for the list of items from an API search */\n    public search_results$: Observable<EngineResource<any>[]>;\n    /** List of item */\n    public results: EngineResource<any>[];\n    /** Current page offset to get the next list of items */\n    public offset = 0;\n\n    /** Subject holding the value of the search */\n    private search$ = new Subject<string>();\n\n    @ViewChild('item_list', { static: true }) private list_el: ElementRef;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap(query_string => {\n                this.loading = true;\n                this.offset = 20;\n                return !this.min_length || query_string.length >= this.min_length\n                    ? this.queryEndpoints(query_string)\n                    : Promise.resolve([]);\n            }),\n            catchError(() => of([])),\n            map((list: EngineResource<any>[][]) => {\n                this.loading = false;\n                return [].concat.apply([], list);\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe(list => {\n                this.results = list;\n                this.results.forEach((item: HashMap) => (item.type = this.itemType(item as any)));\n            })\n        );\n        this.subscription(\n            'navigate_end',\n            this._router.events.subscribe(event => {\n                if (event instanceof NavigationEnd) {\n                    this.afterNavigate();\n                }\n            })\n        );\n    }\n\n    public ngOnChanges(change: SimpleChanges): void {\n        if (change.search) {\n            this.timeout('search', () => this.search$.next(this.search), 100);\n        }\n    }\n\n    /**\n     * Load the next page of items for each endpoint\n     */\n    public loadMoreItems() {\n        this.loading = true;\n        this.queryEndpoints(this.search, this.offset).then(\n            (results_list: EngineResource<any>[][]) => {\n                for (const list of results_list) {\n                    this.results = unique(this.results.concat(list), 'id');\n                }\n                this.results.forEach((item: HashMap) => (item.type = this.itemType(item as any)));\n                this.offset += 20;\n                this.loading = false;\n                this.timeout('load_more', () => this.atBottom(), 2000);\n            }\n        );\n    }\n\n    /**\n     * Get the type of item\n     * @param item Item the get the type of\n     */\n    public itemType(item: EngineResource<any>): 'systems' | 'modules' | 'zones' {\n        if (item instanceof EngineSystem) return 'systems';\n        if (item instanceof EngineModule) return 'modules';\n        if (item instanceof EngineZone) return 'zones';\n        return 'zones';\n    }\n\n    /**\n     * Open the modal to edit item\n     * @param item Item to edit\n     */\n    public edit(item: EngineResource<any>) {\n        if (item) {\n            this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item,\n                    service: (item as any)._service\n                }\n            });\n        }\n    }\n\n    /**\n     * Handle navigation events while open\n     */\n    public afterNavigate() {\n        this.search = '';\n        this.searchChange.emit(this.search);\n    }\n\n    /**\n     * Query the multiple API endpoints\n     * @param query_str Filter string\n     * @param offset Returned page offset\n     */\n    private queryEndpoints(query_str: string, offset: number = 0) {\n        return Promise.all([\n            this._service.Systems.query({ q: query_str || '', offset, cache: 60 * 1000 }),\n            this._service.Zones.query({ q: query_str || '', offset, cache: 60 * 1000 }),\n            this._service.Modules.query({ q: query_str || '', offset, cache: 60 * 1000 })\n        ]);\n    }\n\n    /**\n     * Check whether the user has scrolled to the bottom of the viewport\n     */\n    public atBottom() {\n        if (!this.list_el) {\n            return this.timeout('bottom', () => this.atBottom());\n        }\n        const el = this.list_el.nativeElement;\n        if (el && el.scrollHeight - el.scrollTop === el.clientHeight) {\n            this.loadMoreItems();\n        }\n    }\n}\n","<div class=\"container\" [class.dark-mode]=\"dark_mode\" #item_list [@listAnimation]=\"results ? results.length : 0\" (scroll)=\"atBottom()\">\n    <ng-container *ngIf=\"!loading\" >\n        <div class=\"item\" #list_item *ngFor=\"let item of (results || [])\" [title]=\"item.name\">\n            <a class=\"name\" [routerLink]=\"['/' + item.type, item.id]\">{{item.name}}</a>\n            <a class=\"details\" [routerLink]=\"['/' + item.type, item.id]\">\n                <div [class]=\"'chip ' + item.type\">{{item.type}}</div>\n                <div class=\"id\">{{item.id}}</div>\n            </a>\n            <div class=\"options\">\n                <button mat-icon-button (touchrelease)=\"edit(item)\">\n                    <app-icon [icon]=\"{ class: 'backoffice-edit' }\"></app-icon>\n                </button>\n                <a mat-icon-button [routerLink]=\"['/' + item.type, item.id]\">\n                    <app-icon [icon]=\"{ class: 'backoffice-eye' }\"></app-icon>\n                </a>\n            </div>\n        </div>\n    </ng-container>\n    <div class=\"info-block\" center *ngIf=\"loading\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"#F44336\"></a-spinner>\n        </div>\n        <div class=\"text\">Searching...</div>\n    </div>\n    <div class=\"info-block\" center *ngIf=\"!loading && (!results || results.length <= 0)\">\n        <div class=\"icon\">\n            <i class=\"backoffice-cross\"></i>\n        </div>\n        <div class=\"text\">No matches found</div>\n    </div>\n    <div class=\"more\" *ngIf=\"loading\">\n        <a-spinner double-circle-ring color=\"#F44336\"></a-spinner>\n    </div>\n</div>\n","\nimport { TopbarHeaderComponent } from './topbar-header/topbar-header.component';\nimport { SidebarMenuComponent } from './sidebar-menu/sidebar-menu.component';\nimport { GlobalSearchComponent } from './global-search/global-search.component';\n\nexport const SHELL_COMPONENTS: any[] = [\n    TopbarHeaderComponent,\n    SidebarMenuComponent,\n    GlobalSearchComponent\n];\n","import { Component, OnInit, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ComposerService } from '@placeos/composer';\nimport { first } from 'rxjs/operators';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationInternalLink } from 'src/app/shared/utilities/settings.interfaces';\n\n@Component({\n    selector: 'sidebar-menu',\n    templateUrl: './sidebar-menu.template.html',\n    styleUrls: ['./sidebar-menu.styles.scss']\n})\nexport class SidebarMenuComponent extends BaseDirective implements OnInit {\n    /** Whether the sidebar menu should be shown */\n    @Input() public show: boolean;\n    /** Emitter for changes to the sidebar show state */\n    @Output() public showChange = new EventEmitter<boolean>();\n    /** List of available menu items for the application */\n    public menu_items: ApplicationInternalLink[];\n    /** Route of the shown tooltip */\n    public tooltip: string;\n\n    constructor(\n        private _service: ApplicationService,\n        private _composer: ComposerService,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    public init() {\n        this.menu_items = this._service.setting('app.general.menu');\n        const user = this._service.Users.user.getValue();\n        /** Only allow metrics if a URL has be set */\n        if (!this._composer.auth.authority.metrics) {\n            this.menu_items = this.menu_items.filter(\n                item => item.route && item.route.indexOf('metrics') < 0\n            );\n            if (this._router.url.indexOf('metrics') >= 0) {\n                this._router.navigate([]);\n            }\n        }\n        /** Filter out items with insufficient permissions */\n        this.menu_items = this.menu_items.filter(\n            item => !item.needs_role || !!(user as any)[item.needs_role]\n        );\n        this.subscription(\n            'up',\n            this._service.Hotkeys.listen(['Control', 'Shift', 'ArrowUp'], () => this.changeSelected(-1))\n        );\n        this.subscription(\n            'down',\n            this._service.Hotkeys.listen(['Control', 'Shift', 'ArrowDown'], () => this.changeSelected(1))\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.show) {\n            this.clearTimeout('close');\n        }\n    }\n\n    /**\n     * Delayed close of the sidebar menu. Mobile Only\n     */\n    public close() {\n        this.timeout(\n            'close',\n            () => {\n                this.show = false;\n                this.showChange.emit(this.show);\n            },\n            100\n        );\n    }\n\n    /**\n     * Cancel delayed close\n     */\n    public cancelClose() {\n        this.timeout('cancel_close', () => this.clearTimeout('close'), 10);\n    }\n\n    private changeSelected(offset: number = 1) {\n        const index = this.menu_items.findIndex(item => this._router.url.indexOf(item.route) >= 0);\n        const new_index = index + offset;\n        if (this.menu_items[new_index]) {\n            this._router.navigate([this.menu_items[new_index].route]);\n        }\n    }\n}\n","<div\n    class=\"container\"\n    *ngIf=\"menu_items\"\n    [class.show]=\"show\"\n    (mouseleave)=\"tooltip = 'false'\"\n    (tapped)=\"cancelClose()\"\n    (window:click)=\"close()\"\n>\n    <ng-container *ngFor=\"let item of menu_items\">\n        <div class=\"item\" [title]=\"item.name\" [matTooltip]=\"item.name\" i18n-matTooltip matTooltipPosition=\"right\">\n            <a [routerLink]=\"[item.route]\" routerLinkActive=\"active\">\n                <app-icon [icon]=\"item?.icon\"></app-icon>\n                <div class=\"text\" *ngIf=\"!item?.hide_name\" i18n>\n                    { item.name, select, Systems { Systems } Modules { Modules } Zones { Zones }\n                    Drivers { Drivers } Repos { Repos } Triggers { Triggers } Users { Users }\n                    Domains { Domains } Admin { Admin } other { Other } }\n                </div>\n                <div class=\"bar\"></div>\n            </a>\n        </div>\n    </ng-container>\n</div>\n","import { Component, OnInit, EventEmitter, Output, Input, Type } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineSystem, EngineZone, EngineDriver, EngineModule, EngineUser } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport { ApplicationLink, ApplicationIcon, ApplicationActionLink } from 'src/app/shared/utilities/settings.interfaces';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\nimport * as dayjs from 'dayjs';\nimport { BulkItemModalComponent } from 'src/app/overlays/bulk-item-modal/bulk-item-modal.component';\n\n@Component({\n    selector: 'topbar-header',\n    templateUrl: './topbar-header.template.html',\n    styleUrls: ['./topbar-header.styles.scss']\n})\nexport class TopbarHeaderComponent extends BaseDirective implements OnInit {\n    /** Whether the sidebar menu should be shown */\n    @Input('showMenu') public show_menu: boolean;\n    /** Emitter for changes to the sidebar menu show state */\n    @Output('showMenuChange') public show_menu_change = new EventEmitter<boolean>();\n    /** Current global search string */\n    @Input() public filter: string;\n    /** Emitter for changes to the search input */\n    @Output() public filterChange = new EventEmitter();\n    /** List of user actions */\n    public options: ApplicationLink[];\n    /** Whether user tooltip should be shown */\n    public show: boolean;\n    /** Whether the user wishes to bulk add items */\n    public bulk: boolean = false;\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n    public set dark_mode(state: boolean) {\n        this._service.Users.dark_mode = state;\n    }\n\n    public get title() {\n        return document.title.split(' | ')[0];\n    }\n\n    public get is_fools_day(): boolean {\n        return dayjs().format('D MMM') === '1 Apr' && !localStorage.getItem('I\\'M NO FOOL!!!');\n    }\n\n    /** Application logo */\n    public get logo(): ApplicationIcon {\n        return this._service.setting('app.logo_light');\n    }\n\n    /** Whether global search is enabled */\n    public get has_search(): boolean {\n        return this._service.setting('app.general.global_search');\n    }\n\n    /** Whether global search is enabled */\n    public get languages(): { name: string, locale: string, icon: ApplicationIcon }[] {\n        return this._service.setting('app.languages') || [];\n    }\n\n    /** Active user */\n    public get user(): any {\n        return this._service.Users.user.getValue();\n    }\n\n    /** Current environment of the application */\n    public get env(): string {\n        return this._service.setting('env');\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit() {}\n\n    public notAFool() {\n        localStorage.setItem('I\\'M NO FOOL!!!', 'true');\n    }\n\n    public newSystem() {\n        this.newItem(new EngineSystem(), this._service.Systems, EngineSystem);\n    }\n\n    public newZone() {\n        this.newItem(new EngineZone(), this._service.Zones, EngineZone);\n    }\n\n    public newModule() {\n        this.newItem(new EngineModule(), this._service.Modules, EngineModule);\n    }\n\n    public newDriver() {\n        this.newItem(new EngineDriver(), this._service.Drivers, EngineDriver);\n    }\n\n    public newUser() {\n        this.newItem(new EngineUser(), this._service.Users, EngineUser);\n    }\n\n    /**\n     * Open the modal to create a new engine resource\n     */\n    protected newItem<T = any>(item: any, service: any, constr: Type<T>) {\n        if (this.bulk) {\n            this._dialog.open(BulkItemModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    constr,\n                    service\n                }\n            });\n        } else {\n            this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item,\n                    service\n                }\n            });\n        }\n    }\n\n    /** Toggle the show state of the sidebar menu */\n    public toggleMenu() {\n        this.show_menu = !this.show_menu;\n        this.show_menu_change.emit(this.show_menu);\n    }\n\n    /**\n     * Emit changes to the global search filter\n     */\n    public postFilter() {\n        this.filterChange.emit(this.filter);\n    }\n}\n","<div class=\"container\">\n    <div class=\"topbar\">\n        <button mat-icon-button class=\"mobile-only\" (tapped)=\"toggleMenu()\">\n            <app-icon [icon]=\"{ class: 'backoffice-' + (show_menu ? 'cross' : 'menu') }\"></app-icon>\n        </button>\n        <div class=\"block\">\n            <div *ngIf=\"logo\" class=\"logo\">\n                <a [routerLink]=\"['/']\" *ngIf=\"!is_fools_day; else fools_day\">\n                    Place<span>OS</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"uat\" *ngIf=\"env !== 'prod'\">\n            {{ env }}\n        </div>\n        <div class=\"search\">\n            <searchbar\n                *ngIf=\"has_search\"\n                [(filter)]=\"filter\"\n                (filterChange)=\"postFilter()\"\n            ></searchbar>\n        </div>\n        <div class=\"block end\">\n            <button\n                mat-icon-button\n                class=\"more-actions not-mobile\"\n                [matMenuTriggerFor]=\"more_actions\"\n            >\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'more_vert' }\"></app-icon>\n            </button>\n            <!-- TODO Add user details display -->\n            <button mat-icon-button class=\"avatar\" [title]=\"user?.name\" [matMenuTriggerFor]=\"menu\">\n                <div\n                    class=\"img\"\n                    [style.background-image]=\"('url(' + (user?.image || 'https://www.gravatar.com/avatar/' + user?.gravatar_hash) + ')') | safe:'style'\"\n                ></div>\n            </button>\n        </div>\n    </div>\n</div>\n<mat-menu #menu=\"matMenu\">\n    <a mat-menu-item>\n        <div class=\"avatar\" [routerLink]=\"['/profile']\" routerLinkActive=\"active\">\n            <div\n                class=\"img\"\n                [style.background-image]=\"('url(' + (user?.image || 'https://www.gravatar.com/avatar/' + user?.gravatar_hash) + ')') | safe:'style'\"\n            ></div>\n        </div>\n        <div class=\"text\">{{user?.name || 'Guest'}}</div>\n    </a>\n    <a mat-menu-item [routerLink]=\"['/profile']\" routerLinkActive=\"active\">\n        <app-icon [icon]=\"{ class: 'backoffice-user' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@profileAction\">Profile</div>\n    </a>\n    <a mat-menu-item href=\"/logout\">\n        <app-icon [icon]=\"{ class: 'backoffice-log-out' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@logoutAction\">Logout</div>\n    </a>\n    <div class=\"item\" mat-menu-item role=\"menuitemcheckbox\">\n        <app-icon [icon]=\"{ class: 'backoffice-moon' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@darkMode\">Dark Mode</div>\n        <div class=\"toggle\" (click)=\"$event.stopPropagation()\">\n            <mat-slide-toggle [(ngModel)]=\"dark_mode\"></mat-slide-toggle>\n        </div>\n    </div>\n    <button mat-menu-item [matMenuTriggerFor]=\"language_menu\" *ngIf=\"languages.length > 1\">\n        <app-icon [icon]=\"{ class: 'backoffice-globe' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@languageAction\">Language</div>\n    </button>\n    <a mat-menu-item [href]=\"'https://github.com/PlaceOS/backoffice/issues/new?title=Issue on page ' + title\" target=\"_blank\">\n        <app-icon [icon]=\"{ class: 'backoffice-github' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@reportAction\">Report an Issue</div>\n    </a>\n</mat-menu>\n<mat-menu #more_actions=\"matMenu\">\n    <button mat-menu-item [matMenuTriggerFor]=\"type_menu\" (mouseenter)=\"bulk = false\" (click)=\"bulk = false\">\n        <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newAction\">New</div>\n    </button>\n    <button mat-menu-item [matMenuTriggerFor]=\"type_menu\" (mouseenter)=\"bulk = true\" (click)=\"bulk = true\">\n        <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@bulkNewAction\">Bulk New</div>\n    </button>\n</mat-menu>\n<mat-menu #type_menu=\"matMenu\">\n    <button mat-menu-item (tapped)=\"newSystem()\">\n        <app-icon [icon]=\"{ class: 'backoffice-documents' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newSystemAction\">{ bulk, select, true { Systems } false { System } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newZone()\">\n        <app-icon [icon]=\"{ class: 'backoffice-layers' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newZoneAction\">{ bulk, select, true { Zones } false { Zone } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newDriver()\">\n        <app-icon [icon]=\"{ class: 'backoffice-tools' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newDriverAction\">{ bulk, select, true { Drivers } false { Driver } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newModule()\">\n        <app-icon [icon]=\"{ class: 'backoffice-tablet' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newModuleAction\">{ bulk, select, true { Modules } false { Module } }</div>\n    </button>\n    <button mat-menu-item (tapped)=\"newUser()\">\n        <app-icon [icon]=\"{ class: 'backoffice-users' }\"></app-icon>\n        <div class=\"text\" i18n=\"@@newUserAction\">{ bulk, select, true { Users } false { User } }</div>\n    </button>\n</mat-menu>\n<ng-template #fools_day>\n    <a href=\"http://www.nyan.cat/\" (click)=\"notAFool()\">April <span>Fools</span></a>\n</ng-template>\n<mat-menu #language_menu=\"matMenu\">\n    <a mat-menu-item [href]=\"'/backoffice/' + language.locale\" (tapped)=\"newSystem()\" *ngFor=\"let language of languages\">\n        <app-icon [icon]=\"language.icon\"></app-icon>\n        <div class=\"text\">{{ language.name }}</div>\n    </a>\n</mat-menu>\n","\nimport { AppShellComponent } from './shell.component';\nimport { SHELL_COMPONENTS } from './components';\n\nexport const APP_COMPONENTS: any[] = [\n    AppShellComponent,\n    ...SHELL_COMPONENTS\n];\n\nexport const APP_ENTRY_COMPONENTS: any[] = [\n\n];\n","/**\n * @Author: Alex Sorafumo\n * @Date:   17/10/2016 4:10 PM\n * @Email:  alex@yuion.net\n * @Filename: simple.component.ts\n * @Last modified by:   Alex Sorafumo\n * @Last modified time: 01/02/2017 1:37 PM\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport { EngineUser } from '@placeos/ts-client';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationLink } from '../shared/utilities/settings.interfaces';\nimport { ApplicationService } from '../services/app.service';\nimport { BaseDirective } from '../shared/globals/base.directive';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'app-shell',\n    styleUrls: ['./shell.styles.scss'],\n    templateUrl: './shell.template.html'\n})\nexport class AppShellComponent extends BaseDirective implements OnInit {\n    /** Whether the application is loading */\n    public loading: boolean;\n    /** Display string for the current year */\n    public year: string;\n    /** Currently active user */\n    public user: EngineUser;\n    /** Global search filter string */\n    public filter: string;\n    /** Whether sidebar menu should be shown */\n    public show: boolean;\n\n    /** Active environment */\n    public get env(): string {\n        return this._service.setting('env') || '';\n    }\n\n    /** List of core tiles to show on the sidebar menu */\n    public get tiles(): ApplicationLink[] {\n        return this._service.setting('app.tiles') || [];\n    }\n\n    /** Whether dark mode is enabled */\n    public get dark_mode(): boolean {\n        return this._service.Users.dark_mode;\n    }\n\n    public get is_fools_day(): boolean {\n        return dayjs().format('D MMM') === '1 Apr' && !localStorage.getItem('I\\'M NO FOOL!!!');\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.year = dayjs().format('YYYY');\n        this.subscription(\n            'user',\n            this._service.Users.user.subscribe(user => (this.user = user))\n        );\n        this.loading = true;\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    public init() {\n        this.loading = false;\n        this._service.Users.current().then(user => (this.user = user));\n    }\n\n    /** Navigate to the root page */\n    public home() {\n        this._service.navigate('');\n    }\n}\n","<div class=\"container\" [class.uat]=\"env !== 'prod'\" [class.dark-mode]=\"dark_mode\" [class.joke]=\"is_fools_day\" *ngIf=\"user && !loading\">\n    <div class=\"header\">\n        <topbar-header [(showMenu)]=\"show\" [(filter)]=\"filter\"></topbar-header>\n    </div>\n    <div class=\"body\" [class.filtered]=\"filter\">\n        <div class=\"sidebar-menu\">\n            <sidebar-menu [(show)]=\"show\"></sidebar-menu>\n        </div>\n        <div class=\"content\">\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n    <div class=\"search-results\" *ngIf=\"filter\">\n        <global-search [(search)]=\"filter\"></global-search>\n    </div>\n    <app-debug-output></app-debug-output>\n</div>\n<div class=\"container loader\" [class.uat]=\"env !== 'prod'\" *ngIf=\"loading\">\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <a-spinner circle-ring color=\"#fff\"></a-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@rootLoader\">Loading application data...</div>\n    </div>\n</div>\n<div class=\"container login\" [class.uat]=\"env !== 'prod'\" *ngIf=\"!user\">\n    <login-display></login-display>\n</div>\n","export const environment = {\n  production: true\n};\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"07a7566\",\n    \"hash\": \"07a7566\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"07a7566\",\n    \"semverString\": null,\n    \"version\": \"2.0.2\",\n    \"core_version\": \"1.0.0\",\n    \"time\": 1594789054157\n};\n/* tslint:enable */\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}