{"version":3,"sources":["webpack:///src/app/shell/triggers/trigger-about/trigger-about.component.ts","webpack:///src/app/shell/triggers/trigger-about/trigger-about.template.html","webpack:///src/app/shell/triggers/trigger-systems/trigger-systems.template.html","webpack:///src/app/shell/triggers/trigger-systems/trigger-systems.component.ts","webpack:///src/app/shell/triggers/triggers.component.ts","webpack:///src/app/shell/triggers/triggers.template.html","webpack:///src/app/shell/triggers/triggers.module.ts","webpack:///src/app/shell/triggers/triggers.routes.ts"],"names":["$event","TriggerAboutComponent","_service","_dialog","comparisons","time_dependents","functions","mailers","subscription","listen","subscribe","item","ngOnChanges","changes","conditions","actions","confirm_ref","close","unsub","open","width","height","data","trigger","system","template_system","condition","JSON","parse","stringify","action","title","content","icon","type","componentInstance","event","reason","loading","removeCondition","index","findIndex","splice","storePendingChange","save","then","notifySuccess","err","notifyError","response","message","removeAction","emails","e","reorderAction","list","previousIndex","currentIndex","Systems","selector","templateUrl","styleUrls","TriggerSystemsComponent","_composer","system_trigger_list","connected","loadSystemTriggers","offset","query","trigger_id","id","ref","system_name","deleteTrigger","Promise","resolve","reject","url","auth","api_endpoint","system_id","http","_","TriggersComponent","_route","_router","service","Triggers","limit","system_count","last_total","length","copy","modal_ref","maxHeight","maxWidth","name","navigate","metadata","afterClosed","set","sidebarEvent","itemEvent","AppTriggersModule","forChild","declarations","imports","ROUTES","path","component","children","redirectTo"],"mappings":"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","file":"shell-triggers-triggers-module-es5.js","sourcesContent":["import { Component, Input, SimpleChanges, OnChanges, OnInit, SimpleChange } from '@angular/core';\nimport {\n    EngineTrigger,\n    EngineSystem,\n    EngineSystemsService,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerFunction,\n    TriggerMailer\n} from '@placeos/ts-client';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    TriggerActionModalComponent,\n    TriggerActionModalData\n} from 'src/app/overlays/trigger-action-modal/trigger-action-modal.component';\nimport {\n    TriggerConditionModalComponent,\n    TriggerConditionData\n} from 'src/app/overlays/trigger-condition-modal/trigger-condition-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\n\n@Component({\n    selector: 'trigger-about',\n    templateUrl: './trigger-about.template.html',\n    styleUrls: ['./trigger-about.styles.scss']\n})\nexport class TriggerAboutComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active trigger */\n    @Input() public item: EngineTrigger;\n    /** System to use for conditions with systen variables and functions */\n    public template_system: EngineSystem;\n    /** List of variable comparison trigger conditions */\n    public comparisons: TriggerComparison[] = [];\n    /** List of time dependent trigger conditions */\n    public time_dependents: TriggerTimeCondition[] = [];\n    /** List of function call trigger actions */\n    public functions: TriggerFunction[] = [];\n    /** List of email trigger actions */\n    public mailers: TriggerMailer[] = [];\n    /** Reference for confirmation modal */\n    private confirm_ref: MatDialogRef<ConfirmModalComponent>;\n\n    /** Service for handling system endpoint requests */\n    public get system_service(): EngineSystemsService {\n        return this._service.Systems;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.ngOnChanges({ item: new SimpleChange(null, this.item, false) });\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.item) {\n            if (this.item && this.item.conditions) {\n                this.comparisons = this.item.conditions.comparisons || [];\n                this.time_dependents = this.item.conditions.time_dependents || [];\n                this.functions = this.item.actions.functions || [];\n                this.mailers = this.item.actions.mailers || [];\n            }\n            if (this.confirm_ref) {\n                this.confirm_ref.close();\n                this.confirm_ref = null;\n                this.unsub('delete_confirm');\n            }\n        }\n    }\n\n    /**\n     * Add new condition to trigger\n     */\n    public addCondition() {\n        this._dialog.open<TriggerConditionModalComponent, TriggerConditionData>(\n            TriggerConditionModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {\n                    trigger: this.item,\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    /**\n     * Add new condition to trigger\n     */\n    public editCondition(condition: TriggerComparison | TriggerTimeCondition) {\n        this._dialog.open<TriggerConditionModalComponent, TriggerConditionData>(\n            TriggerConditionModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {\n                    trigger: this.item,\n                    condition: JSON.parse(JSON.stringify(condition)),\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    /**\n     * Add new action to active trigger\n     */\n    public addAction() {\n        this._dialog.open<TriggerActionModalComponent, TriggerActionModalData>(\n            TriggerActionModalComponent,\n            {\n                data: {\n                    trigger: this.item,\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    /**\n     * Edit existing action on active trigger\n     * @param action Action to edit\n     */\n    public editAction(action: TriggerFunction | TriggerMailer) {\n        this._dialog.open<TriggerActionModalComponent, TriggerActionModalData>(\n            TriggerActionModalComponent,\n            {\n                data: {\n                    trigger: this.item,\n                    action,\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    public confirmRemoveCondition(condition: TriggerComparison | TriggerTimeCondition) {\n        this.confirm_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: `Remove trigger condition`,\n                    content: `<p>Are you sure you want remove this trigger condition?</p><p>All systems using this trigger will be updated <strong>immediately</strong>.</p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' }\n                }\n            }\n        );\n        this.subscription(\n            'delete_confirm',\n            this.confirm_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                if (event.reason === 'done') {\n                    this.confirm_ref.componentInstance.loading = 'Removing trigger condition...';\n                    this.removeCondition(condition);\n                }\n            })\n        );\n    }\n\n    /**\n     * Remove a condition from the active trigger\n     * @param condition Condition to remove\n     */\n    public removeCondition(condition: TriggerComparison | TriggerTimeCondition) {\n        const conditions = {\n            comparisons: [...this.comparisons],\n            time_dependents: [...this.time_dependents]\n        };\n        if ((condition as TriggerTimeCondition).type) {\n            const index = this.time_dependents.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(condition)\n            );\n            conditions.time_dependents.splice(index, 1);\n        } else {\n            const index = this.comparisons.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(condition)\n            );\n            conditions.comparisons.splice(index, 1);\n        }\n        this.item.storePendingChange('conditions', conditions);\n        this.item.save().then(\n            () => this._service.notifySuccess('Successfully removed trigger condition.'),\n            err =>\n                this._service.notifyError(\n                    `Error removing trigger condition. Error: ${JSON.stringify(err.response || err.message || err)}`\n                )\n        );\n    }\n\n    /**\n     * Open confirmation modal for removing an action\n     * @param action Action to remove\n     */\n    public confirmRemoveAction(action: TriggerFunction | TriggerMailer) {\n        this.confirm_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: `Remove trigger action`,\n                    content: `<p>Are you sure you want remove this trigger action?</p><p>All systems using this trigger will be updated <strong>immediately</strong>.</p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' }\n                }\n            }\n        );\n        this.subscription(\n            'delete_confirm',\n            this.confirm_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                if (event.reason === 'done') {\n                    this.confirm_ref.componentInstance.loading = 'Removing trigger action...';\n                    this.removeAction(action);\n                }\n            })\n        );\n    }\n\n    /**\n     * Remove an action from the active trigger\n     * @param action Action to remove\n     */\n    public removeAction(action: TriggerFunction | TriggerMailer) {\n        const actions = {\n            functions: [...this.item.actions.functions],\n            mailers: [...this.item.actions.mailers]\n        };\n        if ((action as TriggerMailer).emails) {\n            const index = this.mailers.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(action)\n            );\n            actions.mailers.splice(index, 1);\n        } else {\n            const index = this.functions.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(action)\n            );\n            actions.functions.splice(index, 1);\n        }\n        this.item.storePendingChange('actions', actions);\n        this.item.save().then(\n            () => this._service.notifySuccess('Successfully removed trigger action.'),\n            err =>\n                this._service.notifyError(\n                    `Error removing trigger action. Error: ${JSON.stringify(err.response || err.message || err)}`\n                )\n        );\n    }\n\n    /**\n     * Open confirmation modal for re-ordering action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public confirmReorder(type: 'function' | 'mailer', event: CdkDragDrop<any[]>): void {\n        this.confirm_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: `Reoreder trigger ${type} action`,\n                    content: `<p>Are you sure you want remove this trigger condition?</p><p>All systems using this trigger will be updated <strong>immediately</strong>.</p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' }\n                }\n            }\n        );\n        this.subscription(\n            'delete_confirm',\n            this.confirm_ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.confirm_ref.componentInstance.loading = `Reordering trigger ${type} action...`;\n                    this.reorderAction(type, event);\n                }\n            })\n        );\n    }\n\n    /**\n     * Re-order action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    private reorderAction(type: 'function' | 'mailer', event: CdkDragDrop<any[]>): void {\n        const list: any[] = [...(type === 'function' ? this.functions : this.mailers)];\n        moveItemInArray(list, event.previousIndex, event.currentIndex);\n        const actions = {\n            functions: type === 'function' ? list : this.functions,\n            mailers: type === 'function' ? this.mailers : list\n        };\n        this.item.storePendingChange('actions', actions);\n        this.item.save().then(\n            () => this._service.notifySuccess(`Successfully re-ordered trigger ${type} action.`),\n            err =>\n                this._service.notifyError(\n                    `Error re-ordered trigger ${type} action. Error: ${JSON.stringify(err.response || err.message || err)}`\n                )\n        );\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section>\n            <div class=\"field\">\n                <label\n                    for=\"driver\"\n                    matTooltip=\"System to use for available status variables and function calls\"\n                    i18n=\"@@triggerTemplateSystemLabel\"\n                    >Template System:\n                </label>\n                <item-search-field\n                    [service]=\"system_service\"\n                    [(ngModel)]=\"template_system\"\n                ></item-search-field>\n            </div>\n        </section>\n        <header>\n            <div class=\"action\">\n                <button mat-icon-button [disabled]=\"!template_system\" (tapped)=\"addCondition()\">\n                    <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n                </button>\n            </div>\n            <div class=\"text\"  i18n=\"@@triggerConditionsHeader\">Conditions</div>\n        </header>\n        <section>\n            <div\n                class=\"list\"\n                *ngIf=\"comparisons.length || time_dependents.length; else no_conditions\"\n            >\n                <div class=\"header\" i18n=\"@@triggerComparisonLabel\">Variable Comparison Condtions</div>\n                <div class=\"group comparisons\">\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let comparison of comparisons\"\n                    >\n                        <div class=\"handle\"></div>\n                        <div class=\"details\">\n                            {{ comparison.left | json }} {{ comparison.operator }} {{\n                            comparison.right | json }}\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editCondition(comparison)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveCondition(comparison)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"header\" i18n=\"@@triggerTimeLabel\">Time Dependent Conditions</div>\n                <div class=\"group time-dependents\">\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let time of time_dependents\"\n                    >\n                        <div class=\"handle\"></div>\n                        <div class=\"details\">\n                            {{ time.type === 'at' ? 'At time' : 'CRON' }} {{ time.type === 'at' ?\n                            time.time : time.cron }}\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editCondition(time)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveCondition(time)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <header>\n            <div class=\"action\">\n                <button mat-icon-button [disabled]=\"!template_system\" (tapped)=\"addAction()\">\n                    <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n                </button>\n            </div>\n            <div class=\"text\" i18n=\"@@triggerActionsHeader\">Actions</div>\n        </header>\n        <section>\n            <div class=\"list\" *ngIf=\"functions.length || mailers.length; else no_actions\">\n                <div class=\"header\" i18n=\"@@triggerFunctionsLabel\">Function Call Actions</div>\n                <div\n                    class=\"group functions\"\n                    cdkDropList\n                    (cdkDropListDropped)=\"confirmReorder('function', $event)\"\n                >\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let action of functions\"\n                        cdkDrag\n                    >\n                        <div class=\"handle\" cdkDragHandle>\n                            <app-icon [icon]=\"{ class: 'backoffice-select-arrows'}\"></app-icon>\n                        </div>\n                        <div class=\"details\">\n                            {{action.mod}}, {{ action.method }}({{ action.args | json }})\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editAction(action)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveAction(action)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                        <div class=\"placeholder\" *cdkDragPlaceholder></div>\n                    </div>\n                </div>\n                <div class=\"header\" i18n=\"@@triggerEmailsLabel\">Email Actions</div>\n                <div\n                    class=\"group emails\"\n                    cdkDropList\n                    (cdkDropListDropped)=\"confirmReorder('mailer', $event)\"\n                >\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let action of mailers\"\n                        cdkDrag\n                    >\n                        <div class=\"handle\" cdkDragHandle>\n                            <app-icon [icon]=\"{ class: 'backoffice-select-arrows'}\"></app-icon>\n                        </div>\n                        <div class=\"details\">\n                            <span [matTooltip]=\"action.emails | formatList\" i18n=\"@@emailCountDisplay\"\n                                >{{ action.emails.length }} { action.emails.length, plural, =1 { Address } other { Addresses } }</span\n                            >\n                            | Body Length: {{ action.content.length }}\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editAction(action)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveAction(action)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                        <div class=\"placeholder\" *cdkDragPlaceholder></div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n</div>\n<ng-template #no_conditions>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerConditionsEmpty\">No condtions for trigger</div>\n    </div>\n</ng-template>\n<ng-template #no_actions>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerActionsEmpty\">No actions for trigger</div>\n    </div>\n</ng-template>\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <table *ngIf=\"system_trigger_list.length > 0; else empty_state\">\n            <thead>\n                <td class=\"small\"></td>\n                <td class=\"flex\" i18n=\"@@systemTableName\">Name</td>\n                <td class=\"flex\" i18n=\"@@systemTableAdded\">Added</td>\n                <td class=\"small\"></td>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let trigger of system_trigger_list\">\n                    <td class=\"small\">\n                        <div class=\"state\" [class.active]=\"trigger.bookable\"></div>\n                    </td>\n                    <td class=\"flex\">\n                        <a *ngIf=\"trigger.id\" [routerLink]=\"['/systems', trigger.id]\" [matTooltip]=\"trigger.id\">\n                            {{trigger.name}}\n                        </a>\n                    </td>\n                    <td>{{ +(trigger.created_at) * 1000 | dateFrom }}</td>\n                    <td class=\"small\">\n                        <button mat-icon-button (tapped)=\"delete(trigger)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@systemTableEmpty\">No systems with trigger</div>\n    </div>\n</ng-template>\n\n","import { Component, Input, OnChanges, SimpleChange, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineTrigger, EngineSystem, HashMap } from '@placeos/ts-client';\n\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'trigger-systems',\n    templateUrl: './trigger-systems.template.html',\n    styleUrls: ['./trigger-systems.styles.scss']\n})\nexport class TriggerSystemsComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active trigger */\n    @Input() public item: EngineTrigger;\n    /** List of systems associated with the trigger */\n    public system_trigger_list: EngineSystem[] = [];\n    /** Map of systems ids to connected status */\n    public connected: HashMap<boolean> = {};\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _composer: ComposerService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.ngOnChanges({ item: new SimpleChange(null, this.item, false) });\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item && this.item) {\n            this.loadSystemTriggers();\n        }\n    }\n\n    public loadSystemTriggers(offset: number = 0) {\n        this._service.Systems.query({\n            trigger_id: this.item.id,\n            offset\n        } as any).then(\n            list => this.system_trigger_list = list || [],\n            () => null\n        );\n    }\n\n    /**\n     * Delete the trigger from system\n     */\n    public delete(trigger: EngineTrigger) {\n        if (trigger) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Remove trigger`,\n                        content: `<p>Are you sure you want remove this trigger?</p><p>Deleting this trigger will <strong>immediately</strong> remove from the system \"${trigger.system_name || ''}\"</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe(async (event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Removing trigger...';\n                        await this.deleteTrigger(trigger).catch(err => {\n                            ref.componentInstance.loading = null;\n                            this._service.notifyError(\n                                `Error removing trigger. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            throw err;\n                        });\n                        this.loadSystemTriggers();\n                        ref.close();\n                        this.unsub('delete_confirm');\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Remove the trigger from it's associated system\n     * @param trigger Trigger to remove\n     */\n    private deleteTrigger(trigger: EngineTrigger) {\n        return new Promise((resolve, reject) => {\n            const url = `${this._composer.auth.api_endpoint}/systems/${trigger.system_id}/triggers/${trigger.id}`;\n            this._composer.http.delete(url).subscribe(\n                _ => null,\n                _ => reject(_),\n                () => resolve()\n            );\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineTrigger } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalData,\n    ConfirmModalComponent,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'app-triggers',\n    templateUrl: './triggers.template.html',\n    styleUrls: ['./triggers.styles.scss']\n})\nexport class TriggersComponent extends BaseRootComponent<EngineTrigger> implements OnInit {\n    /** Number of system triggers */\n    public system_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Triggers;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Triggers';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0, limit: 1, trigger_id: this.item.id };\n        // Get trigger count\n        this._service.Systems.query(query).then(\n            list =>\n                (this.system_count = this._service.Systems.last_total || list.length || 0)\n        );\n    }\n\n    /**\n     * Open the modal to create a new trigger\n     */\n    protected newItem(copy: boolean = false) {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: copy ? new EngineTrigger({ ...this.item, id: '', name: `${this.item.name} (1)` }) : new EngineTrigger(),\n                service: this._service.Triggers\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/triggers', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create edit the active trigger\n     */\n    protected editItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Triggers\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    /**\n     * Delete the active trigger\n     */\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete trigger`,\n                        content: `<p>Are you sure you want delete this trigger?</p><p>Deleting this trigger will <strong>immediately</strong> remove it from all associated systems and zones</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe(async (event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting trigger...';\n                        await this.item.delete().catch(err => {\n                            this.modal_ref.componentInstance.loading = null;\n                            this._service.notifyError(\n                                `Error deleting trigger. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            throw err;\n                        });\n                        this._router.navigate(['/triggers']);\n                        this._service.set('BACKOFFICE.removed', this.item.id);\n                        this.modal_ref.close();\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Triggers\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"trigger\"\n            route=\"triggers\"\n            [item]=\"item\"\n            [loading]=\"loading_item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                {\n                    id: 'systems',\n                    name: 'Systems',\n                    count: system_count,\n                    icon: { class: 'backoffice-documents' }\n                }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './triggers.routes';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about/trigger-about.component';\nimport { TriggerSystemsComponent } from './trigger-systems/trigger-systems.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n    declarations: [\n        TriggersComponent,\n        TriggerAboutComponent,\n        TriggerSystemsComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule\n    ]\n})\nexport class AppTriggersModule { }\n","import { Routes } from '@angular/router';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about/trigger-about.component';\nimport { TriggerSystemsComponent } from './trigger-systems/trigger-systems.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: TriggersComponent,\n        children: [\n            { path: 'about', component: TriggerAboutComponent },\n            { path: 'systems', component: TriggerSystemsComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n"]}