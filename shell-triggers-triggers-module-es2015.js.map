{"version":3,"sources":["./src/app/shell/triggers/trigger-about/trigger-about.component.ts","./src/app/shell/triggers/trigger-about/trigger-about.template.html","./src/app/shell/triggers/trigger-systems/trigger-systems.component.ts","./src/app/shell/triggers/trigger-systems/trigger-systems.template.html","./src/app/shell/triggers/triggers.component.ts","./src/app/shell/triggers/triggers.template.html","./src/app/shell/triggers/triggers.module.ts","./src/app/shell/triggers/triggers.routes.ts"],"names":[],"mappings":"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","file":"shell-triggers-triggers-module-es2015.js","sourcesContent":["import { Component, Input, SimpleChanges, OnChanges, OnInit, SimpleChange } from '@angular/core';\nimport {\n    EngineTrigger,\n    EngineSystem,\n    EngineSystemsService,\n    TriggerComparison,\n    TriggerTimeCondition,\n    TriggerFunction,\n    TriggerMailer\n} from '@placeos/ts-client';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    TriggerActionModalComponent,\n    TriggerActionModalData\n} from 'src/app/overlays/trigger-action-modal/trigger-action-modal.component';\nimport {\n    TriggerConditionModalComponent,\n    TriggerConditionData\n} from 'src/app/overlays/trigger-condition-modal/trigger-condition-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\n\n@Component({\n    selector: 'trigger-about',\n    templateUrl: './trigger-about.template.html',\n    styleUrls: ['./trigger-about.styles.scss']\n})\nexport class TriggerAboutComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active trigger */\n    @Input() public item: EngineTrigger;\n    /** System to use for conditions with systen variables and functions */\n    public template_system: EngineSystem;\n    /** List of variable comparison trigger conditions */\n    public comparisons: TriggerComparison[] = [];\n    /** List of time dependent trigger conditions */\n    public time_dependents: TriggerTimeCondition[] = [];\n    /** List of function call trigger actions */\n    public functions: TriggerFunction[] = [];\n    /** List of email trigger actions */\n    public mailers: TriggerMailer[] = [];\n    /** Reference for confirmation modal */\n    private confirm_ref: MatDialogRef<ConfirmModalComponent>;\n\n    /** Service for handling system endpoint requests */\n    public get system_service(): EngineSystemsService {\n        return this._service.Systems;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.ngOnChanges({ item: new SimpleChange(null, this.item, false) });\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.item) {\n            if (this.item && this.item.conditions) {\n                this.comparisons = this.item.conditions.comparisons || [];\n                this.time_dependents = this.item.conditions.time_dependents || [];\n                this.functions = this.item.actions.functions || [];\n                this.mailers = this.item.actions.mailers || [];\n            }\n            if (this.confirm_ref) {\n                this.confirm_ref.close();\n                this.confirm_ref = null;\n                this.unsub('delete_confirm');\n            }\n        }\n    }\n\n    /**\n     * Add new condition to trigger\n     */\n    public addCondition() {\n        this._dialog.open<TriggerConditionModalComponent, TriggerConditionData>(\n            TriggerConditionModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {\n                    trigger: this.item,\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    /**\n     * Add new condition to trigger\n     */\n    public editCondition(condition: TriggerComparison | TriggerTimeCondition) {\n        this._dialog.open<TriggerConditionModalComponent, TriggerConditionData>(\n            TriggerConditionModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {\n                    trigger: this.item,\n                    condition: JSON.parse(JSON.stringify(condition)),\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    /**\n     * Add new action to active trigger\n     */\n    public addAction() {\n        this._dialog.open<TriggerActionModalComponent, TriggerActionModalData>(\n            TriggerActionModalComponent,\n            {\n                data: {\n                    trigger: this.item,\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    /**\n     * Edit existing action on active trigger\n     * @param action Action to edit\n     */\n    public editAction(action: TriggerFunction | TriggerMailer) {\n        this._dialog.open<TriggerActionModalComponent, TriggerActionModalData>(\n            TriggerActionModalComponent,\n            {\n                data: {\n                    trigger: this.item,\n                    action,\n                    system: this.template_system\n                }\n            }\n        );\n    }\n\n    public confirmRemoveCondition(condition: TriggerComparison | TriggerTimeCondition) {\n        this.confirm_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: `Remove trigger condition`,\n                    content: `<p>Are you sure you want remove this trigger condition?</p><p>All systems using this trigger will be updated <strong>immediately</strong>.</p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' }\n                }\n            }\n        );\n        this.subscription(\n            'delete_confirm',\n            this.confirm_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                if (event.reason === 'done') {\n                    this.confirm_ref.componentInstance.loading = 'Removing trigger condition...';\n                    this.removeCondition(condition);\n                }\n            })\n        );\n    }\n\n    /**\n     * Remove a condition from the active trigger\n     * @param condition Condition to remove\n     */\n    public removeCondition(condition: TriggerComparison | TriggerTimeCondition) {\n        const conditions = {\n            comparisons: [...this.comparisons],\n            time_dependents: [...this.time_dependents]\n        };\n        if ((condition as TriggerTimeCondition).type) {\n            const index = this.time_dependents.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(condition)\n            );\n            conditions.time_dependents.splice(index, 1);\n        } else {\n            const index = this.comparisons.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(condition)\n            );\n            conditions.comparisons.splice(index, 1);\n        }\n        this.item.storePendingChange('conditions', conditions);\n        this.item.save().then(\n            () => this._service.notifySuccess('Successfully removed trigger condition.'),\n            err =>\n                this._service.notifyError(\n                    `Error removing trigger condition. Error: ${JSON.stringify(err.response || err.message || err)}`\n                )\n        );\n    }\n\n    /**\n     * Open confirmation modal for removing an action\n     * @param action Action to remove\n     */\n    public confirmRemoveAction(action: TriggerFunction | TriggerMailer) {\n        this.confirm_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: `Remove trigger action`,\n                    content: `<p>Are you sure you want remove this trigger action?</p><p>All systems using this trigger will be updated <strong>immediately</strong>.</p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' }\n                }\n            }\n        );\n        this.subscription(\n            'delete_confirm',\n            this.confirm_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                if (event.reason === 'done') {\n                    this.confirm_ref.componentInstance.loading = 'Removing trigger action...';\n                    this.removeAction(action);\n                }\n            })\n        );\n    }\n\n    /**\n     * Remove an action from the active trigger\n     * @param action Action to remove\n     */\n    public removeAction(action: TriggerFunction | TriggerMailer) {\n        const actions = {\n            functions: [...this.item.actions.functions],\n            mailers: [...this.item.actions.mailers]\n        };\n        if ((action as TriggerMailer).emails) {\n            const index = this.mailers.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(action)\n            );\n            actions.mailers.splice(index, 1);\n        } else {\n            const index = this.functions.findIndex(\n                item => JSON.stringify(item) === JSON.stringify(action)\n            );\n            actions.functions.splice(index, 1);\n        }\n        this.item.storePendingChange('actions', actions);\n        this.item.save().then(\n            () => this._service.notifySuccess('Successfully removed trigger action.'),\n            err =>\n                this._service.notifyError(\n                    `Error removing trigger action. Error: ${JSON.stringify(err.response || err.message || err)}`\n                )\n        );\n    }\n\n    /**\n     * Open confirmation modal for re-ordering action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    public confirmReorder(type: 'function' | 'mailer', event: CdkDragDrop<any[]>): void {\n        this.confirm_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: `Reoreder trigger ${type} action`,\n                    content: `<p>Are you sure you want remove this trigger condition?</p><p>All systems using this trigger will be updated <strong>immediately</strong>.</p>`,\n                    icon: { type: 'icon', class: 'backoffice-trash' }\n                }\n            }\n        );\n        this.subscription(\n            'delete_confirm',\n            this.confirm_ref.componentInstance.event.subscribe((e: DialogEvent) => {\n                if (e.reason === 'done') {\n                    this.confirm_ref.componentInstance.loading = `Reordering trigger ${type} action...`;\n                    this.reorderAction(type, event);\n                }\n            })\n        );\n    }\n\n    /**\n     * Re-order action for active trigger\n     * @param type Type of action to reorder\n     * @param event Drop event details\n     */\n    private reorderAction(type: 'function' | 'mailer', event: CdkDragDrop<any[]>): void {\n        const list: any[] = [...(type === 'function' ? this.functions : this.mailers)];\n        moveItemInArray(list, event.previousIndex, event.currentIndex);\n        const actions = {\n            functions: type === 'function' ? list : this.functions,\n            mailers: type === 'function' ? this.mailers : list\n        };\n        this.item.storePendingChange('actions', actions);\n        this.item.save().then(\n            () => this._service.notifySuccess(`Successfully re-ordered trigger ${type} action.`),\n            err =>\n                this._service.notifyError(\n                    `Error re-ordered trigger ${type} action. Error: ${JSON.stringify(err.response || err.message || err)}`\n                )\n        );\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section>\n            <div class=\"field\">\n                <label\n                    for=\"driver\"\n                    matTooltip=\"System to use for available status variables and function calls\"\n                    i18n=\"@@triggerTemplateSystemLabel\"\n                    >Template System:\n                </label>\n                <item-search-field\n                    [service]=\"system_service\"\n                    [(ngModel)]=\"template_system\"\n                ></item-search-field>\n            </div>\n        </section>\n        <header>\n            <div class=\"action\">\n                <button mat-icon-button [disabled]=\"!template_system\" (tapped)=\"addCondition()\">\n                    <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n                </button>\n            </div>\n            <div class=\"text\"  i18n=\"@@triggerConditionsHeader\">Conditions</div>\n        </header>\n        <section>\n            <div\n                class=\"list\"\n                *ngIf=\"comparisons.length || time_dependents.length; else no_conditions\"\n            >\n                <div class=\"header\" i18n=\"@@triggerComparisonLabel\">Variable Comparison Condtions</div>\n                <div class=\"group comparisons\">\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let comparison of comparisons\"\n                    >\n                        <div class=\"handle\"></div>\n                        <div class=\"details\">\n                            {{ comparison.left | json }} {{ comparison.operator }} {{\n                            comparison.right | json }}\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editCondition(comparison)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveCondition(comparison)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"header\" i18n=\"@@triggerTimeLabel\">Time Dependent Conditions</div>\n                <div class=\"group time-dependents\">\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let time of time_dependents\"\n                    >\n                        <div class=\"handle\"></div>\n                        <div class=\"details\">\n                            {{ time.type === 'at' ? 'At time' : 'CRON' }} {{ time.type === 'at' ?\n                            time.time : time.cron }}\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editCondition(time)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveCondition(time)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <header>\n            <div class=\"action\">\n                <button mat-icon-button [disabled]=\"!template_system\" (tapped)=\"addAction()\">\n                    <app-icon [icon]=\"{ class: 'backoffice-plus' }\"></app-icon>\n                </button>\n            </div>\n            <div class=\"text\" i18n=\"@@triggerActionsHeader\">Actions</div>\n        </header>\n        <section>\n            <div class=\"list\" *ngIf=\"functions.length || mailers.length; else no_actions\">\n                <div class=\"header\" i18n=\"@@triggerFunctionsLabel\">Function Call Actions</div>\n                <div\n                    class=\"group functions\"\n                    cdkDropList\n                    (cdkDropListDropped)=\"confirmReorder('function', $event)\"\n                >\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let action of functions\"\n                        cdkDrag\n                    >\n                        <div class=\"handle\" cdkDragHandle>\n                            <app-icon [icon]=\"{ class: 'backoffice-select-arrows'}\"></app-icon>\n                        </div>\n                        <div class=\"details\">\n                            {{action.mod}}, {{ action.method }}({{ action.args | json }})\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editAction(action)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveAction(action)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                        <div class=\"placeholder\" *cdkDragPlaceholder></div>\n                    </div>\n                </div>\n                <div class=\"header\" i18n=\"@@triggerEmailsLabel\">Email Actions</div>\n                <div\n                    class=\"group emails\"\n                    cdkDropList\n                    (cdkDropListDropped)=\"confirmReorder('mailer', $event)\"\n                >\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let action of mailers\"\n                        cdkDrag\n                    >\n                        <div class=\"handle\" cdkDragHandle>\n                            <app-icon [icon]=\"{ class: 'backoffice-select-arrows'}\"></app-icon>\n                        </div>\n                        <div class=\"details\">\n                            <span [matTooltip]=\"action.emails | formatList\" i18n=\"@@emailCountDisplay\"\n                                >{{ action.emails.length }} { action.emails.length, plural, =1 { Address } other { Addresses } }</span\n                            >\n                            | Body Length: {{ action.content.length }}\n                        </div>\n                        <button\n                            mat-icon-button\n                            [disabled]=\"!template_system\"\n                            (tapped)=\"editAction(action)\"\n                        >\n                            <app-icon [icon]=\"{ class: 'backoffice-edit'}\"></app-icon>\n                        </button>\n                        <button mat-icon-button (tapped)=\"confirmRemoveAction(action)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash'}\"></app-icon>\n                        </button>\n                        <div class=\"placeholder\" *cdkDragPlaceholder></div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n</div>\n<ng-template #no_conditions>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerConditionsEmpty\">No condtions for trigger</div>\n    </div>\n</ng-template>\n<ng-template #no_actions>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@triggerActionsEmpty\">No actions for trigger</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, SimpleChange, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ComposerService } from '@placeos/composer';\nimport { EngineTrigger, EngineSystem, HashMap } from '@placeos/ts-client';\n\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\n@Component({\n    selector: 'trigger-systems',\n    templateUrl: './trigger-systems.template.html',\n    styleUrls: ['./trigger-systems.styles.scss']\n})\nexport class TriggerSystemsComponent extends BaseDirective implements OnChanges, OnInit {\n    /** Active trigger */\n    @Input() public item: EngineTrigger;\n    /** List of systems associated with the trigger */\n    public system_trigger_list: EngineSystem[] = [];\n    /** Map of systems ids to connected status */\n    public connected: HashMap<boolean> = {};\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _composer: ComposerService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.ngOnChanges({ item: new SimpleChange(null, this.item, false) });\n            })\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item && this.item) {\n            this.loadSystemTriggers();\n        }\n    }\n\n    public loadSystemTriggers(offset: number = 0) {\n        this._service.Systems.query({\n            trigger_id: this.item.id,\n            offset\n        } as any).then(\n            list => this.system_trigger_list = list || [],\n            () => null\n        );\n    }\n\n    /**\n     * Delete the trigger from system\n     */\n    public delete(trigger: EngineTrigger) {\n        if (trigger) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Remove trigger`,\n                        content: `<p>Are you sure you want remove this trigger?</p><p>Deleting this trigger will <strong>immediately</strong> remove from the system \"${trigger.system_name || ''}\"</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe(async (event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Removing trigger...';\n                        await this.deleteTrigger(trigger).catch(err => {\n                            ref.componentInstance.loading = null;\n                            this._service.notifyError(\n                                `Error removing trigger. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            throw err;\n                        });\n                        this.loadSystemTriggers();\n                        ref.close();\n                        this.unsub('delete_confirm');\n                    }\n                })\n            );\n        }\n    }\n\n    /**\n     * Remove the trigger from it's associated system\n     * @param trigger Trigger to remove\n     */\n    private deleteTrigger(trigger: EngineTrigger) {\n        return new Promise((resolve, reject) => {\n            const url = `${this._composer.auth.api_endpoint}/systems/${trigger.system_id}/triggers/${trigger.id}`;\n            this._composer.http.delete(url).subscribe(\n                _ => null,\n                _ => reject(_),\n                () => resolve()\n            );\n        });\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <table *ngIf=\"system_trigger_list.length > 0; else empty_state\">\n            <thead>\n                <td class=\"small\"></td>\n                <td class=\"flex\" i18n=\"@@systemTableName\">Name</td>\n                <td class=\"flex\" i18n=\"@@systemTableAdded\">Added</td>\n                <td class=\"small\"></td>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let trigger of system_trigger_list\">\n                    <td class=\"small\">\n                        <div class=\"state\" [class.active]=\"trigger.enabled\"></div>\n                    </td>\n                    <td class=\"flex\">\n                        <a *ngIf=\"trigger.system_id\" [routerLink]=\"['/systems', trigger.system_id]\" [matTooltip]=\"trigger.system_id\">\n                            {{trigger.system_name}}\n                        </a>\n                    </td>\n                    <td>{{ +(trigger.created_at) * 1000 | dateFrom }}</td>\n                    <td class=\"small\">\n                        <button mat-icon-button (tapped)=\"delete(trigger)\">\n                            <app-icon [icon]=\"{ class: 'backoffice-trash' }\"></app-icon>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"text\" i18n=\"@@systemTableEmpty\">No systems with trigger</div>\n    </div>\n</ng-template>\n\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineTrigger } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport {\n    ConfirmModalData,\n    ConfirmModalComponent,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'app-triggers',\n    templateUrl: './triggers.template.html',\n    styleUrls: ['./triggers.styles.scss']\n})\nexport class TriggersComponent extends BaseRootComponent<EngineTrigger> implements OnInit {\n    /** Number of system triggers */\n    public system_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Triggers;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Triggers';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0, limit: 1, trigger_id: this.item.id };\n        // Get trigger count\n        this._service.Systems.query(query).then(\n            list =>\n                (this.system_count = this._service.Systems.last_total || list.length || 0)\n        );\n    }\n\n    /**\n     * Open the modal to create a new trigger\n     */\n    protected newItem() {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: new EngineTrigger(),\n                service: this._service.Triggers\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/triggers', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create edit the active trigger\n     */\n    protected editItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Triggers\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    /**\n     * Delete the active trigger\n     */\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete trigger`,\n                        content: `<p>Are you sure you want delete this trigger?</p><p>Deleting this trigger will <strong>immediately</strong> remove it from all associated systems and zones</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe(async (event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting trigger...';\n                        await this.item.delete().catch(err => {\n                            this.modal_ref.componentInstance.loading = null;\n                            this._service.notifyError(\n                                `Error deleting trigger. Error: ${JSON.stringify(err.response || err.message || err)}`\n                            );\n                            throw err;\n                        });\n                        this._router.navigate(['/triggers']);\n                        this._service.set('BACKOFFICE.removed', this.item.id);\n                        this.modal_ref.close();\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Triggers\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"trigger\"\n            route=\"triggers\"\n            [item]=\"item\"\n            [loading]=\"loading_item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                {\n                    id: 'systems',\n                    name: 'Systems',\n                    count: system_count,\n                    icon: { class: 'backoffice-documents' }\n                }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { ROUTES } from './triggers.routes';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about/trigger-about.component';\nimport { TriggerSystemsComponent } from './trigger-systems/trigger-systems.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n    declarations: [\n        TriggersComponent,\n        TriggerAboutComponent,\n        TriggerSystemsComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        DragDropModule\n    ]\n})\nexport class AppTriggersModule { }\n","import { Routes } from '@angular/router';\n\nimport { TriggersComponent } from './triggers.component';\nimport { TriggerAboutComponent } from './trigger-about/trigger-about.component';\nimport { TriggerSystemsComponent } from './trigger-systems/trigger-systems.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id',\n        component: TriggersComponent,\n        children: [\n            { path: 'about', component: TriggerAboutComponent },\n            { path: 'systems', component: TriggerSystemsComponent },\n            { path: '**', redirectTo: 'about' }\n        ]\n    },\n    { path: '**', redirectTo: '-' }\n];\n"],"sourceRoot":"webpack:///"}