{"version":3,"sources":["./src/app/shell/drivers/driver-about/driver-about.component.ts","./src/app/shell/drivers/driver-about/driver-about.template.html","./src/app/shell/drivers/driver-devices/driver-devices.component.ts","./src/app/shell/drivers/driver-devices/driver-devices.template.html","./src/app/shell/drivers/drivers.component.ts","./src/app/shell/drivers/drivers.template.html","./src/app/shell/drivers/drivers.module.ts","./src/app/shell/drivers/drivers.routes.ts"],"names":[],"mappings":"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","file":"shell-drivers-drivers-module-es2015.js","sourcesContent":["\nimport { Component, Input } from '@angular/core';\nimport { EngineDriver, EncryptionLevel } from '@placeos/ts-client';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmModalComponent, ConfirmModalData, CONFIRM_METADATA } from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent, Identity } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: 'driver-about',\n    templateUrl: './driver-about.template.html',\n    styleUrls: ['./driver-about.styles.scss']\n})\nexport class DriverAboutComponent extends BaseDirective {\n    /** Item to render */\n    @Input() public item: EngineDriver;\n    /** Whether driver has a compiled binary on the server */\n    public compiled: boolean;\n\n    /** Whether application is loading settings for item */\n    public get loading_settings(): boolean {\n        return this._service.get('loading_settings');\n    }\n\n    constructor(private _dialog: MatDialog, private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n            })\n        );\n        this.checkCompiled();\n    }\n\n    public recompileDriver() {\n        if (this.item) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Recompile Driver`,\n                        content: `<p>Are you sure you want recompile this driver?</p><p>New driver code will be loaded and device settings will be updated.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-cycle' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Recompiling driver...';\n                        this.item.recompile().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully recompiled driver \"${this.item.name}\".`\n                                );\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error recompiling driver. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n\n    public checkCompiled() {\n        this._service.Drivers.isCompiled(this.item.id)\n            .then(_ => this.compiled = true, _ => {\n                this.compiled = false;\n                this.timeout('compiled', () => this.checkCompiled(), 1000)\n            })\n    }\n\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <section>\n        <div class=\"field\" *ngIf=\"item.default_uri\">\n            <label i18n=\"@@driverDefaultURILabel\">Default URI:</label>\n            <div class=\"value\">{{ item.default_uri }}</div>\n        </div>\n        <div class=\"field\" *ngIf=\"item.default_port\">\n            <label i18n=\"@@driverDefaultPortLabel\">Default Port Number:</label>\n            <div class=\"value\">{{ item.default_port }}</div>\n        </div>\n        <div class=\"field\">\n            <label  i18n=\"@@driverDetailsCompiled\">Compiled:</label>\n            <div class=\"value\">{{ compiled || 'false' }}</div>\n            <mat-spinner diameter=\"32\" *ngIf=\"!compiled\"></mat-spinner>\n        </div>\n        <div class=\"field\">\n            <label i18n=\"@@driverDetailsCommit\">Commit:</label>\n            <div class=\"value\">{{ item.commit }}</div>\n        </div>\n        <div class=\"field\">\n            <label i18n=\"@@driverDetailsFileName\">File Name:</label>\n            <div class=\"value\">{{ item.file_name }}</div>\n        </div>\n        <div class=\"field\">\n            <label i18n=\"@@driverDetailsModuleName\">Module Name:</label>\n            <div class=\"value\">{{ item?.module_name }}</div>\n        </div>\n        <div class=\"field\">\n            <label i18n=\"@@driverCreatedAtLabel\">Created:</label>\n            <div class=\"value\">{{ item.created_at * 1000 | dateFrom }}</div>\n        </div>\n        <div class=\"field\">\n            <label i18n=\"@@driverUpdatedAtLabel\">Updated:</label>\n            <div class=\"value\">{{ item.updated_at * 1000 | dateFrom }}</div>\n        </div>\n    </section>\n    <section>\n        <button mat-button (tapped)=\"recompileDriver()\" i18n=\"@@driverReloadAction\">Recompile Driver</button>\n    </section>\n    <hr />\n    <header class=\"settings\" i18n=\"@@settingsLabel\">Settings</header>\n    <section *ngIf=\"!loading_settings; else load_state\">\n        <a-settings-form [merge]=\"true\" [id]=\"item.id\" [settings]=\"item.settings\"></a-settings-form>\n    </section>\n</div>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"@@driverLoadingLabel\">Loading driver settings...</div>\n    </div>\n</ng-template>\n","import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { EngineDriver, EngineModule } from '@placeos/ts-client';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable, Subject, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\n\nimport { BaseDirective } from '../../../shared/globals/base.directive';\nimport { ApplicationService } from '../../../services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'driver-devices',\n    templateUrl: './driver-devices.template.html',\n    styleUrls: ['./driver-devices.styles.scss']\n})\nexport class DriverModulesComponent extends BaseDirective implements OnChanges, OnInit {\n    @Input() public item: EngineDriver;\n\n    /** Filter string for the system list */\n    public search_str: string;\n    /** List of Modules associated with the driver */\n    public device_list: EngineModule[] = [];\n    /** List of items from an API search */\n    public search_results$: Observable<EngineModule[]>;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** Whether systems are being loaded */\n    public loading: boolean;\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n\n    public ngOnInit(): void {\n        this.subscription(\n            'item',\n            this._service.listen('BACKOFFICE.active_item').subscribe(item => {\n                this.item = item;\n                this.loadModules();\n            })\n        );\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap(query => {\n                this.loading = true;\n                return this._service.Modules.query({\n                    q: query,\n                    driver_id: this.item.id,\n                    complete: true,\n                    offset: 0,\n                    limit: 500\n                } as any);\n            }),\n            catchError(err => {\n                console.error(err);\n                return of([]);\n            }),\n            map((list: EngineModule[]) => {\n                this.loading = false;\n                const search = this.search_str.toLowerCase();\n                return list.filter(\n                    (item: any) =>\n                        item.name.toLowerCase().indexOf(search) >= 0 ||\n                        (item.email || '').toLowerCase().indexOf(search) >= 0\n                );\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe(list => (this.device_list = list))\n        );\n    }\n\n    public ngOnChanges(changes: any) {\n        if (changes.item) {\n            this.loadModules();\n        }\n    }\n\n    public loadModules(offset: number = 0) {\n        if (!this.item) { return; }\n        this._service.Modules.query({ driver_id: this.item.id, offset, limit: 500 }).then(\n            list => (this.device_list = list),\n            () => null\n        );\n    }\n\n    public removeModule(item: EngineModule) {\n        if (item) {\n            const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete module`,\n                        content: `<p>Are you sure you want delete this module?</p><p>Deleting this will module <strong>immediately</strong> remove it from any system associated with it</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'delete_confirm',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        ref.componentInstance.loading = 'Deleting module...';\n                        item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted module \"${item.name}\".`\n                                );\n                                this.loadModules();\n                                ref.close();\n                                this.unsub('delete_confirm');\n                            },\n                            err => {\n                                ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting module. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            }\n                        );\n                    }\n                })\n            );\n        }\n    }\n}\n","<div class=\"container\" *ngIf=\"item\">\n    <div class=\"settings\">\n        <section class=\"select\">\n            <mat-form-field appearance=\"outline\">\n                <div class=\"prefix\" matPrefix>\n                    <app-icon [icon]=\"{ class: 'backoffice-magnifying-glass' }\"></app-icon>\n                </div>\n                <input\n                    matInput\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event)\"\n                    name=\"search-filter\"\n                    placeholder=\"Filter Modules\"\n                />\n            </mat-form-field>\n        </section>\n        <section class=\"list\">\n            <table *ngIf=\"device_list && device_list.length > 0\">\n                <thead>\n                    <td class=\"small\" i18n=\"@@moduleTableState\">State</td>\n                    <td class=\"flex\" i18n=\"@@moduleTableName\">Name</td>\n                    <td class=\"system\" i18n=\"@@moduleTableSystem\">System</td>\n                    <td class=\"small\"></td>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let item of device_list\">\n                        <td class=\"small\">\n                            <div class=\"state\"\n                                [class.active]=\"item.running && item.connected\"\n                                [class.inactive]=\"item.running && !item.connected\"\n                                [class.black]=\"!item.running\"></div>\n                            <i binding [(model)]=\"item.connected\" [sys]=\"item.system.id\" [mod]=\"item.module_name\" bind=\"connected\"></i>\n                        </td>\n                        <td class=\"flex\">\n                            <a [routerLink]=\"['/modules', item.id]\" [matTooltip]=\"item.id\">{{item.name}}</a>\n                        </td>\n                        <td class=\"system\">\n                            <a [routerLink]=\"['/systems', item.control_system_id]\">\n                                {{item.system?.name}} (<span class=\"id\">{{item.control_system_id}}</span>)\n                            </a>\n                        </td>\n                        <td class=\"small\">\n                            <button mat-icon-button (tapped)=\"removeModule(item)\"><i class=\"backoffice-trash\"></i></button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <div class=\"info-block\" *ngIf=\"!device_list || device_list.length <= 0\">\n                <div class=\"text\" i18n=\"@@moduleTableEmpty\">No modules with driver</div>\n            </div>\n        </section>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { EngineDriver } from '@placeos/ts-client';\n\nimport { ApplicationService } from '../../services/app.service';\nimport { BaseRootComponent } from '../../shared/components/base-root.component';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { ItemCreateUpdateModalComponent } from 'src/app/overlays/item-modal/item-modal.component';\n\n@Component({\n    selector: 'app-drivers',\n    templateUrl: './drivers.template.html',\n    styleUrls: ['./drivers.styles.scss']\n})\nexport class DriversComponent extends BaseRootComponent<EngineDriver> {\n    /** Number of devices for the active system */\n    public device_count: number;\n\n    constructor(\n        protected _service: ApplicationService,\n        protected _route: ActivatedRoute,\n        protected _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super(_service, _route, _router);\n        this.service = this._service.Drivers;\n    }\n\n    public ngOnInit(): void {\n        super.ngOnInit();\n        this._service.title = 'Drivers';\n    }\n\n    protected loadValues() {\n        const query: any = { offset: 0, limit: 1, driver_id: this.item.id };\n        this._service.Modules.query(query).then(list => {\n            this.device_count = this._service.Modules.last_total || list.length || 0;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected newItem(copy: boolean = false) {\n        if (this.modal_ref) { return; }\n        this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n            height: 'auto',\n            width: 'auto',\n            maxHeight: 'calc(100vh - 2em)',\n            maxWidth: 'calc(100vw - 2em)',\n            data: {\n                item: copy ? new EngineDriver({ ...this.item, id: '', name: `${this.item.name} (1)` }) : new EngineDriver(),\n                service: this._service.Drivers\n            }\n        });\n        this.subscription('modal_events', this.modal_ref.componentInstance.event.subscribe(event => {\n            if (event.reason === 'done') {\n                this._router.navigate(['/drivers', event.metadata.item.id]);\n            }\n        }));\n        this.modal_ref.afterClosed().subscribe(() => {\n            this.unsub('modal_events');\n            this.modal_ref = null;\n        });\n    }\n\n    /**\n     * Open the modal to create a new system\n     */\n    protected editItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open(ItemCreateUpdateModalComponent, {\n                height: 'auto',\n                width: 'auto',\n                maxHeight: 'calc(100vh - 2em)',\n                maxWidth: 'calc(100vw - 2em)',\n                data: {\n                    item: this.item,\n                    service: this._service.Drivers\n                }\n            });\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n\n    protected deleteItem() {\n        if (this.item && !this.modal_ref) {\n            this.modal_ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n                ConfirmModalComponent,\n                {\n                    ...CONFIRM_METADATA,\n                    data: {\n                        title: `Delete driver`,\n                        content: `<p>Are you sure you want delete this driver?</p><p>All modules that rely on this driver will be <strong>immediately</strong> removed.</p>`,\n                        icon: { type: 'icon', class: 'backoffice-trash' }\n                    }\n                }\n            );\n            this.subscription(\n                'modal_events',\n                this.modal_ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    if (event.reason === 'done') {\n                        this.modal_ref.componentInstance.loading = 'Deleting driver...';\n                        this.item.delete().then(\n                            () => {\n                                this._service.notifySuccess(\n                                    `Successfully deleted driver \"${this.item.name}\".`\n                                );\n                                this._router.navigate(['/drivers']);\n                                this._service.set('BACKOFFICE.removed', this.item.id);\n                                this.modal_ref.close();\n                            },\n                            err => {\n                                this.modal_ref.componentInstance.loading = null;\n                                this._service.notifyError(`Error deleting driver. Error: ${JSON.stringify(err.response || err.message || err)}`);\n                            }\n                        );\n                    }\n                })\n            );\n            this.modal_ref.afterClosed().subscribe(() => {\n                this.unsub('modal_events');\n                this.modal_ref = null;\n            });\n        }\n    }\n}\n","<div class=\"container\" [class.show]=\"show_sidebar\">\n    <div class=\"sidebar\">\n        <sidebar\n            heading=\"Drivers\"\n            [module]=\"module\"\n            [close]=\"show_sidebar\"\n            (event)=\"sidebarEvent($event)\"\n        ></sidebar>\n    </div>\n    <main (touchrelease)=\"show_sidebar = false\">\n        <item-display\n            name=\"module\"\n            route=\"drivers\"\n            [item]=\"item\"\n            [tabs]=\"[\n                { id: 'about', name: 'About', icon: { class: 'backoffice-info-with-circle' } },\n                { id: 'modules', name: 'Modules', count: device_count, icon: { class: 'backoffice-tablet' } }\n            ]\"\n            (event)=\"itemEvent($event)\"\n        >\n        </item-display>\n    </main>\n</div>\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './drivers.routes';\n\nimport { DriversComponent } from './drivers.component';\nimport { DriverAboutComponent } from './driver-about/driver-about.component';\nimport { DriverModulesComponent } from './driver-devices/driver-devices.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n    declarations: [\n        DriversComponent,\n        DriverAboutComponent,\n        DriverModulesComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule\n    ]\n})\nexport class AppDriversModule { }\n","\nimport { Routes } from '@angular/router';\n\nimport { DriversComponent } from './drivers.component';\nimport { DriverAboutComponent } from './driver-about/driver-about.component';\nimport { DriverModulesComponent } from './driver-devices/driver-devices.component';\n\nexport const ROUTES: Routes = [\n    {\n        path: ':id', component: DriversComponent, children: [\n            { path: 'about', component: DriverAboutComponent },\n            { path: 'modules', component: DriverModulesComponent },\n            { path: '**',      redirectTo: 'about' }\n        ]\n    },\n    { path: '**',      redirectTo: '-' }\n];\n"],"sourceRoot":"webpack:///"}